/*
 * Generated by Bluespec Compiler (build 503820f)
 * 
 * On Sun Dec 27 10:42:08 UTC 2020
 * 
 */

/* Generation options: */
#ifndef __mkAXIConverter_tb_h__
#define __mkAXIConverter_tb_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkAXIConverter.h"


/* Class declaration for the mkAXIConverter_tb module */
class MOD_mkAXIConverter_tb : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_mkAXIConverter INST_axi_convert;
  MOD_Wire<tUInt64> INST_m_rd_araddrOut;
  MOD_Wire<tUInt8> INST_m_rd_arprotOut;
  MOD_Wire<tUInt8> INST_m_rd_arreadyIn;
  MOD_CReg<tUWide> INST_m_rd_in_rv;
  MOD_Reg<tUInt8> INST_m_rd_isRst_isInReset;
  MOD_CReg<tUWide> INST_m_rd_out_rv;
  MOD_Wire<tUInt64> INST_m_rd_rdataIn;
  MOD_Wire<tUInt8> INST_m_rd_rrespIn;
  MOD_Wire<tUInt8> INST_m_rd_rvalidIn;
  MOD_CReg<tUWide> INST_m_wr_addrOut_rv;
  MOD_Wire<tUInt64> INST_m_wr_awaddrOut;
  MOD_Wire<tUInt8> INST_m_wr_awprotOut;
  MOD_Wire<tUInt8> INST_m_wr_awreadyIn;
  MOD_Wire<tUInt8> INST_m_wr_brespIn;
  MOD_Wire<tUInt8> INST_m_wr_bvalidIn;
  MOD_CReg<tUWide> INST_m_wr_dataOut_rv;
  MOD_CReg<tUWide> INST_m_wr_in_rv;
  MOD_Reg<tUInt8> INST_m_wr_isRst_isInReset;
  MOD_CReg<tUInt8> INST_m_wr_out_rv;
  MOD_Wire<tUInt64> INST_m_wr_wdataOut;
  MOD_Wire<tUInt8> INST_m_wr_wreadyIn;
  MOD_Wire<tUInt8> INST_m_wr_wstrbOut;
  MOD_Wire<tUInt64> INST_s_rd_araddrIn;
  MOD_Wire<tUInt8> INST_s_rd_arprotIn;
  MOD_Wire<tUInt8> INST_s_rd_arvalidIn;
  MOD_CReg<tUWide> INST_s_rd_in_rv;
  MOD_Reg<tUInt8> INST_s_rd_isRst_isInReset;
  MOD_CReg<tUWide> INST_s_rd_out_rv;
  MOD_Wire<tUInt64> INST_s_rd_rdataOut;
  MOD_Wire<tUInt8> INST_s_rd_rreadyIn;
  MOD_Wire<tUInt8> INST_s_rd_rrespOut;
  MOD_CReg<tUWide> INST_s_wd_addrIn_rv;
  MOD_Wire<tUInt64> INST_s_wd_awaddrIn;
  MOD_Wire<tUInt8> INST_s_wd_awprotIn;
  MOD_Wire<tUInt8> INST_s_wd_awvalidIn;
  MOD_Wire<tUInt8> INST_s_wd_breadyIn;
  MOD_Wire<tUInt8> INST_s_wd_brespOut;
  MOD_CReg<tUWide> INST_s_wd_dataIn_rv;
  MOD_CReg<tUWide> INST_s_wd_in_rv;
  MOD_Reg<tUInt8> INST_s_wd_isRst_isInReset;
  MOD_CReg<tUInt8> INST_s_wd_out_rv;
  MOD_Wire<tUInt64> INST_s_wd_wdataIn;
  MOD_Wire<tUInt8> INST_s_wd_wstrbIn;
  MOD_Wire<tUInt8> INST_s_wd_wvalidIn;
  MOD_Reg<tUInt8> INST_testState;
 
 /* Constructor */
 public:
  MOD_mkAXIConverter_tb(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_s_wd_out_rv_port1__read__14_BIT_2___d115;
  tUInt8 DEF_s_wd_isRst_isInReset__h4678;
  tUInt8 DEF_s_rd_out_rv_port1__read__2_BIT_66___d73;
  tUInt8 DEF_s_rd_isRst_isInReset__h3528;
  tUInt8 DEF_m_wr_dataOut_rv_port1__read__5_BIT_72___d46;
  tUInt8 DEF_m_wr_addrOut_rv_port1__read__7_BIT_67___d38;
  tUInt8 DEF_m_wr_isRst_isInReset__h1295;
  tUInt8 DEF_m_rd_in_rv_port1__read_BIT_67___d3;
  tUInt8 DEF_m_rd_isRst_isInReset__h120;
  tUWide DEF_s_wd_in_rv_port0__read____d85;
  tUWide DEF_m_wr_in_rv_port1__read____d21;
  tUWide DEF_m_wr_in_rv_port0__read____d177;
  tUWide DEF_s_wd_dataIn_rv_port1__read____d83;
  tUWide DEF_s_wd_dataIn_rv_port0__read____d105;
  tUWide DEF_m_wr_dataOut_rv_port1__read____d45;
  tUWide DEF_m_wr_dataOut_rv_port0__read____d26;
  tUWide DEF_s_wd_addrIn_rv_port1__read____d81;
  tUWide DEF_s_wd_addrIn_rv_port0__read____d95;
  tUWide DEF_s_rd_in_rv_port0__read____d62;
  tUWide DEF_m_wr_addrOut_rv_port1__read____d37;
  tUWide DEF_m_wr_addrOut_rv_port0__read____d23;
  tUWide DEF_m_rd_in_rv_port1__read____d2;
  tUWide DEF_m_rd_in_rv_port0__read____d186;
  tUWide DEF_s_rd_out_rv_port1__read____d72;
  tUWide DEF_m_rd_out_rv_port1__read____d194;
  tUWide DEF_m_rd_out_rv_port0__read____d11;
  tUInt8 DEF_b__h7878;
  tUInt8 DEF_s_wd_out_rv_port1__read____d114;
  tUInt8 DEF_m_wr_out_rv_port1__read____d184;
  tUInt8 DEF_NOT_s_wd_dataIn_rv_port0__read__05_BIT_72_06___d107;
  tUInt8 DEF_NOT_s_wd_addrIn_rv_port0__read__5_BIT_67_6___d97;
  tUInt8 DEF_NOT_s_wd_isRst_isInReset_0___d98;
  tUInt8 DEF_NOT_s_rd_in_rv_port0__read__2_BIT_67_3___d64;
  tUInt8 DEF_NOT_s_rd_isRst_isInReset_1___d65;
  tUInt8 DEF_NOT_m_wr_out_rv_port0__read__3_BIT_2_4___d55;
  tUInt8 DEF_NOT_m_wr_isRst_isInReset_0___d39;
  tUInt8 DEF_NOT_m_rd_out_rv_port0__read__1_BIT_66_2___d13;
  tUInt8 DEF_NOT_m_rd_isRst_isInReset___d4;
 
 /* Local definitions */
 private:
  tUWide DEF_m_wr_in_rv_port1__read__1_BITS_74_TO_3___d35;
  tUWide DEF_s_wd_dataIn_rv_port1__read__3_BITS_71_TO_0___d91;
  tUInt64 DEF_v__h8274;
  tUInt8 DEF_m_wr_out_rv_port1__read__84_BITS_1_TO_0_92_EQ_0___d193;
  tUInt8 DEF_testState_80_PLUS_1___d183;
  tUWide DEF__1_CONCAT_s_wd_addrIn_rv_port1__read__1_BITS_66_ETC___d94;
  tUWide DEF_s_wd_dataIn_rv_port1__read__3_BITS_71_TO_0_1_C_ETC___d93;
  tUWide DEF_x__h4764;
  tUWide DEF__1_CONCAT_m_wr_in_rv_port1__read__1_BITS_74_TO_3_5___d36;
  tUWide DEF__1_CONCAT_s_wd_wdataIn_wget__11_CONCAT_s_wd_wst_ETC___d113;
  tUWide DEF__0_CONCAT_DONTCARE___d50;
  tUWide DEF__1_CONCAT_s_wd_awaddrIn_wget__02_CONCAT_s_wd_aw_ETC___d104;
  tUWide DEF__1_CONCAT_m_wr_in_rv_port1__read__1_BITS_138_TO_ETC___d34;
  tUWide DEF__1_CONCAT_s_rd_araddrIn_wget__9_CONCAT_s_rd_arp_ETC___d71;
  tUWide DEF__0_CONCAT_DONTCARE___d8;
  tUWide DEF__1_CONCAT_m_rd_rdataIn_wget__7_CONCAT_m_rd_rres_ETC___d19;
  tUWide DEF__0_CONCAT_DONTCARE___d77;
  tUInt8 DEF__0_CONCAT_DONTCARE___d119;
 
 /* Rules */
 public:
  void RL_m_rd_isRst_isResetAssertedUpdate();
  void RL_m_rd_deqIn();
  void RL_m_rd_forwardIn();
  void RL_m_rd_enqOut();
  void RL_m_wr_isRst_isResetAssertedUpdate();
  void RL_m_wr_splitAddrData();
  void RL_m_wr_deqAddr();
  void RL_m_wr_forwardAddr();
  void RL_m_wr_deqData();
  void RL_m_wr_forwardData();
  void RL_m_wr_forwardResp();
  void RL_s_rd_isRst_isResetAssertedUpdate();
  void RL_s_rd_addrInWrite();
  void RL_s_rd_deqOut();
  void RL_s_rd_putOutData();
  void RL_s_wd_isRst_isResetAssertedUpdate();
  void RL_s_wd_mergeAddrData();
  void RL_s_wd_addrInWrite();
  void RL_s_wd_dataInWrite();
  void RL_s_wd_outWrite();
  void RL_s_wd_outForward();
  void RL_forward1();
  void RL_forward2();
  void RL_forward3();
  void RL_forward4();
  void RL_forward5();
  void RL_forward6();
  void RL_forward7();
  void RL_forward8();
  void RL_forward1_1();
  void RL_forward2_1();
  void RL_forward3_1();
  void RL_forward4_1();
  void RL_forward5_1();
  void RL_forward6_1();
  void RL_forward7_1();
  void RL_forward8_1();
  void RL_forward9();
  void RL_forward10();
  void RL_forward11();
  void RL_forward1_2();
  void RL_forward2_2();
  void RL_forward3_2();
  void RL_forward4_2();
  void RL_forward5_2();
  void RL_forward6_2();
  void RL_forward7_2();
  void RL_forward8_2();
  void RL_forward1_3();
  void RL_forward2_3();
  void RL_forward3_3();
  void RL_forward4_3();
  void RL_forward5_3();
  void RL_forward6_3();
  void RL_forward7_3();
  void RL_forward8_3();
  void RL_forward9_1();
  void RL_forward10_1();
  void RL_forward11_1();
  void RL_write_register1();
  void RL_read_register12();
  void RL_read_register13();
  void RL_write_register2();
  void RL_read_register21();
  void RL_read_register23();
  void RL_write_register3();
  void RL_read_register31();
  void RL_read_register33();
  void RL_write_register4();
  void RL_read_register41();
  void RL_read_register43();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAXIConverter_tb &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkAXIConverter_tb &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkAXIConverter_tb &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkAXIConverter_tb &backing);
};

#endif /* ifndef __mkAXIConverter_tb_h__ */
