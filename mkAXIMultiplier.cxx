/*
 * Generated by Bluespec Compiler (build e76ca21)
 * 
 * On Mon Dec 28 13:16:08 CET 2020
 * 
 */
#include "bluesim_primitives.h"
#include "mkAXIMultiplier.h"


/* Literal declarations */
static unsigned int const UWide_literal_73_haaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
									 2863311530u,
									 170u };
static tUWide const UWide_literal_73_haaaaaaaaaaaaaaaaaa(73u,
							 UWide_literal_73_haaaaaaaaaaaaaaaaaa_arr);


/* Constructor */
MOD_mkAXIMultiplier::MOD_mkAXIMultiplier(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_operand_1(simHdl, "operand_1", this, 64u, 0llu, (tUInt8)0u),
    INST_operand_2(simHdl, "operand_2", this, 64u, 0llu, (tUInt8)0u),
    INST_product(simHdl, "product", this, 64u, 0llu, (tUInt8)0u),
    INST_slave_read_araddrIn(simHdl, "slave_read_araddrIn", this, 32u, (tUInt8)0u),
    INST_slave_read_arprotIn(simHdl, "slave_read_arprotIn", this, 3u, (tUInt8)0u),
    INST_slave_read_arvalidIn(simHdl, "slave_read_arvalidIn", this, 1u, (tUInt8)0u),
    INST_slave_read_in(simHdl, "slave_read_in", this, 35u, 2u, 1u, 0u),
    INST_slave_read_isRst_isInReset(simHdl,
				    "slave_read_isRst_isInReset",
				    this,
				    1u,
				    (tUInt8)1u,
				    (tUInt8)1u),
    INST_slave_read_out(simHdl, "slave_read_out", this, 66u, 2u, 1u, 0u),
    INST_slave_read_rdataOut(simHdl, "slave_read_rdataOut", this, 64u, (tUInt8)0u),
    INST_slave_read_rreadyIn(simHdl, "slave_read_rreadyIn", this, 1u, (tUInt8)0u),
    INST_slave_read_rrespOut(simHdl, "slave_read_rrespOut", this, 2u, (tUInt8)0u),
    INST_slave_write_addrIn_rv(simHdl, "slave_write_addrIn_rv", this, 36u, 11453246122llu, (tUInt8)0u),
    INST_slave_write_awaddrIn(simHdl, "slave_write_awaddrIn", this, 32u, (tUInt8)0u),
    INST_slave_write_awprotIn(simHdl, "slave_write_awprotIn", this, 3u, (tUInt8)0u),
    INST_slave_write_awvalidIn(simHdl, "slave_write_awvalidIn", this, 1u, (tUInt8)0u),
    INST_slave_write_breadyIn(simHdl, "slave_write_breadyIn", this, 1u, (tUInt8)0u),
    INST_slave_write_brespOut(simHdl, "slave_write_brespOut", this, 2u, (tUInt8)0u),
    INST_slave_write_dataIn_rv(simHdl,
			       "slave_write_dataIn_rv",
			       this,
			       73u,
			       bs_wide_tmp(73u).set_bits_in_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_bits_in_word32(2u,
															 0u,
															 9u),
								 2u,
								 0u,
								 9u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(1u),
										    1u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(0u),
												       0u),
			       (tUInt8)0u),
    INST_slave_write_in(simHdl, "slave_write_in", this, 107u, 2u, 1u, 0u),
    INST_slave_write_isRst_isInReset(simHdl,
				     "slave_write_isRst_isInReset",
				     this,
				     1u,
				     (tUInt8)1u,
				     (tUInt8)1u),
    INST_slave_write_out(simHdl, "slave_write_out", this, 2u, 2u, 1u, 0u),
    INST_slave_write_wdataIn(simHdl, "slave_write_wdataIn", this, 64u, (tUInt8)0u),
    INST_slave_write_wstrbIn(simHdl, "slave_write_wstrbIn", this, 8u, (tUInt8)0u),
    INST_slave_write_wvalidIn(simHdl, "slave_write_wvalidIn", this, 1u, (tUInt8)0u),
    PORT_aresetn((tUInt8)1u),
    DEF_slave_write_dataIn_rv_port1__read____d24(73u),
    DEF_slave_write_dataIn_rv_port0__read____d45(73u),
    DEF_slave_write_in_first____d80(107u),
    DEF_slave_read_out_first____d18(66u),
    DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32(72u),
    DEF_operand_1_1_MUL_operand_2_2___d86(128u),
    DEF_slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34(107u),
    DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53(73u),
    DEF__0_CONCAT_DONTCARE___d30(73u),
    DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76(66u)
{
  PORT_S00_AXI_arready = false;
  PORT_S00_AXI_rvalid = false;
  PORT_S00_AXI_rdata = 0llu;
  PORT_S00_AXI_rresp = 0u;
  PORT_S00_AXI_awready = false;
  PORT_S00_AXI_wready = false;
  PORT_S00_AXI_bvalid = false;
  PORT_S00_AXI_bresp = 0u;
  PORT_RDY_S00_AXI_arready = false;
  PORT_RDY_S00_AXI_parvalid = false;
  PORT_RDY_S00_AXI_paraddr = false;
  PORT_RDY_S00_AXI_parprot = false;
  PORT_RDY_S00_AXI_rvalid = false;
  PORT_RDY_S00_AXI_prready = false;
  PORT_RDY_S00_AXI_rdata = false;
  PORT_RDY_S00_AXI_rresp = false;
  PORT_RDY_S00_AXI_awready = false;
  PORT_RDY_S00_AXI_pawvalid = false;
  PORT_RDY_S00_AXI_pawaddr = false;
  PORT_RDY_S00_AXI_pawprot = false;
  PORT_RDY_S00_AXI_wready = false;
  PORT_RDY_S00_AXI_pwvalid = false;
  PORT_RDY_S00_AXI_pwdata = false;
  PORT_RDY_S00_AXI_pwstrb = false;
  PORT_RDY_S00_AXI_bvalid = false;
  PORT_RDY_S00_AXI_pbready = false;
  PORT_RDY_S00_AXI_bresp = false;
  symbol_count = 67u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkAXIMultiplier::init_symbols_0()
{
  init_symbol(&symbols[0u], "operand_1", SYM_MODULE, &INST_operand_1);
  init_symbol(&symbols[1u], "operand_2", SYM_MODULE, &INST_operand_2);
  init_symbol(&symbols[2u], "product", SYM_MODULE, &INST_product);
  init_symbol(&symbols[3u], "RDY_S00_AXI_arready", SYM_PORT, &PORT_RDY_S00_AXI_arready, 1u);
  init_symbol(&symbols[4u], "RDY_S00_AXI_awready", SYM_PORT, &PORT_RDY_S00_AXI_awready, 1u);
  init_symbol(&symbols[5u], "RDY_S00_AXI_bresp", SYM_PORT, &PORT_RDY_S00_AXI_bresp, 1u);
  init_symbol(&symbols[6u], "RDY_S00_AXI_bvalid", SYM_PORT, &PORT_RDY_S00_AXI_bvalid, 1u);
  init_symbol(&symbols[7u], "RDY_S00_AXI_paraddr", SYM_PORT, &PORT_RDY_S00_AXI_paraddr, 1u);
  init_symbol(&symbols[8u], "RDY_S00_AXI_parprot", SYM_PORT, &PORT_RDY_S00_AXI_parprot, 1u);
  init_symbol(&symbols[9u], "RDY_S00_AXI_parvalid", SYM_PORT, &PORT_RDY_S00_AXI_parvalid, 1u);
  init_symbol(&symbols[10u], "RDY_S00_AXI_pawaddr", SYM_PORT, &PORT_RDY_S00_AXI_pawaddr, 1u);
  init_symbol(&symbols[11u], "RDY_S00_AXI_pawprot", SYM_PORT, &PORT_RDY_S00_AXI_pawprot, 1u);
  init_symbol(&symbols[12u], "RDY_S00_AXI_pawvalid", SYM_PORT, &PORT_RDY_S00_AXI_pawvalid, 1u);
  init_symbol(&symbols[13u], "RDY_S00_AXI_pbready", SYM_PORT, &PORT_RDY_S00_AXI_pbready, 1u);
  init_symbol(&symbols[14u], "RDY_S00_AXI_prready", SYM_PORT, &PORT_RDY_S00_AXI_prready, 1u);
  init_symbol(&symbols[15u], "RDY_S00_AXI_pwdata", SYM_PORT, &PORT_RDY_S00_AXI_pwdata, 1u);
  init_symbol(&symbols[16u], "RDY_S00_AXI_pwstrb", SYM_PORT, &PORT_RDY_S00_AXI_pwstrb, 1u);
  init_symbol(&symbols[17u], "RDY_S00_AXI_pwvalid", SYM_PORT, &PORT_RDY_S00_AXI_pwvalid, 1u);
  init_symbol(&symbols[18u], "RDY_S00_AXI_rdata", SYM_PORT, &PORT_RDY_S00_AXI_rdata, 1u);
  init_symbol(&symbols[19u], "RDY_S00_AXI_rresp", SYM_PORT, &PORT_RDY_S00_AXI_rresp, 1u);
  init_symbol(&symbols[20u], "RDY_S00_AXI_rvalid", SYM_PORT, &PORT_RDY_S00_AXI_rvalid, 1u);
  init_symbol(&symbols[21u], "RDY_S00_AXI_wready", SYM_PORT, &PORT_RDY_S00_AXI_wready, 1u);
  init_symbol(&symbols[22u], "RL_handleReadRequest", SYM_RULE);
  init_symbol(&symbols[23u], "RL_handleWriteRequest", SYM_RULE);
  init_symbol(&symbols[24u], "RL_product_operation", SYM_RULE);
  init_symbol(&symbols[25u], "RL_slave_read_addrInWrite", SYM_RULE);
  init_symbol(&symbols[26u], "RL_slave_read_deqOut", SYM_RULE);
  init_symbol(&symbols[27u], "RL_slave_read_isRst_isResetAssertedUpdate", SYM_RULE);
  init_symbol(&symbols[28u], "RL_slave_read_putOutData", SYM_RULE);
  init_symbol(&symbols[29u], "RL_slave_write_addrInWrite", SYM_RULE);
  init_symbol(&symbols[30u], "RL_slave_write_dataInWrite", SYM_RULE);
  init_symbol(&symbols[31u], "RL_slave_write_isRst_isResetAssertedUpdate", SYM_RULE);
  init_symbol(&symbols[32u], "RL_slave_write_mergeAddrData", SYM_RULE);
  init_symbol(&symbols[33u], "RL_slave_write_outForward", SYM_RULE);
  init_symbol(&symbols[34u], "RL_slave_write_outWrite", SYM_RULE);
  init_symbol(&symbols[35u], "S00_AXI_arready", SYM_PORT, &PORT_S00_AXI_arready, 1u);
  init_symbol(&symbols[36u], "S00_AXI_awready", SYM_PORT, &PORT_S00_AXI_awready, 1u);
  init_symbol(&symbols[37u], "S00_AXI_bresp", SYM_PORT, &PORT_S00_AXI_bresp, 2u);
  init_symbol(&symbols[38u], "S00_AXI_bvalid", SYM_PORT, &PORT_S00_AXI_bvalid, 1u);
  init_symbol(&symbols[39u], "S00_AXI_rdata", SYM_PORT, &PORT_S00_AXI_rdata, 64u);
  init_symbol(&symbols[40u], "S00_AXI_rresp", SYM_PORT, &PORT_S00_AXI_rresp, 2u);
  init_symbol(&symbols[41u], "S00_AXI_rvalid", SYM_PORT, &PORT_S00_AXI_rvalid, 1u);
  init_symbol(&symbols[42u], "S00_AXI_wready", SYM_PORT, &PORT_S00_AXI_wready, 1u);
  init_symbol(&symbols[43u], "slave_read_araddrIn", SYM_MODULE, &INST_slave_read_araddrIn);
  init_symbol(&symbols[44u], "slave_read_arprotIn", SYM_MODULE, &INST_slave_read_arprotIn);
  init_symbol(&symbols[45u], "slave_read_arvalidIn", SYM_MODULE, &INST_slave_read_arvalidIn);
  init_symbol(&symbols[46u], "slave_read_in", SYM_MODULE, &INST_slave_read_in);
  init_symbol(&symbols[47u],
	      "slave_read_isRst_isInReset",
	      SYM_MODULE,
	      &INST_slave_read_isRst_isInReset);
  init_symbol(&symbols[48u],
	      "slave_read_isRst_isInReset__h80",
	      SYM_DEF,
	      &DEF_slave_read_isRst_isInReset__h80,
	      1u);
  init_symbol(&symbols[49u], "slave_read_out", SYM_MODULE, &INST_slave_read_out);
  init_symbol(&symbols[50u], "slave_read_rdataOut", SYM_MODULE, &INST_slave_read_rdataOut);
  init_symbol(&symbols[51u], "slave_read_rreadyIn", SYM_MODULE, &INST_slave_read_rreadyIn);
  init_symbol(&symbols[52u], "slave_read_rrespOut", SYM_MODULE, &INST_slave_read_rrespOut);
  init_symbol(&symbols[53u], "slave_write_addrIn_rv", SYM_MODULE, &INST_slave_write_addrIn_rv);
  init_symbol(&symbols[54u], "slave_write_awaddrIn", SYM_MODULE, &INST_slave_write_awaddrIn);
  init_symbol(&symbols[55u], "slave_write_awprotIn", SYM_MODULE, &INST_slave_write_awprotIn);
  init_symbol(&symbols[56u], "slave_write_awvalidIn", SYM_MODULE, &INST_slave_write_awvalidIn);
  init_symbol(&symbols[57u], "slave_write_breadyIn", SYM_MODULE, &INST_slave_write_breadyIn);
  init_symbol(&symbols[58u], "slave_write_brespOut", SYM_MODULE, &INST_slave_write_brespOut);
  init_symbol(&symbols[59u], "slave_write_dataIn_rv", SYM_MODULE, &INST_slave_write_dataIn_rv);
  init_symbol(&symbols[60u], "slave_write_in", SYM_MODULE, &INST_slave_write_in);
  init_symbol(&symbols[61u],
	      "slave_write_isRst_isInReset",
	      SYM_MODULE,
	      &INST_slave_write_isRst_isInReset);
  init_symbol(&symbols[62u],
	      "slave_write_isRst_isInReset__h869",
	      SYM_DEF,
	      &DEF_slave_write_isRst_isInReset__h869,
	      1u);
  init_symbol(&symbols[63u], "slave_write_out", SYM_MODULE, &INST_slave_write_out);
  init_symbol(&symbols[64u], "slave_write_wdataIn", SYM_MODULE, &INST_slave_write_wdataIn);
  init_symbol(&symbols[65u], "slave_write_wstrbIn", SYM_MODULE, &INST_slave_write_wstrbIn);
  init_symbol(&symbols[66u], "slave_write_wvalidIn", SYM_MODULE, &INST_slave_write_wvalidIn);
}


/* Rule actions */

void MOD_mkAXIMultiplier::RL_slave_read_isRst_isResetAssertedUpdate()
{
  INST_slave_read_isRst_isInReset.METH_write((tUInt8)0u);
}

void MOD_mkAXIMultiplier::RL_slave_read_addrInWrite()
{
  tUInt64 DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11;
  tUInt32 DEF_x_addr__h501;
  DEF_x_addr__h501 = INST_slave_read_araddrIn.METH_wget();
  DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11 = 34359738367llu & ((((tUInt64)(DEF_x_addr__h501)) << 3u) | (tUInt64)(INST_slave_read_arprotIn.METH_wget()));
  INST_slave_read_in.METH_enq(DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11);
}

void MOD_mkAXIMultiplier::RL_slave_read_deqOut()
{
  INST_slave_read_out.METH_deq();
}

void MOD_mkAXIMultiplier::RL_slave_read_putOutData()
{
  tUInt8 DEF_slave_read_out_first__8_BITS_1_TO_0___d20;
  tUInt64 DEF_new_value__h761;
  DEF_slave_read_out_first____d18 = INST_slave_read_out.METH_first();
  DEF_new_value__h761 = primExtract64(64u, 66u, DEF_slave_read_out_first____d18, 32u, 65u, 32u, 2u);
  DEF_slave_read_out_first__8_BITS_1_TO_0___d20 = DEF_slave_read_out_first____d18.get_bits_in_word8(0u,
												    0u,
												    2u);
  INST_slave_read_rdataOut.METH_wset(DEF_new_value__h761);
  INST_slave_read_rrespOut.METH_wset(DEF_slave_read_out_first__8_BITS_1_TO_0___d20);
}

void MOD_mkAXIMultiplier::RL_slave_write_isRst_isResetAssertedUpdate()
{
  INST_slave_write_isRst_isInReset.METH_write((tUInt8)0u);
}

void MOD_mkAXIMultiplier::RL_slave_write_mergeAddrData()
{
  tUInt64 DEF__0_CONCAT_DONTCARE___d29;
  tUInt32 DEF_x_addr__h1763;
  DEF_slave_write_dataIn_rv_port1__read____d24 = INST_slave_write_dataIn_rv.METH_port1__read();
  DEF_slave_write_addrIn_rv_port1__read____d22 = INST_slave_write_addrIn_rv.METH_port1__read();
  wop_primExtractWide(72u,
		      73u,
		      DEF_slave_write_dataIn_rv_port1__read____d24,
		      32u,
		      71u,
		      32u,
		      0u,
		      DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32);
  DEF_x_addr__h1763 = (tUInt32)(DEF_slave_write_addrIn_rv_port1__read____d22 >> 3u);
  DEF_slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34.set_bits_in_word((tUInt32)(DEF_x_addr__h1763 >> 21u),
										3u,
										0u,
										11u).set_whole_word((((tUInt32)(2097151u & DEF_x_addr__h1763)) << 11u) | primExtract32(11u,
																				       72u,
																				       DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32,
																				       32u,
																				       71u,
																				       32u,
																				       61u),
												    2u).set_whole_word(primExtract32(32u,
																     72u,
																     DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32,
																     32u,
																     60u,
																     32u,
																     29u),
														       1u).set_whole_word((DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32.get_bits_in_word32(0u,
																											  0u,
																											  29u) << 3u) | (tUInt32)((tUInt8)((tUInt8)7u & DEF_slave_write_addrIn_rv_port1__read____d22)),
																	  0u);
  DEF__0_CONCAT_DONTCARE___d30.set_bits_in_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_bits_in_word32(2u,
													0u,
													9u),
						2u,
						0u,
						9u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(1u),
								   1u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(0u),
										      0u);
  DEF__0_CONCAT_DONTCARE___d29 = 11453246122llu;
  INST_slave_write_addrIn_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d29);
  INST_slave_write_dataIn_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d30);
  INST_slave_write_in.METH_enq(DEF_slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34);
}

void MOD_mkAXIMultiplier::RL_slave_write_addrInWrite()
{
  tUInt64 DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44;
  tUInt32 DEF_v_addr__h2094;
  DEF_v_addr__h2094 = INST_slave_write_awaddrIn.METH_wget();
  DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44 = 68719476735llu & (((((tUInt64)((tUInt8)1u)) << 35u) | (((tUInt64)(DEF_v_addr__h2094)) << 3u)) | (tUInt64)(INST_slave_write_awprotIn.METH_wget()));
  INST_slave_write_addrIn_rv.METH_port0__write(DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44);
}

void MOD_mkAXIMultiplier::RL_slave_write_dataInWrite()
{
  tUInt8 DEF_x__h2363;
  tUInt64 DEF_x__h2357;
  DEF_x__h2357 = INST_slave_write_wdataIn.METH_wget();
  DEF_x__h2363 = INST_slave_write_wstrbIn.METH_wget();
  DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53.set_bits_in_word(511u & ((((tUInt32)((tUInt8)1u)) << 8u) | (tUInt32)((tUInt8)(DEF_x__h2357 >> 56u))),
										 2u,
										 0u,
										 9u).set_whole_word((tUInt32)(DEF_x__h2357 >> 24u),
												    1u).set_whole_word((((tUInt32)(16777215u & DEF_x__h2357)) << 8u) | (tUInt32)(DEF_x__h2363),
														       0u);
  INST_slave_write_dataIn_rv.METH_port0__write(DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53);
}

void MOD_mkAXIMultiplier::RL_slave_write_outWrite()
{
  INST_slave_write_out.METH_deq();
}

void MOD_mkAXIMultiplier::RL_slave_write_outForward()
{
  tUInt8 DEF_slave_write_out_first____d60;
  DEF_slave_write_out_first____d60 = INST_slave_write_out.METH_first();
  INST_slave_write_brespOut.METH_wset(DEF_slave_write_out_first____d60);
}

void MOD_mkAXIMultiplier::RL_handleReadRequest()
{
  tUInt8 DEF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_OR_ETC___d70;
  tUInt64 DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d75;
  tUInt8 DEF_x__h2718;
  tUInt64 DEF_x_data__h2887;
  DEF_x_data__h2887 = INST_product.METH_read();
  DEF_x_data__h2857 = INST_operand_2.METH_read();
  DEF_x_data__h2827 = INST_operand_1.METH_read();
  DEF_x__h2718 = (tUInt8)((tUInt8)63u & (INST_slave_read_in.METH_first() >> 3u));
  switch (DEF_x__h2718) {
  case (tUInt8)0u:
    DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d75 = DEF_x_data__h2827;
    break;
  case (tUInt8)8u:
    DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d75 = DEF_x_data__h2857;
    break;
  default:
    DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d75 = DEF_x_data__h2887;
  }
  DEF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_OR_ETC___d70 = DEF_x__h2718 == (tUInt8)0u || (DEF_x__h2718 == (tUInt8)8u || DEF_x__h2718 == (tUInt8)16u);
  DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76.set_bits_in_word((tUInt8)(DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d75 >> 62u),
										2u,
										0u,
										2u).set_whole_word((tUInt32)(DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d75 >> 30u),
												   1u).set_whole_word((((tUInt32)(1073741823u & DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d75)) << 2u) | (tUInt32)((tUInt8)0u),
														      0u);
  INST_slave_read_in.METH_deq();
  if (DEF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_OR_ETC___d70)
    INST_slave_read_out.METH_enq(DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76);
}

void MOD_mkAXIMultiplier::RL_handleWriteRequest()
{
  tUInt8 DEF_slave_write_in_first__0_BITS_80_TO_75_1_EQ_0_2_ETC___d84;
  tUInt8 DEF_slave_write_in_first__0_BITS_80_TO_75_1_EQ_0___d82;
  tUInt8 DEF_slave_write_in_first__0_BITS_80_TO_75_1_EQ_8___d83;
  tUInt8 DEF_x__h2974;
  tUInt64 DEF_x__h3046;
  DEF_slave_write_in_first____d80 = INST_slave_write_in.METH_first();
  DEF_x__h3046 = primExtract64(64u, 107u, DEF_slave_write_in_first____d80, 32u, 74u, 32u, 11u);
  DEF_x__h2974 = DEF_slave_write_in_first____d80.get_bits_in_word8(2u, 11u, 6u);
  DEF_slave_write_in_first__0_BITS_80_TO_75_1_EQ_8___d83 = DEF_x__h2974 == (tUInt8)8u;
  DEF_slave_write_in_first__0_BITS_80_TO_75_1_EQ_0___d82 = DEF_x__h2974 == (tUInt8)0u;
  DEF_slave_write_in_first__0_BITS_80_TO_75_1_EQ_0_2_ETC___d84 = DEF_slave_write_in_first__0_BITS_80_TO_75_1_EQ_0___d82 || DEF_slave_write_in_first__0_BITS_80_TO_75_1_EQ_8___d83;
  INST_slave_write_in.METH_deq();
  if (DEF_slave_write_in_first__0_BITS_80_TO_75_1_EQ_0_2_ETC___d84)
    INST_slave_write_out.METH_enq((tUInt8)0u);
  if (DEF_slave_write_in_first__0_BITS_80_TO_75_1_EQ_0___d82)
    INST_operand_1.METH_write(DEF_x__h3046);
  if (DEF_slave_write_in_first__0_BITS_80_TO_75_1_EQ_8___d83)
    INST_operand_2.METH_write(DEF_x__h3046);
}

void MOD_mkAXIMultiplier::RL_product_operation()
{
  tUInt64 DEF_x__h3107;
  DEF_x_data__h2857 = INST_operand_2.METH_read();
  DEF_x_data__h2827 = INST_operand_1.METH_read();
  wop_mul(WideData(64u, DEF_x_data__h2827),
	  WideData(64u, DEF_x_data__h2857),
	  DEF_operand_1_1_MUL_operand_2_2___d86);
  DEF_x__h3107 = primExtract64(64u, 128u, DEF_operand_1_1_MUL_operand_2_2___d86, 32u, 63u, 32u, 0u);
  INST_product.METH_write(DEF_x__h3107);
}


/* Methods */

tUInt8 MOD_mkAXIMultiplier::METH_slave_read_fab_arready()
{
  DEF_slave_read_isRst_isInReset__h80 = INST_slave_read_isRst_isInReset.METH_read();
  DEF_slave_read_in_notFull____d6 = INST_slave_read_in.METH_notFull();
  DEF_NOT_slave_read_isRst_isInReset___d3 = !DEF_slave_read_isRst_isInReset__h80;
  PORT_S00_AXI_arready = DEF_NOT_slave_read_isRst_isInReset___d3 && DEF_slave_read_in_notFull____d6;
  return PORT_S00_AXI_arready;
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_read_fab_arready()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_arready;
  DEF_CAN_FIRE_slave_read_fab_arready = (tUInt8)1u;
  PORT_RDY_S00_AXI_arready = DEF_CAN_FIRE_slave_read_fab_arready;
  return PORT_RDY_S00_AXI_arready;
}

void MOD_mkAXIMultiplier::METH_slave_read_fab_parvalid(tUInt8 ARG_S00_AXI_arvalid)
{
  if (PORT_RDY_S00_AXI_parvalid)
    INST_slave_read_arvalidIn.METH_wset(ARG_S00_AXI_arvalid);
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_read_fab_parvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_parvalid;
  DEF_CAN_FIRE_slave_read_fab_parvalid = (tUInt8)1u;
  PORT_RDY_S00_AXI_parvalid = DEF_CAN_FIRE_slave_read_fab_parvalid;
  return PORT_RDY_S00_AXI_parvalid;
}

void MOD_mkAXIMultiplier::METH_slave_read_fab_paraddr(tUInt32 ARG_S00_AXI_araddr)
{
  if (PORT_RDY_S00_AXI_paraddr)
    INST_slave_read_araddrIn.METH_wset(ARG_S00_AXI_araddr);
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_read_fab_paraddr()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_paraddr;
  DEF_CAN_FIRE_slave_read_fab_paraddr = (tUInt8)1u;
  PORT_RDY_S00_AXI_paraddr = DEF_CAN_FIRE_slave_read_fab_paraddr;
  return PORT_RDY_S00_AXI_paraddr;
}

void MOD_mkAXIMultiplier::METH_slave_read_fab_parprot(tUInt8 ARG_S00_AXI_arprot)
{
  if (PORT_RDY_S00_AXI_parprot)
    INST_slave_read_arprotIn.METH_wset(ARG_S00_AXI_arprot);
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_read_fab_parprot()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_parprot;
  DEF_CAN_FIRE_slave_read_fab_parprot = (tUInt8)1u;
  PORT_RDY_S00_AXI_parprot = DEF_CAN_FIRE_slave_read_fab_parprot;
  return PORT_RDY_S00_AXI_parprot;
}

tUInt8 MOD_mkAXIMultiplier::METH_slave_read_fab_rvalid()
{
  DEF_slave_read_isRst_isInReset__h80 = INST_slave_read_isRst_isInReset.METH_read();
  DEF_slave_read_out_notEmpty____d15 = INST_slave_read_out.METH_notEmpty();
  DEF_NOT_slave_read_isRst_isInReset___d3 = !DEF_slave_read_isRst_isInReset__h80;
  PORT_S00_AXI_rvalid = DEF_NOT_slave_read_isRst_isInReset___d3 && DEF_slave_read_out_notEmpty____d15;
  return PORT_S00_AXI_rvalid;
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_read_fab_rvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_rvalid;
  DEF_CAN_FIRE_slave_read_fab_rvalid = (tUInt8)1u;
  PORT_RDY_S00_AXI_rvalid = DEF_CAN_FIRE_slave_read_fab_rvalid;
  return PORT_RDY_S00_AXI_rvalid;
}

void MOD_mkAXIMultiplier::METH_slave_read_fab_prready(tUInt8 ARG_S00_AXI_rready)
{
  if (PORT_RDY_S00_AXI_prready)
    INST_slave_read_rreadyIn.METH_wset(ARG_S00_AXI_rready);
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_read_fab_prready()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_prready;
  DEF_CAN_FIRE_slave_read_fab_prready = (tUInt8)1u;
  PORT_RDY_S00_AXI_prready = DEF_CAN_FIRE_slave_read_fab_prready;
  return PORT_RDY_S00_AXI_prready;
}

tUInt64 MOD_mkAXIMultiplier::METH_slave_read_fab_rdata()
{
  tUInt8 DEF_slave_read_rdataOut_whas____d88;
  tUInt64 DEF_x_wget__h630;
  DEF_x_wget__h630 = INST_slave_read_rdataOut.METH_wget();
  DEF_slave_read_rdataOut_whas____d88 = INST_slave_read_rdataOut.METH_whas();
  PORT_S00_AXI_rdata = DEF_slave_read_rdataOut_whas____d88 ? DEF_x_wget__h630 : 0llu;
  return PORT_S00_AXI_rdata;
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_read_fab_rdata()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_rdata;
  DEF_CAN_FIRE_slave_read_fab_rdata = (tUInt8)1u;
  PORT_RDY_S00_AXI_rdata = DEF_CAN_FIRE_slave_read_fab_rdata;
  return PORT_RDY_S00_AXI_rdata;
}

tUInt8 MOD_mkAXIMultiplier::METH_slave_read_fab_rresp()
{
  tUInt8 DEF_slave_read_rrespOut_whas____d90;
  tUInt8 DEF_slave_read_rrespOut_wget____d91;
  DEF_slave_read_rrespOut_wget____d91 = INST_slave_read_rrespOut.METH_wget();
  DEF_slave_read_rrespOut_whas____d90 = INST_slave_read_rrespOut.METH_whas();
  PORT_S00_AXI_rresp = DEF_slave_read_rrespOut_whas____d90 ? DEF_slave_read_rrespOut_wget____d91 : (tUInt8)0u;
  return PORT_S00_AXI_rresp;
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_read_fab_rresp()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_rresp;
  DEF_CAN_FIRE_slave_read_fab_rresp = (tUInt8)1u;
  PORT_RDY_S00_AXI_rresp = DEF_CAN_FIRE_slave_read_fab_rresp;
  return PORT_RDY_S00_AXI_rresp;
}

tUInt8 MOD_mkAXIMultiplier::METH_slave_write_fab_awready()
{
  DEF_slave_write_isRst_isInReset__h869 = INST_slave_write_isRst_isInReset.METH_read();
  DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_35_6___d37 = !((tUInt8)(INST_slave_write_addrIn_rv.METH_port0__read() >> 35u));
  DEF_NOT_slave_write_isRst_isInReset_1___d38 = !DEF_slave_write_isRst_isInReset__h869;
  PORT_S00_AXI_awready = DEF_NOT_slave_write_isRst_isInReset_1___d38 && DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_35_6___d37;
  return PORT_S00_AXI_awready;
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_write_fab_awready()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_awready;
  DEF_CAN_FIRE_slave_write_fab_awready = (tUInt8)1u;
  PORT_RDY_S00_AXI_awready = DEF_CAN_FIRE_slave_write_fab_awready;
  return PORT_RDY_S00_AXI_awready;
}

void MOD_mkAXIMultiplier::METH_slave_write_fab_pawvalid(tUInt8 ARG_S00_AXI_awvalid)
{
  if (PORT_RDY_S00_AXI_pawvalid)
    INST_slave_write_awvalidIn.METH_wset(ARG_S00_AXI_awvalid);
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_write_fab_pawvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pawvalid;
  DEF_CAN_FIRE_slave_write_fab_pawvalid = (tUInt8)1u;
  PORT_RDY_S00_AXI_pawvalid = DEF_CAN_FIRE_slave_write_fab_pawvalid;
  return PORT_RDY_S00_AXI_pawvalid;
}

void MOD_mkAXIMultiplier::METH_slave_write_fab_pawaddr(tUInt32 ARG_S00_AXI_awaddr)
{
  if (PORT_RDY_S00_AXI_pawaddr)
    INST_slave_write_awaddrIn.METH_wset(ARG_S00_AXI_awaddr);
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_write_fab_pawaddr()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pawaddr;
  DEF_CAN_FIRE_slave_write_fab_pawaddr = (tUInt8)1u;
  PORT_RDY_S00_AXI_pawaddr = DEF_CAN_FIRE_slave_write_fab_pawaddr;
  return PORT_RDY_S00_AXI_pawaddr;
}

void MOD_mkAXIMultiplier::METH_slave_write_fab_pawprot(tUInt8 ARG_S00_AXI_awprot)
{
  if (PORT_RDY_S00_AXI_pawprot)
    INST_slave_write_awprotIn.METH_wset(ARG_S00_AXI_awprot);
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_write_fab_pawprot()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pawprot;
  DEF_CAN_FIRE_slave_write_fab_pawprot = (tUInt8)1u;
  PORT_RDY_S00_AXI_pawprot = DEF_CAN_FIRE_slave_write_fab_pawprot;
  return PORT_RDY_S00_AXI_pawprot;
}

tUInt8 MOD_mkAXIMultiplier::METH_slave_write_fab_wready()
{
  DEF_slave_write_isRst_isInReset__h869 = INST_slave_write_isRst_isInReset.METH_read();
  DEF_slave_write_dataIn_rv_port0__read____d45 = INST_slave_write_dataIn_rv.METH_port0__read();
  DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47 = !DEF_slave_write_dataIn_rv_port0__read____d45.get_bits_in_word8(2u,
																8u,
																1u);
  DEF_NOT_slave_write_isRst_isInReset_1___d38 = !DEF_slave_write_isRst_isInReset__h869;
  PORT_S00_AXI_wready = DEF_NOT_slave_write_isRst_isInReset_1___d38 && DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47;
  return PORT_S00_AXI_wready;
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_write_fab_wready()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_wready;
  DEF_CAN_FIRE_slave_write_fab_wready = (tUInt8)1u;
  PORT_RDY_S00_AXI_wready = DEF_CAN_FIRE_slave_write_fab_wready;
  return PORT_RDY_S00_AXI_wready;
}

void MOD_mkAXIMultiplier::METH_slave_write_fab_pwvalid(tUInt8 ARG_S00_AXI_wvalid)
{
  if (PORT_RDY_S00_AXI_pwvalid)
    INST_slave_write_wvalidIn.METH_wset(ARG_S00_AXI_wvalid);
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_write_fab_pwvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pwvalid;
  DEF_CAN_FIRE_slave_write_fab_pwvalid = (tUInt8)1u;
  PORT_RDY_S00_AXI_pwvalid = DEF_CAN_FIRE_slave_write_fab_pwvalid;
  return PORT_RDY_S00_AXI_pwvalid;
}

void MOD_mkAXIMultiplier::METH_slave_write_fab_pwdata(tUInt64 ARG_S00_AXI_wdata)
{
  if (PORT_RDY_S00_AXI_pwdata)
    INST_slave_write_wdataIn.METH_wset(ARG_S00_AXI_wdata);
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_write_fab_pwdata()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pwdata;
  DEF_CAN_FIRE_slave_write_fab_pwdata = (tUInt8)1u;
  PORT_RDY_S00_AXI_pwdata = DEF_CAN_FIRE_slave_write_fab_pwdata;
  return PORT_RDY_S00_AXI_pwdata;
}

void MOD_mkAXIMultiplier::METH_slave_write_fab_pwstrb(tUInt8 ARG_S00_AXI_wstrb)
{
  if (PORT_RDY_S00_AXI_pwstrb)
    INST_slave_write_wstrbIn.METH_wset(ARG_S00_AXI_wstrb);
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_write_fab_pwstrb()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pwstrb;
  DEF_CAN_FIRE_slave_write_fab_pwstrb = (tUInt8)1u;
  PORT_RDY_S00_AXI_pwstrb = DEF_CAN_FIRE_slave_write_fab_pwstrb;
  return PORT_RDY_S00_AXI_pwstrb;
}

tUInt8 MOD_mkAXIMultiplier::METH_slave_write_fab_bvalid()
{
  DEF_slave_write_isRst_isInReset__h869 = INST_slave_write_isRst_isInReset.METH_read();
  DEF_slave_write_out_notEmpty____d57 = INST_slave_write_out.METH_notEmpty();
  DEF_NOT_slave_write_isRst_isInReset_1___d38 = !DEF_slave_write_isRst_isInReset__h869;
  PORT_S00_AXI_bvalid = DEF_NOT_slave_write_isRst_isInReset_1___d38 && DEF_slave_write_out_notEmpty____d57;
  return PORT_S00_AXI_bvalid;
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_write_fab_bvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_bvalid;
  DEF_CAN_FIRE_slave_write_fab_bvalid = (tUInt8)1u;
  PORT_RDY_S00_AXI_bvalid = DEF_CAN_FIRE_slave_write_fab_bvalid;
  return PORT_RDY_S00_AXI_bvalid;
}

void MOD_mkAXIMultiplier::METH_slave_write_fab_pbready(tUInt8 ARG_S00_AXI_bready)
{
  if (PORT_RDY_S00_AXI_pbready)
    INST_slave_write_breadyIn.METH_wset(ARG_S00_AXI_bready);
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_write_fab_pbready()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pbready;
  DEF_CAN_FIRE_slave_write_fab_pbready = (tUInt8)1u;
  PORT_RDY_S00_AXI_pbready = DEF_CAN_FIRE_slave_write_fab_pbready;
  return PORT_RDY_S00_AXI_pbready;
}

tUInt8 MOD_mkAXIMultiplier::METH_slave_write_fab_bresp()
{
  tUInt8 DEF_slave_write_brespOut_whas____d92;
  tUInt8 DEF_slave_write_brespOut_wget____d93;
  DEF_slave_write_brespOut_wget____d93 = INST_slave_write_brespOut.METH_wget();
  DEF_slave_write_brespOut_whas____d92 = INST_slave_write_brespOut.METH_whas();
  PORT_S00_AXI_bresp = DEF_slave_write_brespOut_whas____d92 ? DEF_slave_write_brespOut_wget____d93 : (tUInt8)0u;
  return PORT_S00_AXI_bresp;
}

tUInt8 MOD_mkAXIMultiplier::METH_RDY_slave_write_fab_bresp()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_bresp;
  DEF_CAN_FIRE_slave_write_fab_bresp = (tUInt8)1u;
  PORT_RDY_S00_AXI_bresp = DEF_CAN_FIRE_slave_write_fab_bresp;
  return PORT_RDY_S00_AXI_bresp;
}


/* Reset routines */

void MOD_mkAXIMultiplier::reset_aresetn(tUInt8 ARG_rst_in)
{
  PORT_aresetn = ARG_rst_in;
  INST_slave_write_out.reset_RST(ARG_rst_in);
  INST_slave_write_isRst_isInReset.reset_RST(ARG_rst_in);
  INST_slave_write_in.reset_RST(ARG_rst_in);
  INST_slave_write_dataIn_rv.reset_RST(ARG_rst_in);
  INST_slave_write_addrIn_rv.reset_RST(ARG_rst_in);
  INST_slave_read_out.reset_RST(ARG_rst_in);
  INST_slave_read_isRst_isInReset.reset_RST(ARG_rst_in);
  INST_slave_read_in.reset_RST(ARG_rst_in);
  INST_product.reset_RST(ARG_rst_in);
  INST_operand_2.reset_RST(ARG_rst_in);
  INST_operand_1.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkAXIMultiplier::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkAXIMultiplier::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_operand_1.dump_state(indent + 2u);
  INST_operand_2.dump_state(indent + 2u);
  INST_product.dump_state(indent + 2u);
  INST_slave_read_araddrIn.dump_state(indent + 2u);
  INST_slave_read_arprotIn.dump_state(indent + 2u);
  INST_slave_read_arvalidIn.dump_state(indent + 2u);
  INST_slave_read_in.dump_state(indent + 2u);
  INST_slave_read_isRst_isInReset.dump_state(indent + 2u);
  INST_slave_read_out.dump_state(indent + 2u);
  INST_slave_read_rdataOut.dump_state(indent + 2u);
  INST_slave_read_rreadyIn.dump_state(indent + 2u);
  INST_slave_read_rrespOut.dump_state(indent + 2u);
  INST_slave_write_addrIn_rv.dump_state(indent + 2u);
  INST_slave_write_awaddrIn.dump_state(indent + 2u);
  INST_slave_write_awprotIn.dump_state(indent + 2u);
  INST_slave_write_awvalidIn.dump_state(indent + 2u);
  INST_slave_write_breadyIn.dump_state(indent + 2u);
  INST_slave_write_brespOut.dump_state(indent + 2u);
  INST_slave_write_dataIn_rv.dump_state(indent + 2u);
  INST_slave_write_in.dump_state(indent + 2u);
  INST_slave_write_isRst_isInReset.dump_state(indent + 2u);
  INST_slave_write_out.dump_state(indent + 2u);
  INST_slave_write_wdataIn.dump_state(indent + 2u);
  INST_slave_write_wstrbIn.dump_state(indent + 2u);
  INST_slave_write_wvalidIn.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkAXIMultiplier::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 75u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "aclk", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_slave_read_isRst_isInReset___d3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_slave_write_addrIn_rv_port0__read__5_BIT_35_6___d37", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_slave_write_isRst_isInReset_1___d38", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_DONTCARE___d30", 73u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53", 73u);
  vcd_write_def(sim_hdl, num++, "aresetn", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "operand_1_1_MUL_operand_2_2___d86", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_read_in_notFull____d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_read_isRst_isInReset__h80", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_read_out_first____d18", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_read_out_notEmpty____d15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34", 107u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_addrIn_rv_port1__read____d22", 36u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_dataIn_rv_port0__read____d45", 73u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_dataIn_rv_port1__read____d24", 73u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_in_first____d80", 107u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_isRst_isInReset__h869", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_out_notEmpty____d57", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_data__h2827", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_data__h2857", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_arready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_awready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_bresp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_bvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_paraddr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_parprot", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_parvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pawaddr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pawprot", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pawvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pbready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_prready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pwdata", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pwstrb", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pwvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_rdata", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_rresp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_rvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_wready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_arready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_awready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_bresp", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_bvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_rdata", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_rresp", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_rvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_wready", 1u);
  num = INST_operand_1.dump_VCD_defs(num);
  num = INST_operand_2.dump_VCD_defs(num);
  num = INST_product.dump_VCD_defs(num);
  num = INST_slave_read_araddrIn.dump_VCD_defs(num);
  num = INST_slave_read_arprotIn.dump_VCD_defs(num);
  num = INST_slave_read_arvalidIn.dump_VCD_defs(num);
  num = INST_slave_read_in.dump_VCD_defs(num);
  num = INST_slave_read_isRst_isInReset.dump_VCD_defs(num);
  num = INST_slave_read_out.dump_VCD_defs(num);
  num = INST_slave_read_rdataOut.dump_VCD_defs(num);
  num = INST_slave_read_rreadyIn.dump_VCD_defs(num);
  num = INST_slave_read_rrespOut.dump_VCD_defs(num);
  num = INST_slave_write_addrIn_rv.dump_VCD_defs(num);
  num = INST_slave_write_awaddrIn.dump_VCD_defs(num);
  num = INST_slave_write_awprotIn.dump_VCD_defs(num);
  num = INST_slave_write_awvalidIn.dump_VCD_defs(num);
  num = INST_slave_write_breadyIn.dump_VCD_defs(num);
  num = INST_slave_write_brespOut.dump_VCD_defs(num);
  num = INST_slave_write_dataIn_rv.dump_VCD_defs(num);
  num = INST_slave_write_in.dump_VCD_defs(num);
  num = INST_slave_write_isRst_isInReset.dump_VCD_defs(num);
  num = INST_slave_write_out.dump_VCD_defs(num);
  num = INST_slave_write_wdataIn.dump_VCD_defs(num);
  num = INST_slave_write_wstrbIn.dump_VCD_defs(num);
  num = INST_slave_write_wvalidIn.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkAXIMultiplier::dump_VCD(tVCDDumpType dt,
				   unsigned int levels,
				   MOD_mkAXIMultiplier &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkAXIMultiplier::vcd_defs(tVCDDumpType dt, MOD_mkAXIMultiplier &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 73u);
    vcd_write_x(sim_hdl, num++, 73u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 107u);
    vcd_write_x(sim_hdl, num++, 36u);
    vcd_write_x(sim_hdl, num++, 73u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 73u);
    vcd_write_x(sim_hdl, num++, 107u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76) != DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76, 66u);
	backing.DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76 = DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76;
      }
      ++num;
      if ((backing.DEF_NOT_slave_read_isRst_isInReset___d3) != DEF_NOT_slave_read_isRst_isInReset___d3)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_slave_read_isRst_isInReset___d3, 1u);
	backing.DEF_NOT_slave_read_isRst_isInReset___d3 = DEF_NOT_slave_read_isRst_isInReset___d3;
      }
      ++num;
      if ((backing.DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_35_6___d37) != DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_35_6___d37)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_35_6___d37, 1u);
	backing.DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_35_6___d37 = DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_35_6___d37;
      }
      ++num;
      if ((backing.DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47) != DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47, 1u);
	backing.DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47 = DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47;
      }
      ++num;
      if ((backing.DEF_NOT_slave_write_isRst_isInReset_1___d38) != DEF_NOT_slave_write_isRst_isInReset_1___d38)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_slave_write_isRst_isInReset_1___d38, 1u);
	backing.DEF_NOT_slave_write_isRst_isInReset_1___d38 = DEF_NOT_slave_write_isRst_isInReset_1___d38;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_DONTCARE___d30) != DEF__0_CONCAT_DONTCARE___d30)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_DONTCARE___d30, 73u);
	backing.DEF__0_CONCAT_DONTCARE___d30 = DEF__0_CONCAT_DONTCARE___d30;
      }
      ++num;
      if ((backing.DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53) != DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53)
      {
	vcd_write_val(sim_hdl, num, DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53, 73u);
	backing.DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53 = DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53;
      }
      ++num;
      if ((backing.PORT_aresetn) != PORT_aresetn)
      {
	vcd_write_val(sim_hdl, num, PORT_aresetn, 1u);
	backing.PORT_aresetn = PORT_aresetn;
      }
      ++num;
      if ((backing.DEF_operand_1_1_MUL_operand_2_2___d86) != DEF_operand_1_1_MUL_operand_2_2___d86)
      {
	vcd_write_val(sim_hdl, num, DEF_operand_1_1_MUL_operand_2_2___d86, 128u);
	backing.DEF_operand_1_1_MUL_operand_2_2___d86 = DEF_operand_1_1_MUL_operand_2_2___d86;
      }
      ++num;
      if ((backing.DEF_slave_read_in_notFull____d6) != DEF_slave_read_in_notFull____d6)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_read_in_notFull____d6, 1u);
	backing.DEF_slave_read_in_notFull____d6 = DEF_slave_read_in_notFull____d6;
      }
      ++num;
      if ((backing.DEF_slave_read_isRst_isInReset__h80) != DEF_slave_read_isRst_isInReset__h80)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_read_isRst_isInReset__h80, 1u);
	backing.DEF_slave_read_isRst_isInReset__h80 = DEF_slave_read_isRst_isInReset__h80;
      }
      ++num;
      if ((backing.DEF_slave_read_out_first____d18) != DEF_slave_read_out_first____d18)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_read_out_first____d18, 66u);
	backing.DEF_slave_read_out_first____d18 = DEF_slave_read_out_first____d18;
      }
      ++num;
      if ((backing.DEF_slave_read_out_notEmpty____d15) != DEF_slave_read_out_notEmpty____d15)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_read_out_notEmpty____d15, 1u);
	backing.DEF_slave_read_out_notEmpty____d15 = DEF_slave_read_out_notEmpty____d15;
      }
      ++num;
      if ((backing.DEF_slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34) != DEF_slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34, 107u);
	backing.DEF_slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34 = DEF_slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34;
      }
      ++num;
      if ((backing.DEF_slave_write_addrIn_rv_port1__read____d22) != DEF_slave_write_addrIn_rv_port1__read____d22)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_addrIn_rv_port1__read____d22, 36u);
	backing.DEF_slave_write_addrIn_rv_port1__read____d22 = DEF_slave_write_addrIn_rv_port1__read____d22;
      }
      ++num;
      if ((backing.DEF_slave_write_dataIn_rv_port0__read____d45) != DEF_slave_write_dataIn_rv_port0__read____d45)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_dataIn_rv_port0__read____d45, 73u);
	backing.DEF_slave_write_dataIn_rv_port0__read____d45 = DEF_slave_write_dataIn_rv_port0__read____d45;
      }
      ++num;
      if ((backing.DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32) != DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32, 72u);
	backing.DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32 = DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32;
      }
      ++num;
      if ((backing.DEF_slave_write_dataIn_rv_port1__read____d24) != DEF_slave_write_dataIn_rv_port1__read____d24)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_dataIn_rv_port1__read____d24, 73u);
	backing.DEF_slave_write_dataIn_rv_port1__read____d24 = DEF_slave_write_dataIn_rv_port1__read____d24;
      }
      ++num;
      if ((backing.DEF_slave_write_in_first____d80) != DEF_slave_write_in_first____d80)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_in_first____d80, 107u);
	backing.DEF_slave_write_in_first____d80 = DEF_slave_write_in_first____d80;
      }
      ++num;
      if ((backing.DEF_slave_write_isRst_isInReset__h869) != DEF_slave_write_isRst_isInReset__h869)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_isRst_isInReset__h869, 1u);
	backing.DEF_slave_write_isRst_isInReset__h869 = DEF_slave_write_isRst_isInReset__h869;
      }
      ++num;
      if ((backing.DEF_slave_write_out_notEmpty____d57) != DEF_slave_write_out_notEmpty____d57)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_out_notEmpty____d57, 1u);
	backing.DEF_slave_write_out_notEmpty____d57 = DEF_slave_write_out_notEmpty____d57;
      }
      ++num;
      if ((backing.DEF_x_data__h2827) != DEF_x_data__h2827)
      {
	vcd_write_val(sim_hdl, num, DEF_x_data__h2827, 64u);
	backing.DEF_x_data__h2827 = DEF_x_data__h2827;
      }
      ++num;
      if ((backing.DEF_x_data__h2857) != DEF_x_data__h2857)
      {
	vcd_write_val(sim_hdl, num, DEF_x_data__h2857, 64u);
	backing.DEF_x_data__h2857 = DEF_x_data__h2857;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_arready) != PORT_RDY_S00_AXI_arready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_arready, 1u);
	backing.PORT_RDY_S00_AXI_arready = PORT_RDY_S00_AXI_arready;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_awready) != PORT_RDY_S00_AXI_awready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_awready, 1u);
	backing.PORT_RDY_S00_AXI_awready = PORT_RDY_S00_AXI_awready;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_bresp) != PORT_RDY_S00_AXI_bresp)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_bresp, 1u);
	backing.PORT_RDY_S00_AXI_bresp = PORT_RDY_S00_AXI_bresp;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_bvalid) != PORT_RDY_S00_AXI_bvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_bvalid, 1u);
	backing.PORT_RDY_S00_AXI_bvalid = PORT_RDY_S00_AXI_bvalid;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_paraddr) != PORT_RDY_S00_AXI_paraddr)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_paraddr, 1u);
	backing.PORT_RDY_S00_AXI_paraddr = PORT_RDY_S00_AXI_paraddr;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_parprot) != PORT_RDY_S00_AXI_parprot)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_parprot, 1u);
	backing.PORT_RDY_S00_AXI_parprot = PORT_RDY_S00_AXI_parprot;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_parvalid) != PORT_RDY_S00_AXI_parvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_parvalid, 1u);
	backing.PORT_RDY_S00_AXI_parvalid = PORT_RDY_S00_AXI_parvalid;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pawaddr) != PORT_RDY_S00_AXI_pawaddr)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pawaddr, 1u);
	backing.PORT_RDY_S00_AXI_pawaddr = PORT_RDY_S00_AXI_pawaddr;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pawprot) != PORT_RDY_S00_AXI_pawprot)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pawprot, 1u);
	backing.PORT_RDY_S00_AXI_pawprot = PORT_RDY_S00_AXI_pawprot;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pawvalid) != PORT_RDY_S00_AXI_pawvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pawvalid, 1u);
	backing.PORT_RDY_S00_AXI_pawvalid = PORT_RDY_S00_AXI_pawvalid;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pbready) != PORT_RDY_S00_AXI_pbready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pbready, 1u);
	backing.PORT_RDY_S00_AXI_pbready = PORT_RDY_S00_AXI_pbready;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_prready) != PORT_RDY_S00_AXI_prready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_prready, 1u);
	backing.PORT_RDY_S00_AXI_prready = PORT_RDY_S00_AXI_prready;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pwdata) != PORT_RDY_S00_AXI_pwdata)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pwdata, 1u);
	backing.PORT_RDY_S00_AXI_pwdata = PORT_RDY_S00_AXI_pwdata;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pwstrb) != PORT_RDY_S00_AXI_pwstrb)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pwstrb, 1u);
	backing.PORT_RDY_S00_AXI_pwstrb = PORT_RDY_S00_AXI_pwstrb;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pwvalid) != PORT_RDY_S00_AXI_pwvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pwvalid, 1u);
	backing.PORT_RDY_S00_AXI_pwvalid = PORT_RDY_S00_AXI_pwvalid;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_rdata) != PORT_RDY_S00_AXI_rdata)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_rdata, 1u);
	backing.PORT_RDY_S00_AXI_rdata = PORT_RDY_S00_AXI_rdata;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_rresp) != PORT_RDY_S00_AXI_rresp)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_rresp, 1u);
	backing.PORT_RDY_S00_AXI_rresp = PORT_RDY_S00_AXI_rresp;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_rvalid) != PORT_RDY_S00_AXI_rvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_rvalid, 1u);
	backing.PORT_RDY_S00_AXI_rvalid = PORT_RDY_S00_AXI_rvalid;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_wready) != PORT_RDY_S00_AXI_wready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_wready, 1u);
	backing.PORT_RDY_S00_AXI_wready = PORT_RDY_S00_AXI_wready;
      }
      ++num;
      if ((backing.PORT_S00_AXI_arready) != PORT_S00_AXI_arready)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_arready, 1u);
	backing.PORT_S00_AXI_arready = PORT_S00_AXI_arready;
      }
      ++num;
      if ((backing.PORT_S00_AXI_awready) != PORT_S00_AXI_awready)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_awready, 1u);
	backing.PORT_S00_AXI_awready = PORT_S00_AXI_awready;
      }
      ++num;
      if ((backing.PORT_S00_AXI_bresp) != PORT_S00_AXI_bresp)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_bresp, 2u);
	backing.PORT_S00_AXI_bresp = PORT_S00_AXI_bresp;
      }
      ++num;
      if ((backing.PORT_S00_AXI_bvalid) != PORT_S00_AXI_bvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_bvalid, 1u);
	backing.PORT_S00_AXI_bvalid = PORT_S00_AXI_bvalid;
      }
      ++num;
      if ((backing.PORT_S00_AXI_rdata) != PORT_S00_AXI_rdata)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_rdata, 64u);
	backing.PORT_S00_AXI_rdata = PORT_S00_AXI_rdata;
      }
      ++num;
      if ((backing.PORT_S00_AXI_rresp) != PORT_S00_AXI_rresp)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_rresp, 2u);
	backing.PORT_S00_AXI_rresp = PORT_S00_AXI_rresp;
      }
      ++num;
      if ((backing.PORT_S00_AXI_rvalid) != PORT_S00_AXI_rvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_rvalid, 1u);
	backing.PORT_S00_AXI_rvalid = PORT_S00_AXI_rvalid;
      }
      ++num;
      if ((backing.PORT_S00_AXI_wready) != PORT_S00_AXI_wready)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_wready, 1u);
	backing.PORT_S00_AXI_wready = PORT_S00_AXI_wready;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76, 66u);
      backing.DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76 = DEF_IF_slave_read_in_first__4_BITS_8_TO_3_5_EQ_0_6_ETC___d76;
      vcd_write_val(sim_hdl, num++, DEF_NOT_slave_read_isRst_isInReset___d3, 1u);
      backing.DEF_NOT_slave_read_isRst_isInReset___d3 = DEF_NOT_slave_read_isRst_isInReset___d3;
      vcd_write_val(sim_hdl, num++, DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_35_6___d37, 1u);
      backing.DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_35_6___d37 = DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_35_6___d37;
      vcd_write_val(sim_hdl, num++, DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47, 1u);
      backing.DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47 = DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47;
      vcd_write_val(sim_hdl, num++, DEF_NOT_slave_write_isRst_isInReset_1___d38, 1u);
      backing.DEF_NOT_slave_write_isRst_isInReset_1___d38 = DEF_NOT_slave_write_isRst_isInReset_1___d38;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_DONTCARE___d30, 73u);
      backing.DEF__0_CONCAT_DONTCARE___d30 = DEF__0_CONCAT_DONTCARE___d30;
      vcd_write_val(sim_hdl, num++, DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53, 73u);
      backing.DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53 = DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53;
      vcd_write_val(sim_hdl, num++, PORT_aresetn, 1u);
      backing.PORT_aresetn = PORT_aresetn;
      vcd_write_val(sim_hdl, num++, DEF_operand_1_1_MUL_operand_2_2___d86, 128u);
      backing.DEF_operand_1_1_MUL_operand_2_2___d86 = DEF_operand_1_1_MUL_operand_2_2___d86;
      vcd_write_val(sim_hdl, num++, DEF_slave_read_in_notFull____d6, 1u);
      backing.DEF_slave_read_in_notFull____d6 = DEF_slave_read_in_notFull____d6;
      vcd_write_val(sim_hdl, num++, DEF_slave_read_isRst_isInReset__h80, 1u);
      backing.DEF_slave_read_isRst_isInReset__h80 = DEF_slave_read_isRst_isInReset__h80;
      vcd_write_val(sim_hdl, num++, DEF_slave_read_out_first____d18, 66u);
      backing.DEF_slave_read_out_first____d18 = DEF_slave_read_out_first____d18;
      vcd_write_val(sim_hdl, num++, DEF_slave_read_out_notEmpty____d15, 1u);
      backing.DEF_slave_read_out_notEmpty____d15 = DEF_slave_read_out_notEmpty____d15;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34, 107u);
      backing.DEF_slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34 = DEF_slave_write_addrIn_rv_port1__read__2_BITS_34_T_ETC___d34;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_addrIn_rv_port1__read____d22, 36u);
      backing.DEF_slave_write_addrIn_rv_port1__read____d22 = DEF_slave_write_addrIn_rv_port1__read____d22;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_dataIn_rv_port0__read____d45, 73u);
      backing.DEF_slave_write_dataIn_rv_port0__read____d45 = DEF_slave_write_dataIn_rv_port0__read____d45;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32, 72u);
      backing.DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32 = DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_dataIn_rv_port1__read____d24, 73u);
      backing.DEF_slave_write_dataIn_rv_port1__read____d24 = DEF_slave_write_dataIn_rv_port1__read____d24;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_in_first____d80, 107u);
      backing.DEF_slave_write_in_first____d80 = DEF_slave_write_in_first____d80;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_isRst_isInReset__h869, 1u);
      backing.DEF_slave_write_isRst_isInReset__h869 = DEF_slave_write_isRst_isInReset__h869;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_out_notEmpty____d57, 1u);
      backing.DEF_slave_write_out_notEmpty____d57 = DEF_slave_write_out_notEmpty____d57;
      vcd_write_val(sim_hdl, num++, DEF_x_data__h2827, 64u);
      backing.DEF_x_data__h2827 = DEF_x_data__h2827;
      vcd_write_val(sim_hdl, num++, DEF_x_data__h2857, 64u);
      backing.DEF_x_data__h2857 = DEF_x_data__h2857;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_arready, 1u);
      backing.PORT_RDY_S00_AXI_arready = PORT_RDY_S00_AXI_arready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_awready, 1u);
      backing.PORT_RDY_S00_AXI_awready = PORT_RDY_S00_AXI_awready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_bresp, 1u);
      backing.PORT_RDY_S00_AXI_bresp = PORT_RDY_S00_AXI_bresp;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_bvalid, 1u);
      backing.PORT_RDY_S00_AXI_bvalid = PORT_RDY_S00_AXI_bvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_paraddr, 1u);
      backing.PORT_RDY_S00_AXI_paraddr = PORT_RDY_S00_AXI_paraddr;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_parprot, 1u);
      backing.PORT_RDY_S00_AXI_parprot = PORT_RDY_S00_AXI_parprot;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_parvalid, 1u);
      backing.PORT_RDY_S00_AXI_parvalid = PORT_RDY_S00_AXI_parvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pawaddr, 1u);
      backing.PORT_RDY_S00_AXI_pawaddr = PORT_RDY_S00_AXI_pawaddr;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pawprot, 1u);
      backing.PORT_RDY_S00_AXI_pawprot = PORT_RDY_S00_AXI_pawprot;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pawvalid, 1u);
      backing.PORT_RDY_S00_AXI_pawvalid = PORT_RDY_S00_AXI_pawvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pbready, 1u);
      backing.PORT_RDY_S00_AXI_pbready = PORT_RDY_S00_AXI_pbready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_prready, 1u);
      backing.PORT_RDY_S00_AXI_prready = PORT_RDY_S00_AXI_prready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pwdata, 1u);
      backing.PORT_RDY_S00_AXI_pwdata = PORT_RDY_S00_AXI_pwdata;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pwstrb, 1u);
      backing.PORT_RDY_S00_AXI_pwstrb = PORT_RDY_S00_AXI_pwstrb;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pwvalid, 1u);
      backing.PORT_RDY_S00_AXI_pwvalid = PORT_RDY_S00_AXI_pwvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_rdata, 1u);
      backing.PORT_RDY_S00_AXI_rdata = PORT_RDY_S00_AXI_rdata;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_rresp, 1u);
      backing.PORT_RDY_S00_AXI_rresp = PORT_RDY_S00_AXI_rresp;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_rvalid, 1u);
      backing.PORT_RDY_S00_AXI_rvalid = PORT_RDY_S00_AXI_rvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_wready, 1u);
      backing.PORT_RDY_S00_AXI_wready = PORT_RDY_S00_AXI_wready;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_arready, 1u);
      backing.PORT_S00_AXI_arready = PORT_S00_AXI_arready;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_awready, 1u);
      backing.PORT_S00_AXI_awready = PORT_S00_AXI_awready;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_bresp, 2u);
      backing.PORT_S00_AXI_bresp = PORT_S00_AXI_bresp;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_bvalid, 1u);
      backing.PORT_S00_AXI_bvalid = PORT_S00_AXI_bvalid;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_rdata, 64u);
      backing.PORT_S00_AXI_rdata = PORT_S00_AXI_rdata;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_rresp, 2u);
      backing.PORT_S00_AXI_rresp = PORT_S00_AXI_rresp;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_rvalid, 1u);
      backing.PORT_S00_AXI_rvalid = PORT_S00_AXI_rvalid;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_wready, 1u);
      backing.PORT_S00_AXI_wready = PORT_S00_AXI_wready;
    }
}

void MOD_mkAXIMultiplier::vcd_prims(tVCDDumpType dt, MOD_mkAXIMultiplier &backing)
{
  INST_operand_1.dump_VCD(dt, backing.INST_operand_1);
  INST_operand_2.dump_VCD(dt, backing.INST_operand_2);
  INST_product.dump_VCD(dt, backing.INST_product);
  INST_slave_read_araddrIn.dump_VCD(dt, backing.INST_slave_read_araddrIn);
  INST_slave_read_arprotIn.dump_VCD(dt, backing.INST_slave_read_arprotIn);
  INST_slave_read_arvalidIn.dump_VCD(dt, backing.INST_slave_read_arvalidIn);
  INST_slave_read_in.dump_VCD(dt, backing.INST_slave_read_in);
  INST_slave_read_isRst_isInReset.dump_VCD(dt, backing.INST_slave_read_isRst_isInReset);
  INST_slave_read_out.dump_VCD(dt, backing.INST_slave_read_out);
  INST_slave_read_rdataOut.dump_VCD(dt, backing.INST_slave_read_rdataOut);
  INST_slave_read_rreadyIn.dump_VCD(dt, backing.INST_slave_read_rreadyIn);
  INST_slave_read_rrespOut.dump_VCD(dt, backing.INST_slave_read_rrespOut);
  INST_slave_write_addrIn_rv.dump_VCD(dt, backing.INST_slave_write_addrIn_rv);
  INST_slave_write_awaddrIn.dump_VCD(dt, backing.INST_slave_write_awaddrIn);
  INST_slave_write_awprotIn.dump_VCD(dt, backing.INST_slave_write_awprotIn);
  INST_slave_write_awvalidIn.dump_VCD(dt, backing.INST_slave_write_awvalidIn);
  INST_slave_write_breadyIn.dump_VCD(dt, backing.INST_slave_write_breadyIn);
  INST_slave_write_brespOut.dump_VCD(dt, backing.INST_slave_write_brespOut);
  INST_slave_write_dataIn_rv.dump_VCD(dt, backing.INST_slave_write_dataIn_rv);
  INST_slave_write_in.dump_VCD(dt, backing.INST_slave_write_in);
  INST_slave_write_isRst_isInReset.dump_VCD(dt, backing.INST_slave_write_isRst_isInReset);
  INST_slave_write_out.dump_VCD(dt, backing.INST_slave_write_out);
  INST_slave_write_wdataIn.dump_VCD(dt, backing.INST_slave_write_wdataIn);
  INST_slave_write_wstrbIn.dump_VCD(dt, backing.INST_slave_write_wstrbIn);
  INST_slave_write_wvalidIn.dump_VCD(dt, backing.INST_slave_write_wvalidIn);
}
