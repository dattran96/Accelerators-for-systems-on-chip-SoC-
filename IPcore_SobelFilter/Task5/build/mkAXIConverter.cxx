/*
 * Generated by Bluespec Compiler (build e76ca21)
 * 
 * On Tue Feb 16 00:40:24 CET 2021
 * 
 */
#include "bluesim_primitives.h"
#include "mkAXIConverter.h"


/* Literal declarations */
static unsigned int const UWide_literal_73_haaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
									 2863311530u,
									 170u };
static tUWide const UWide_literal_73_haaaaaaaaaaaaaaaaaa(73u,
							 UWide_literal_73_haaaaaaaaaaaaaaaaaa_arr);
static unsigned int const UWide_literal_68_h2aaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
									2863311530u,
									2u };
static tUWide const UWide_literal_68_h2aaaaaaaaaaaaaaaa(68u,
							UWide_literal_68_h2aaaaaaaaaaaaaaaa_arr);


/* Constructor */
MOD_mkAXIConverter::MOD_mkAXIConverter(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_address_image_1(simHdl, "address_image_1", this, 64u, 0llu, (tUInt8)0u),
    INST_address_image_2(simHdl, "address_image_2", this, 64u, 0llu, (tUInt8)0u),
    INST_buffer(simHdl, "buffer", this, 64u, 10u, 1u, 0u),
    INST_bufferRowCount(simHdl, "bufferRowCount", this, 32u, 0u, (tUInt8)0u),
    INST_buffer_8bit(simHdl, "buffer_8bit", this, 8u, 32u, 1u, 0u),
    INST_buffer_out(simHdl, "buffer_out", this, 64u, 6u, 1u, 0u),
    INST_conversion_finished(simHdl, "conversion_finished", this, 64u, 0llu, (tUInt8)0u),
    INST_converting_flag(simHdl, "converting_flag", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ddr_read_count(simHdl, "ddr_read_count", this, 64u, 0llu, (tUInt8)0u),
    INST_ddr_write_count(simHdl, "ddr_write_count", this, 64u, 0llu, (tUInt8)0u),
    INST_enq_order(simHdl, "enq_order", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_gray_data(simHdl, "gray_data", this, 9u, 0u, (tUInt8)0u),
    INST_gx_reg11(simHdl, "gx_reg11", this, 8u, (tUInt8)255u, (tUInt8)0u),
    INST_gx_reg12(simHdl, "gx_reg12", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_gx_reg13(simHdl, "gx_reg13", this, 8u, (tUInt8)1u, (tUInt8)0u),
    INST_gx_reg21(simHdl, "gx_reg21", this, 8u, (tUInt8)254u, (tUInt8)0u),
    INST_gx_reg22(simHdl, "gx_reg22", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_gx_reg23(simHdl, "gx_reg23", this, 8u, (tUInt8)2u, (tUInt8)0u),
    INST_gx_reg31(simHdl, "gx_reg31", this, 8u, (tUInt8)255u, (tUInt8)0u),
    INST_gx_reg32(simHdl, "gx_reg32", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_gx_reg33(simHdl, "gx_reg33", this, 8u, (tUInt8)1u, (tUInt8)0u),
    INST_gy_reg11(simHdl, "gy_reg11", this, 8u, (tUInt8)255u, (tUInt8)0u),
    INST_gy_reg12(simHdl, "gy_reg12", this, 8u, (tUInt8)254u, (tUInt8)0u),
    INST_gy_reg13(simHdl, "gy_reg13", this, 8u, (tUInt8)255u, (tUInt8)0u),
    INST_gy_reg21(simHdl, "gy_reg21", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_gy_reg22(simHdl, "gy_reg22", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_gy_reg23(simHdl, "gy_reg23", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_gy_reg31(simHdl, "gy_reg31", this, 8u, (tUInt8)1u, (tUInt8)0u),
    INST_gy_reg32(simHdl, "gy_reg32", this, 8u, (tUInt8)2u, (tUInt8)0u),
    INST_gy_reg33(simHdl, "gy_reg33", this, 8u, (tUInt8)1u, (tUInt8)0u),
    INST_image_length(simHdl, "image_length", this, 32u, 512u, (tUInt8)0u),
    INST_image_size(simHdl, "image_size", this, 64u, 0llu, (tUInt8)0u),
    INST_kernel_size(simHdl, "kernel_size", this, 32u, 3u, (tUInt8)0u),
    INST_master_read_araddrOut(simHdl, "master_read_araddrOut", this, 64u, (tUInt8)0u),
    INST_master_read_arprotOut(simHdl, "master_read_arprotOut", this, 3u, (tUInt8)0u),
    INST_master_read_arreadyIn(simHdl, "master_read_arreadyIn", this, 1u, (tUInt8)0u),
    INST_master_read_in(simHdl, "master_read_in", this, 67u, 2u, 1u, 0u),
    INST_master_read_isRst_isInReset(simHdl,
				     "master_read_isRst_isInReset",
				     this,
				     1u,
				     (tUInt8)1u,
				     (tUInt8)1u),
    INST_master_read_out(simHdl, "master_read_out", this, 66u, 2u, 1u, 0u),
    INST_master_read_rdataIn(simHdl, "master_read_rdataIn", this, 64u, (tUInt8)0u),
    INST_master_read_rrespIn(simHdl, "master_read_rrespIn", this, 2u, (tUInt8)0u),
    INST_master_read_rvalidIn(simHdl, "master_read_rvalidIn", this, 1u, (tUInt8)0u),
    INST_master_write_addrOut_rv(simHdl,
				 "master_write_addrOut_rv",
				 this,
				 68u,
				 bs_wide_tmp(68u).set_bits_in_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
															 0u,
															 4u),
								   2u,
								   0u,
								   4u).set_whole_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_whole_word(1u),
										      1u).set_whole_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_whole_word(0u),
													 0u),
				 (tUInt8)0u),
    INST_master_write_awaddrOut(simHdl, "master_write_awaddrOut", this, 64u, (tUInt8)0u),
    INST_master_write_awprotOut(simHdl, "master_write_awprotOut", this, 3u, (tUInt8)0u),
    INST_master_write_awreadyIn(simHdl, "master_write_awreadyIn", this, 1u, (tUInt8)0u),
    INST_master_write_brespIn(simHdl, "master_write_brespIn", this, 2u, (tUInt8)0u),
    INST_master_write_bvalidIn(simHdl, "master_write_bvalidIn", this, 1u, (tUInt8)0u),
    INST_master_write_dataOut_rv(simHdl,
				 "master_write_dataOut_rv",
				 this,
				 73u,
				 bs_wide_tmp(73u).set_bits_in_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_bits_in_word32(2u,
															   0u,
															   9u),
								   2u,
								   0u,
								   9u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(1u),
										      1u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(0u),
													 0u),
				 (tUInt8)0u),
    INST_master_write_in(simHdl, "master_write_in", this, 139u, 2u, 1u, 0u),
    INST_master_write_isRst_isInReset(simHdl,
				      "master_write_isRst_isInReset",
				      this,
				      1u,
				      (tUInt8)1u,
				      (tUInt8)1u),
    INST_master_write_out(simHdl, "master_write_out", this, 2u, 2u, 1u, 0u),
    INST_master_write_wdataOut(simHdl, "master_write_wdataOut", this, 64u, (tUInt8)0u),
    INST_master_write_wreadyIn(simHdl, "master_write_wreadyIn", this, 1u, (tUInt8)0u),
    INST_master_write_wstrbOut(simHdl, "master_write_wstrbOut", this, 8u, (tUInt8)0u),
    INST_outPixel(simHdl, "outPixel", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_out_count(simHdl, "out_count", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_out_hold(simHdl, "out_hold", this, 64u, 0llu, (tUInt8)0u),
    INST_reg11(simHdl, "reg11", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_reg12(simHdl, "reg12", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_reg13(simHdl, "reg13", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_reg21(simHdl, "reg21", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_reg22(simHdl, "reg22", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_reg23(simHdl, "reg23", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_reg31(simHdl, "reg31", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_reg32(simHdl, "reg32", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_reg33(simHdl, "reg33", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_rowBuffer_1(simHdl, "rowBuffer_1", this, 8u, 509u, 1u, 0u),
    INST_rowBuffer_2(simHdl, "rowBuffer_2", this, 8u, 509u, 1u, 0u),
    INST_rowBuffer_inital(simHdl, "rowBuffer_inital", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_slave_read_araddrIn(simHdl, "slave_read_araddrIn", this, 64u, (tUInt8)0u),
    INST_slave_read_arprotIn(simHdl, "slave_read_arprotIn", this, 3u, (tUInt8)0u),
    INST_slave_read_arvalidIn(simHdl, "slave_read_arvalidIn", this, 1u, (tUInt8)0u),
    INST_slave_read_in(simHdl, "slave_read_in", this, 67u, 2u, 1u, 0u),
    INST_slave_read_isRst_isInReset(simHdl,
				    "slave_read_isRst_isInReset",
				    this,
				    1u,
				    (tUInt8)1u,
				    (tUInt8)1u),
    INST_slave_read_out(simHdl, "slave_read_out", this, 66u, 2u, 1u, 0u),
    INST_slave_read_rdataOut(simHdl, "slave_read_rdataOut", this, 64u, (tUInt8)0u),
    INST_slave_read_rreadyIn(simHdl, "slave_read_rreadyIn", this, 1u, (tUInt8)0u),
    INST_slave_read_rrespOut(simHdl, "slave_read_rrespOut", this, 2u, (tUInt8)0u),
    INST_slave_write_addrIn_rv(simHdl,
			       "slave_write_addrIn_rv",
			       this,
			       68u,
			       bs_wide_tmp(68u).set_bits_in_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														       0u,
														       4u),
								 2u,
								 0u,
								 4u).set_whole_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_whole_word(1u),
										    1u).set_whole_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_whole_word(0u),
												       0u),
			       (tUInt8)0u),
    INST_slave_write_awaddrIn(simHdl, "slave_write_awaddrIn", this, 64u, (tUInt8)0u),
    INST_slave_write_awprotIn(simHdl, "slave_write_awprotIn", this, 3u, (tUInt8)0u),
    INST_slave_write_awvalidIn(simHdl, "slave_write_awvalidIn", this, 1u, (tUInt8)0u),
    INST_slave_write_breadyIn(simHdl, "slave_write_breadyIn", this, 1u, (tUInt8)0u),
    INST_slave_write_brespOut(simHdl, "slave_write_brespOut", this, 2u, (tUInt8)0u),
    INST_slave_write_dataIn_rv(simHdl,
			       "slave_write_dataIn_rv",
			       this,
			       73u,
			       bs_wide_tmp(73u).set_bits_in_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_bits_in_word32(2u,
															 0u,
															 9u),
								 2u,
								 0u,
								 9u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(1u),
										    1u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(0u),
												       0u),
			       (tUInt8)0u),
    INST_slave_write_in(simHdl, "slave_write_in", this, 139u, 2u, 1u, 0u),
    INST_slave_write_isRst_isInReset(simHdl,
				     "slave_write_isRst_isInReset",
				     this,
				     1u,
				     (tUInt8)1u,
				     (tUInt8)1u),
    INST_slave_write_out(simHdl, "slave_write_out", this, 2u, 2u, 1u, 0u),
    INST_slave_write_wdataIn(simHdl, "slave_write_wdataIn", this, 64u, (tUInt8)0u),
    INST_slave_write_wstrbIn(simHdl, "slave_write_wstrbIn", this, 8u, (tUInt8)0u),
    INST_slave_write_wvalidIn(simHdl, "slave_write_wvalidIn", this, 1u, (tUInt8)0u),
    INST_slide(simHdl, "slide", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_slide_finish(simHdl, "slide_finish", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_slide_position(simHdl, "slide_position", this, 32u, 0u, (tUInt8)0u),
    INST_sobelConvert(simHdl, "sobelConvert", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_sobelState(simHdl, "sobelState", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_start(simHdl, "start", this, 64u, 0llu, (tUInt8)0u),
    INST_start_write_request(simHdl, "start_write_request", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_64(simHdl, "state_64", this, 64u, 0llu, (tUInt8)0u),
    INST_state_temp(simHdl, "state_temp", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_sum1Buffer(simHdl, "sum1Buffer", this, 8u, 5u, 1u, 0u),
    INST_sum2Buffer(simHdl, "sum2Buffer", this, 8u, 5u, 1u, 0u),
    INST_sum_1(simHdl, "sum_1", this, 16u, 0u, (tUInt8)0u),
    INST_sum_12(simHdl, "sum_12", this, 16u, 0u, (tUInt8)0u),
    INST_sum_2(simHdl, "sum_2", this, 16u, 0u, (tUInt8)0u),
    INST_testslideWindow(simHdl, "testslideWindow", this, 8u, 64u, 1u, 0u),
    INST_testslideWindow_control(simHdl, "testslideWindow_control", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_testslideWindow_count(simHdl, "testslideWindow_count", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_threshold(simHdl, "threshold", this, 16u, 3u, (tUInt8)0u),
    INST_windowBuffer_once_inital(simHdl, "windowBuffer_once_inital", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_windowReady(simHdl, "windowReady", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_windowSlide(simHdl, "windowSlide", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_window_Initial(simHdl, "window_Initial", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_aresetn((tUInt8)1u),
    DEF_master_write_dataOut_rv_port1__read____d105(73u),
    DEF_master_write_dataOut_rv_port0__read____d86(73u),
    DEF_slave_write_dataIn_rv_port1__read____d24(73u),
    DEF_slave_write_dataIn_rv_port0__read____d45(73u),
    DEF_master_write_addrOut_rv_port1__read____d97(68u),
    DEF_master_write_addrOut_rv_port0__read____d83(68u),
    DEF_slave_write_addrIn_rv_port1__read____d22(68u),
    DEF_slave_write_addrIn_rv_port0__read____d35(68u),
    DEF_master_write_in_first____d91(139u),
    DEF_slave_write_in_first____d149(139u),
    DEF_master_read_in_first____d69(67u),
    DEF_slave_read_in_first____d122(67u),
    DEF_master_read_out_first____d174(66u),
    DEF_slave_read_out_first____d18(66u),
    DEF_master_write_in_first__1_BITS_74_TO_3___d95(72u),
    DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32(72u),
    DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34(139u),
    DEF_address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483(139u),
    DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96(73u),
    DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53(73u),
    DEF__0_CONCAT_DONTCARE___d30(73u),
    DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44(68u),
    DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94(68u),
    DEF__0_CONCAT_DONTCARE___d29(68u),
    DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11(67u),
    DEF_address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167(67u),
    DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80(66u),
    DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142(66u)
{
  PORT_S00_AXI_arready = false;
  PORT_S00_AXI_rvalid = false;
  PORT_S00_AXI_rdata = 0llu;
  PORT_S00_AXI_rresp = 0u;
  PORT_S00_AXI_awready = false;
  PORT_S00_AXI_wready = false;
  PORT_S00_AXI_bvalid = false;
  PORT_S00_AXI_bresp = 0u;
  PORT_M00_AXI_arvalid = false;
  PORT_M00_AXI_araddr = 0llu;
  PORT_M00_AXI_arprot = 0u;
  PORT_M00_AXI_rready = false;
  PORT_M00_AXI_awvalid = false;
  PORT_M00_AXI_awaddr = 0llu;
  PORT_M00_AXI_awprot = 0u;
  PORT_M00_AXI_wvalid = false;
  PORT_M00_AXI_wdata = 0llu;
  PORT_M00_AXI_wstrb = 0u;
  PORT_M00_AXI_bready = false;
  PORT_RDY_S00_AXI_arready = false;
  PORT_RDY_S00_AXI_parvalid = false;
  PORT_RDY_S00_AXI_paraddr = false;
  PORT_RDY_S00_AXI_parprot = false;
  PORT_RDY_S00_AXI_rvalid = false;
  PORT_RDY_S00_AXI_prready = false;
  PORT_RDY_S00_AXI_rdata = false;
  PORT_RDY_S00_AXI_rresp = false;
  PORT_RDY_S00_AXI_awready = false;
  PORT_RDY_S00_AXI_pawvalid = false;
  PORT_RDY_S00_AXI_pawaddr = false;
  PORT_RDY_S00_AXI_pawprot = false;
  PORT_RDY_S00_AXI_wready = false;
  PORT_RDY_S00_AXI_pwvalid = false;
  PORT_RDY_S00_AXI_pwdata = false;
  PORT_RDY_S00_AXI_pwstrb = false;
  PORT_RDY_S00_AXI_bvalid = false;
  PORT_RDY_S00_AXI_pbready = false;
  PORT_RDY_S00_AXI_bresp = false;
  PORT_RDY_M00_AXI_arvalid = false;
  PORT_RDY_M00_AXI_parready = false;
  PORT_RDY_M00_AXI_araddr = false;
  PORT_RDY_M00_AXI_arprot = false;
  PORT_RDY_M00_AXI_rready = false;
  PORT_RDY_M00_AXI_prvalid = false;
  PORT_RDY_M00_AXI_prdata = false;
  PORT_RDY_M00_AXI_prresp = false;
  PORT_RDY_M00_AXI_pawready = false;
  PORT_RDY_M00_AXI_awvalid = false;
  PORT_RDY_M00_AXI_awaddr = false;
  PORT_RDY_M00_AXI_awprot = false;
  PORT_RDY_M00_AXI_pwready = false;
  PORT_RDY_M00_AXI_wvalid = false;
  PORT_RDY_M00_AXI_wdata = false;
  PORT_RDY_M00_AXI_wstrb = false;
  PORT_RDY_M00_AXI_pbvalid = false;
  PORT_RDY_M00_AXI_bready = false;
  PORT_RDY_M00_AXI_pbresp = false;
  symbol_count = 222u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkAXIConverter::init_symbols_0()
{
  init_symbol(&symbols[0u], "address_image_1", SYM_MODULE, &INST_address_image_1);
  init_symbol(&symbols[1u], "address_image_2", SYM_MODULE, &INST_address_image_2);
  init_symbol(&symbols[2u], "buffer", SYM_MODULE, &INST_buffer);
  init_symbol(&symbols[3u], "buffer_8bit", SYM_MODULE, &INST_buffer_8bit);
  init_symbol(&symbols[4u], "buffer_out", SYM_MODULE, &INST_buffer_out);
  init_symbol(&symbols[5u], "bufferRowCount", SYM_MODULE, &INST_bufferRowCount);
  init_symbol(&symbols[6u], "conversion_finished", SYM_MODULE, &INST_conversion_finished);
  init_symbol(&symbols[7u], "converting_flag", SYM_MODULE, &INST_converting_flag);
  init_symbol(&symbols[8u], "ddr_read_count", SYM_MODULE, &INST_ddr_read_count);
  init_symbol(&symbols[9u], "ddr_write_count", SYM_MODULE, &INST_ddr_write_count);
  init_symbol(&symbols[10u], "enq_order", SYM_MODULE, &INST_enq_order);
  init_symbol(&symbols[11u], "gray_data", SYM_MODULE, &INST_gray_data);
  init_symbol(&symbols[12u], "gx_reg11", SYM_MODULE, &INST_gx_reg11);
  init_symbol(&symbols[13u], "gx_reg12", SYM_MODULE, &INST_gx_reg12);
  init_symbol(&symbols[14u], "gx_reg13", SYM_MODULE, &INST_gx_reg13);
  init_symbol(&symbols[15u], "gx_reg21", SYM_MODULE, &INST_gx_reg21);
  init_symbol(&symbols[16u], "gx_reg22", SYM_MODULE, &INST_gx_reg22);
  init_symbol(&symbols[17u], "gx_reg23", SYM_MODULE, &INST_gx_reg23);
  init_symbol(&symbols[18u], "gx_reg31", SYM_MODULE, &INST_gx_reg31);
  init_symbol(&symbols[19u], "gx_reg32", SYM_MODULE, &INST_gx_reg32);
  init_symbol(&symbols[20u], "gx_reg33", SYM_MODULE, &INST_gx_reg33);
  init_symbol(&symbols[21u], "gy_reg11", SYM_MODULE, &INST_gy_reg11);
  init_symbol(&symbols[22u], "gy_reg12", SYM_MODULE, &INST_gy_reg12);
  init_symbol(&symbols[23u], "gy_reg13", SYM_MODULE, &INST_gy_reg13);
  init_symbol(&symbols[24u], "gy_reg21", SYM_MODULE, &INST_gy_reg21);
  init_symbol(&symbols[25u], "gy_reg22", SYM_MODULE, &INST_gy_reg22);
  init_symbol(&symbols[26u], "gy_reg23", SYM_MODULE, &INST_gy_reg23);
  init_symbol(&symbols[27u], "gy_reg31", SYM_MODULE, &INST_gy_reg31);
  init_symbol(&symbols[28u], "gy_reg32", SYM_MODULE, &INST_gy_reg32);
  init_symbol(&symbols[29u], "gy_reg33", SYM_MODULE, &INST_gy_reg33);
  init_symbol(&symbols[30u], "image_length", SYM_MODULE, &INST_image_length);
  init_symbol(&symbols[31u], "image_size", SYM_MODULE, &INST_image_size);
  init_symbol(&symbols[32u], "kernel_size", SYM_MODULE, &INST_kernel_size);
  init_symbol(&symbols[33u], "M00_AXI_araddr", SYM_PORT, &PORT_M00_AXI_araddr, 64u);
  init_symbol(&symbols[34u], "M00_AXI_arprot", SYM_PORT, &PORT_M00_AXI_arprot, 3u);
  init_symbol(&symbols[35u], "M00_AXI_arvalid", SYM_PORT, &PORT_M00_AXI_arvalid, 1u);
  init_symbol(&symbols[36u], "M00_AXI_awaddr", SYM_PORT, &PORT_M00_AXI_awaddr, 64u);
  init_symbol(&symbols[37u], "M00_AXI_awprot", SYM_PORT, &PORT_M00_AXI_awprot, 3u);
  init_symbol(&symbols[38u], "M00_AXI_awvalid", SYM_PORT, &PORT_M00_AXI_awvalid, 1u);
  init_symbol(&symbols[39u], "M00_AXI_bready", SYM_PORT, &PORT_M00_AXI_bready, 1u);
  init_symbol(&symbols[40u], "M00_AXI_rready", SYM_PORT, &PORT_M00_AXI_rready, 1u);
  init_symbol(&symbols[41u], "M00_AXI_wdata", SYM_PORT, &PORT_M00_AXI_wdata, 64u);
  init_symbol(&symbols[42u], "M00_AXI_wstrb", SYM_PORT, &PORT_M00_AXI_wstrb, 8u);
  init_symbol(&symbols[43u], "M00_AXI_wvalid", SYM_PORT, &PORT_M00_AXI_wvalid, 1u);
  init_symbol(&symbols[44u], "master_read_araddrOut", SYM_MODULE, &INST_master_read_araddrOut);
  init_symbol(&symbols[45u], "master_read_arprotOut", SYM_MODULE, &INST_master_read_arprotOut);
  init_symbol(&symbols[46u], "master_read_arreadyIn", SYM_MODULE, &INST_master_read_arreadyIn);
  init_symbol(&symbols[47u], "master_read_in", SYM_MODULE, &INST_master_read_in);
  init_symbol(&symbols[48u],
	      "master_read_isRst_isInReset",
	      SYM_MODULE,
	      &INST_master_read_isRst_isInReset);
  init_symbol(&symbols[49u],
	      "master_read_isRst_isInReset__h2640",
	      SYM_DEF,
	      &DEF_master_read_isRst_isInReset__h2640,
	      1u);
  init_symbol(&symbols[50u], "master_read_out", SYM_MODULE, &INST_master_read_out);
  init_symbol(&symbols[51u], "master_read_rdataIn", SYM_MODULE, &INST_master_read_rdataIn);
  init_symbol(&symbols[52u], "master_read_rrespIn", SYM_MODULE, &INST_master_read_rrespIn);
  init_symbol(&symbols[53u], "master_read_rvalidIn", SYM_MODULE, &INST_master_read_rvalidIn);
  init_symbol(&symbols[54u], "master_write_addrOut_rv", SYM_MODULE, &INST_master_write_addrOut_rv);
  init_symbol(&symbols[55u], "master_write_awaddrOut", SYM_MODULE, &INST_master_write_awaddrOut);
  init_symbol(&symbols[56u], "master_write_awprotOut", SYM_MODULE, &INST_master_write_awprotOut);
  init_symbol(&symbols[57u], "master_write_awreadyIn", SYM_MODULE, &INST_master_write_awreadyIn);
  init_symbol(&symbols[58u], "master_write_brespIn", SYM_MODULE, &INST_master_write_brespIn);
  init_symbol(&symbols[59u], "master_write_bvalidIn", SYM_MODULE, &INST_master_write_bvalidIn);
  init_symbol(&symbols[60u], "master_write_dataOut_rv", SYM_MODULE, &INST_master_write_dataOut_rv);
  init_symbol(&symbols[61u], "master_write_in", SYM_MODULE, &INST_master_write_in);
  init_symbol(&symbols[62u],
	      "master_write_isRst_isInReset",
	      SYM_MODULE,
	      &INST_master_write_isRst_isInReset);
  init_symbol(&symbols[63u],
	      "master_write_isRst_isInReset__h3416",
	      SYM_DEF,
	      &DEF_master_write_isRst_isInReset__h3416,
	      1u);
  init_symbol(&symbols[64u], "master_write_out", SYM_MODULE, &INST_master_write_out);
  init_symbol(&symbols[65u], "master_write_wdataOut", SYM_MODULE, &INST_master_write_wdataOut);
  init_symbol(&symbols[66u], "master_write_wreadyIn", SYM_MODULE, &INST_master_write_wreadyIn);
  init_symbol(&symbols[67u], "master_write_wstrbOut", SYM_MODULE, &INST_master_write_wstrbOut);
  init_symbol(&symbols[68u], "out_count", SYM_MODULE, &INST_out_count);
  init_symbol(&symbols[69u], "out_hold", SYM_MODULE, &INST_out_hold);
  init_symbol(&symbols[70u], "outPixel", SYM_MODULE, &INST_outPixel);
  init_symbol(&symbols[71u], "RDY_M00_AXI_araddr", SYM_PORT, &PORT_RDY_M00_AXI_araddr, 1u);
  init_symbol(&symbols[72u], "RDY_M00_AXI_arprot", SYM_PORT, &PORT_RDY_M00_AXI_arprot, 1u);
  init_symbol(&symbols[73u], "RDY_M00_AXI_arvalid", SYM_PORT, &PORT_RDY_M00_AXI_arvalid, 1u);
  init_symbol(&symbols[74u], "RDY_M00_AXI_awaddr", SYM_PORT, &PORT_RDY_M00_AXI_awaddr, 1u);
  init_symbol(&symbols[75u], "RDY_M00_AXI_awprot", SYM_PORT, &PORT_RDY_M00_AXI_awprot, 1u);
  init_symbol(&symbols[76u], "RDY_M00_AXI_awvalid", SYM_PORT, &PORT_RDY_M00_AXI_awvalid, 1u);
  init_symbol(&symbols[77u], "RDY_M00_AXI_bready", SYM_PORT, &PORT_RDY_M00_AXI_bready, 1u);
  init_symbol(&symbols[78u], "RDY_M00_AXI_parready", SYM_PORT, &PORT_RDY_M00_AXI_parready, 1u);
  init_symbol(&symbols[79u], "RDY_M00_AXI_pawready", SYM_PORT, &PORT_RDY_M00_AXI_pawready, 1u);
  init_symbol(&symbols[80u], "RDY_M00_AXI_pbresp", SYM_PORT, &PORT_RDY_M00_AXI_pbresp, 1u);
  init_symbol(&symbols[81u], "RDY_M00_AXI_pbvalid", SYM_PORT, &PORT_RDY_M00_AXI_pbvalid, 1u);
  init_symbol(&symbols[82u], "RDY_M00_AXI_prdata", SYM_PORT, &PORT_RDY_M00_AXI_prdata, 1u);
  init_symbol(&symbols[83u], "RDY_M00_AXI_prresp", SYM_PORT, &PORT_RDY_M00_AXI_prresp, 1u);
  init_symbol(&symbols[84u], "RDY_M00_AXI_prvalid", SYM_PORT, &PORT_RDY_M00_AXI_prvalid, 1u);
  init_symbol(&symbols[85u], "RDY_M00_AXI_pwready", SYM_PORT, &PORT_RDY_M00_AXI_pwready, 1u);
  init_symbol(&symbols[86u], "RDY_M00_AXI_rready", SYM_PORT, &PORT_RDY_M00_AXI_rready, 1u);
  init_symbol(&symbols[87u], "RDY_M00_AXI_wdata", SYM_PORT, &PORT_RDY_M00_AXI_wdata, 1u);
  init_symbol(&symbols[88u], "RDY_M00_AXI_wstrb", SYM_PORT, &PORT_RDY_M00_AXI_wstrb, 1u);
  init_symbol(&symbols[89u], "RDY_M00_AXI_wvalid", SYM_PORT, &PORT_RDY_M00_AXI_wvalid, 1u);
  init_symbol(&symbols[90u], "RDY_S00_AXI_arready", SYM_PORT, &PORT_RDY_S00_AXI_arready, 1u);
  init_symbol(&symbols[91u], "RDY_S00_AXI_awready", SYM_PORT, &PORT_RDY_S00_AXI_awready, 1u);
  init_symbol(&symbols[92u], "RDY_S00_AXI_bresp", SYM_PORT, &PORT_RDY_S00_AXI_bresp, 1u);
  init_symbol(&symbols[93u], "RDY_S00_AXI_bvalid", SYM_PORT, &PORT_RDY_S00_AXI_bvalid, 1u);
  init_symbol(&symbols[94u], "RDY_S00_AXI_paraddr", SYM_PORT, &PORT_RDY_S00_AXI_paraddr, 1u);
  init_symbol(&symbols[95u], "RDY_S00_AXI_parprot", SYM_PORT, &PORT_RDY_S00_AXI_parprot, 1u);
  init_symbol(&symbols[96u], "RDY_S00_AXI_parvalid", SYM_PORT, &PORT_RDY_S00_AXI_parvalid, 1u);
  init_symbol(&symbols[97u], "RDY_S00_AXI_pawaddr", SYM_PORT, &PORT_RDY_S00_AXI_pawaddr, 1u);
  init_symbol(&symbols[98u], "RDY_S00_AXI_pawprot", SYM_PORT, &PORT_RDY_S00_AXI_pawprot, 1u);
  init_symbol(&symbols[99u], "RDY_S00_AXI_pawvalid", SYM_PORT, &PORT_RDY_S00_AXI_pawvalid, 1u);
  init_symbol(&symbols[100u], "RDY_S00_AXI_pbready", SYM_PORT, &PORT_RDY_S00_AXI_pbready, 1u);
  init_symbol(&symbols[101u], "RDY_S00_AXI_prready", SYM_PORT, &PORT_RDY_S00_AXI_prready, 1u);
  init_symbol(&symbols[102u], "RDY_S00_AXI_pwdata", SYM_PORT, &PORT_RDY_S00_AXI_pwdata, 1u);
  init_symbol(&symbols[103u], "RDY_S00_AXI_pwstrb", SYM_PORT, &PORT_RDY_S00_AXI_pwstrb, 1u);
  init_symbol(&symbols[104u], "RDY_S00_AXI_pwvalid", SYM_PORT, &PORT_RDY_S00_AXI_pwvalid, 1u);
  init_symbol(&symbols[105u], "RDY_S00_AXI_rdata", SYM_PORT, &PORT_RDY_S00_AXI_rdata, 1u);
  init_symbol(&symbols[106u], "RDY_S00_AXI_rresp", SYM_PORT, &PORT_RDY_S00_AXI_rresp, 1u);
  init_symbol(&symbols[107u], "RDY_S00_AXI_rvalid", SYM_PORT, &PORT_RDY_S00_AXI_rvalid, 1u);
  init_symbol(&symbols[108u], "RDY_S00_AXI_wready", SYM_PORT, &PORT_RDY_S00_AXI_wready, 1u);
  init_symbol(&symbols[109u], "RL_absSum1", SYM_RULE);
  init_symbol(&symbols[110u], "RL_handleReadRequest", SYM_RULE);
  init_symbol(&symbols[111u], "RL_handleWriteRequest", SYM_RULE);
  init_symbol(&symbols[112u], "RL_initial_testslideWindow", SYM_RULE);
  init_symbol(&symbols[113u], "RL_initial_testslideWindow_finish", SYM_RULE);
  init_symbol(&symbols[114u], "RL_limitMagnitude", SYM_RULE);
  init_symbol(&symbols[115u], "RL_localDataBuffer", SYM_RULE);
  init_symbol(&symbols[116u], "RL_localDataBuffer_8bit", SYM_RULE);
  init_symbol(&symbols[117u], "RL_master_read_deqIn", SYM_RULE);
  init_symbol(&symbols[118u], "RL_master_read_enqOut", SYM_RULE);
  init_symbol(&symbols[119u], "RL_master_read_forwardIn", SYM_RULE);
  init_symbol(&symbols[120u], "RL_master_read_isRst_isResetAssertedUpdate", SYM_RULE);
  init_symbol(&symbols[121u], "RL_master_write_deqAddr", SYM_RULE);
  init_symbol(&symbols[122u], "RL_master_write_deqData", SYM_RULE);
  init_symbol(&symbols[123u], "RL_master_write_forwardAddr", SYM_RULE);
  init_symbol(&symbols[124u], "RL_master_write_forwardData", SYM_RULE);
  init_symbol(&symbols[125u], "RL_master_write_forwardResp", SYM_RULE);
  init_symbol(&symbols[126u], "RL_master_write_isRst_isResetAssertedUpdate", SYM_RULE);
  init_symbol(&symbols[127u], "RL_master_write_splitAddrData", SYM_RULE);
  init_symbol(&symbols[128u], "RL_readRequest", SYM_RULE);
  init_symbol(&symbols[129u], "RL_requestResponse", SYM_RULE);
  init_symbol(&symbols[130u], "RL_rowBufferInital", SYM_RULE);
  init_symbol(&symbols[131u], "RL_rowBufferInital_finish", SYM_RULE);
  init_symbol(&symbols[132u], "RL_slave_read_addrInWrite", SYM_RULE);
  init_symbol(&symbols[133u], "RL_slave_read_deqOut", SYM_RULE);
  init_symbol(&symbols[134u], "RL_slave_read_isRst_isResetAssertedUpdate", SYM_RULE);
  init_symbol(&symbols[135u], "RL_slave_read_putOutData", SYM_RULE);
  init_symbol(&symbols[136u], "RL_slave_write_addrInWrite", SYM_RULE);
  init_symbol(&symbols[137u], "RL_slave_write_dataInWrite", SYM_RULE);
  init_symbol(&symbols[138u], "RL_slave_write_isRst_isResetAssertedUpdate", SYM_RULE);
  init_symbol(&symbols[139u], "RL_slave_write_mergeAddrData", SYM_RULE);
  init_symbol(&symbols[140u], "RL_slave_write_outForward", SYM_RULE);
  init_symbol(&symbols[141u], "RL_slave_write_outWrite", SYM_RULE);
  init_symbol(&symbols[142u], "RL_sobelOperator", SYM_RULE);
  init_symbol(&symbols[143u], "RL_sumUp", SYM_RULE);
  init_symbol(&symbols[144u], "RL_thresholdPixel", SYM_RULE);
  init_symbol(&symbols[145u], "RL_windowBuffer_inital", SYM_RULE);
  init_symbol(&symbols[146u], "RL_windowBuffer_inital_2", SYM_RULE);
  init_symbol(&symbols[147u], "RL_windowBuffer_inital_3", SYM_RULE);
  init_symbol(&symbols[148u], "RL_windowBuffer_inital_end", SYM_RULE);
  init_symbol(&symbols[149u], "RL_windowBuffer_slide", SYM_RULE);
  init_symbol(&symbols[150u], "RL_writePixel", SYM_RULE);
  init_symbol(&symbols[151u], "RL_writeRequest", SYM_RULE);
  init_symbol(&symbols[152u], "reg11", SYM_MODULE, &INST_reg11);
  init_symbol(&symbols[153u], "reg12", SYM_MODULE, &INST_reg12);
  init_symbol(&symbols[154u], "reg13", SYM_MODULE, &INST_reg13);
  init_symbol(&symbols[155u], "reg21", SYM_MODULE, &INST_reg21);
  init_symbol(&symbols[156u], "reg22", SYM_MODULE, &INST_reg22);
  init_symbol(&symbols[157u], "reg23", SYM_MODULE, &INST_reg23);
  init_symbol(&symbols[158u], "reg31", SYM_MODULE, &INST_reg31);
  init_symbol(&symbols[159u], "reg32", SYM_MODULE, &INST_reg32);
  init_symbol(&symbols[160u], "reg33", SYM_MODULE, &INST_reg33);
  init_symbol(&symbols[161u], "rowBuffer_1", SYM_MODULE, &INST_rowBuffer_1);
  init_symbol(&symbols[162u], "rowBuffer_2", SYM_MODULE, &INST_rowBuffer_2);
  init_symbol(&symbols[163u], "rowBuffer_inital", SYM_MODULE, &INST_rowBuffer_inital);
  init_symbol(&symbols[164u], "S00_AXI_arready", SYM_PORT, &PORT_S00_AXI_arready, 1u);
  init_symbol(&symbols[165u], "S00_AXI_awready", SYM_PORT, &PORT_S00_AXI_awready, 1u);
  init_symbol(&symbols[166u], "S00_AXI_bresp", SYM_PORT, &PORT_S00_AXI_bresp, 2u);
  init_symbol(&symbols[167u], "S00_AXI_bvalid", SYM_PORT, &PORT_S00_AXI_bvalid, 1u);
  init_symbol(&symbols[168u], "S00_AXI_rdata", SYM_PORT, &PORT_S00_AXI_rdata, 64u);
  init_symbol(&symbols[169u], "S00_AXI_rresp", SYM_PORT, &PORT_S00_AXI_rresp, 2u);
  init_symbol(&symbols[170u], "S00_AXI_rvalid", SYM_PORT, &PORT_S00_AXI_rvalid, 1u);
  init_symbol(&symbols[171u], "S00_AXI_wready", SYM_PORT, &PORT_S00_AXI_wready, 1u);
  init_symbol(&symbols[172u], "slave_read_araddrIn", SYM_MODULE, &INST_slave_read_araddrIn);
  init_symbol(&symbols[173u], "slave_read_arprotIn", SYM_MODULE, &INST_slave_read_arprotIn);
  init_symbol(&symbols[174u], "slave_read_arvalidIn", SYM_MODULE, &INST_slave_read_arvalidIn);
  init_symbol(&symbols[175u], "slave_read_in", SYM_MODULE, &INST_slave_read_in);
  init_symbol(&symbols[176u],
	      "slave_read_isRst_isInReset",
	      SYM_MODULE,
	      &INST_slave_read_isRst_isInReset);
  init_symbol(&symbols[177u],
	      "slave_read_isRst_isInReset__h102",
	      SYM_DEF,
	      &DEF_slave_read_isRst_isInReset__h102,
	      1u);
  init_symbol(&symbols[178u], "slave_read_out", SYM_MODULE, &INST_slave_read_out);
  init_symbol(&symbols[179u], "slave_read_rdataOut", SYM_MODULE, &INST_slave_read_rdataOut);
  init_symbol(&symbols[180u], "slave_read_rreadyIn", SYM_MODULE, &INST_slave_read_rreadyIn);
  init_symbol(&symbols[181u], "slave_read_rrespOut", SYM_MODULE, &INST_slave_read_rrespOut);
  init_symbol(&symbols[182u], "slave_write_addrIn_rv", SYM_MODULE, &INST_slave_write_addrIn_rv);
  init_symbol(&symbols[183u], "slave_write_awaddrIn", SYM_MODULE, &INST_slave_write_awaddrIn);
  init_symbol(&symbols[184u], "slave_write_awprotIn", SYM_MODULE, &INST_slave_write_awprotIn);
  init_symbol(&symbols[185u], "slave_write_awvalidIn", SYM_MODULE, &INST_slave_write_awvalidIn);
  init_symbol(&symbols[186u], "slave_write_breadyIn", SYM_MODULE, &INST_slave_write_breadyIn);
  init_symbol(&symbols[187u], "slave_write_brespOut", SYM_MODULE, &INST_slave_write_brespOut);
  init_symbol(&symbols[188u], "slave_write_dataIn_rv", SYM_MODULE, &INST_slave_write_dataIn_rv);
  init_symbol(&symbols[189u], "slave_write_in", SYM_MODULE, &INST_slave_write_in);
  init_symbol(&symbols[190u],
	      "slave_write_isRst_isInReset",
	      SYM_MODULE,
	      &INST_slave_write_isRst_isInReset);
  init_symbol(&symbols[191u],
	      "slave_write_isRst_isInReset__h891",
	      SYM_DEF,
	      &DEF_slave_write_isRst_isInReset__h891,
	      1u);
  init_symbol(&symbols[192u], "slave_write_out", SYM_MODULE, &INST_slave_write_out);
  init_symbol(&symbols[193u], "slave_write_wdataIn", SYM_MODULE, &INST_slave_write_wdataIn);
  init_symbol(&symbols[194u], "slave_write_wstrbIn", SYM_MODULE, &INST_slave_write_wstrbIn);
  init_symbol(&symbols[195u], "slave_write_wvalidIn", SYM_MODULE, &INST_slave_write_wvalidIn);
  init_symbol(&symbols[196u], "slide", SYM_MODULE, &INST_slide);
  init_symbol(&symbols[197u], "slide_finish", SYM_MODULE, &INST_slide_finish);
  init_symbol(&symbols[198u], "slide_position", SYM_MODULE, &INST_slide_position);
  init_symbol(&symbols[199u], "sobelConvert", SYM_MODULE, &INST_sobelConvert);
  init_symbol(&symbols[200u], "sobelState", SYM_MODULE, &INST_sobelState);
  init_symbol(&symbols[201u], "start", SYM_MODULE, &INST_start);
  init_symbol(&symbols[202u], "start_write_request", SYM_MODULE, &INST_start_write_request);
  init_symbol(&symbols[203u], "state_64", SYM_MODULE, &INST_state_64);
  init_symbol(&symbols[204u], "state_temp", SYM_MODULE, &INST_state_temp);
  init_symbol(&symbols[205u], "sum1Buffer", SYM_MODULE, &INST_sum1Buffer);
  init_symbol(&symbols[206u], "sum2Buffer", SYM_MODULE, &INST_sum2Buffer);
  init_symbol(&symbols[207u], "sum_1", SYM_MODULE, &INST_sum_1);
  init_symbol(&symbols[208u], "sum_12", SYM_MODULE, &INST_sum_12);
  init_symbol(&symbols[209u], "sum_2", SYM_MODULE, &INST_sum_2);
  init_symbol(&symbols[210u], "testslideWindow", SYM_MODULE, &INST_testslideWindow);
  init_symbol(&symbols[211u], "testslideWindow_control", SYM_MODULE, &INST_testslideWindow_control);
  init_symbol(&symbols[212u], "testslideWindow_count", SYM_MODULE, &INST_testslideWindow_count);
  init_symbol(&symbols[213u], "threshold", SYM_MODULE, &INST_threshold);
  init_symbol(&symbols[214u], "window_Initial", SYM_MODULE, &INST_window_Initial);
  init_symbol(&symbols[215u], "windowBuffer_once_inital", SYM_MODULE, &INST_windowBuffer_once_inital);
  init_symbol(&symbols[216u], "windowReady", SYM_MODULE, &INST_windowReady);
  init_symbol(&symbols[217u], "windowSlide", SYM_MODULE, &INST_windowSlide);
  init_symbol(&symbols[218u], "x__h11419", SYM_DEF, &DEF_x__h11419, 8u);
  init_symbol(&symbols[219u], "x__h6470", SYM_DEF, &DEF_x__h6470, 64u);
  init_symbol(&symbols[220u], "x__h6476", SYM_DEF, &DEF_x__h6476, 64u);
  init_symbol(&symbols[221u], "x__h9219", SYM_DEF, &DEF_x__h9219, 8u);
}


/* Rule actions */

void MOD_mkAXIConverter::RL_slave_read_isRst_isResetAssertedUpdate()
{
  INST_slave_read_isRst_isInReset.METH_write((tUInt8)0u);
}

void MOD_mkAXIConverter::RL_slave_read_addrInWrite()
{
  tUInt64 DEF_x_addr__h523;
  DEF_x_addr__h523 = INST_slave_read_araddrIn.METH_wget();
  DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11.set_bits_in_word((tUInt8)(DEF_x_addr__h523 >> 61u),
										2u,
										0u,
										3u).set_whole_word((tUInt32)(DEF_x_addr__h523 >> 29u),
												   1u).set_whole_word((((tUInt32)(536870911u & DEF_x_addr__h523)) << 3u) | (tUInt32)(INST_slave_read_arprotIn.METH_wget()),
														      0u);
  INST_slave_read_in.METH_enq(DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11);
}

void MOD_mkAXIConverter::RL_slave_read_deqOut()
{
  INST_slave_read_out.METH_deq();
}

void MOD_mkAXIConverter::RL_slave_read_putOutData()
{
  tUInt8 DEF_slave_read_out_first__8_BITS_1_TO_0___d20;
  tUInt64 DEF_new_value__h783;
  DEF_slave_read_out_first____d18 = INST_slave_read_out.METH_first();
  DEF_new_value__h783 = primExtract64(64u, 66u, DEF_slave_read_out_first____d18, 32u, 65u, 32u, 2u);
  DEF_slave_read_out_first__8_BITS_1_TO_0___d20 = DEF_slave_read_out_first____d18.get_bits_in_word8(0u,
												    0u,
												    2u);
  INST_slave_read_rdataOut.METH_wset(DEF_new_value__h783);
  INST_slave_read_rrespOut.METH_wset(DEF_slave_read_out_first__8_BITS_1_TO_0___d20);
}

void MOD_mkAXIConverter::RL_slave_write_isRst_isResetAssertedUpdate()
{
  INST_slave_write_isRst_isInReset.METH_write((tUInt8)0u);
}

void MOD_mkAXIConverter::RL_slave_write_mergeAddrData()
{
  tUInt64 DEF_x_addr__h1785;
  DEF_slave_write_dataIn_rv_port1__read____d24 = INST_slave_write_dataIn_rv.METH_port1__read();
  DEF_slave_write_addrIn_rv_port1__read____d22 = INST_slave_write_addrIn_rv.METH_port1__read();
  wop_primExtractWide(72u,
		      73u,
		      DEF_slave_write_dataIn_rv_port1__read____d24,
		      32u,
		      71u,
		      32u,
		      0u,
		      DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32);
  DEF_x_addr__h1785 = primExtract64(64u,
				    68u,
				    DEF_slave_write_addrIn_rv_port1__read____d22,
				    32u,
				    66u,
				    32u,
				    3u);
  DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34.set_bits_in_word((tUInt32)(DEF_x_addr__h1785 >> 53u),
										4u,
										0u,
										11u).set_whole_word((tUInt32)(DEF_x_addr__h1785 >> 21u),
												    3u).set_whole_word((((tUInt32)(2097151u & DEF_x_addr__h1785)) << 11u) | primExtract32(11u,
																							  72u,
																							  DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32,
																							  32u,
																							  71u,
																							  32u,
																							  61u),
														       2u).set_whole_word(primExtract32(32u,
																			72u,
																			DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32,
																			32u,
																			60u,
																			32u,
																			29u),
																	  1u).set_whole_word((DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32.get_bits_in_word32(0u,
																													     0u,
																													     29u) << 3u) | (tUInt32)(DEF_slave_write_addrIn_rv_port1__read____d22.get_bits_in_word8(0u,
																																								    0u,
																																								    3u)),
																			     0u);
  DEF__0_CONCAT_DONTCARE___d30.set_bits_in_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_bits_in_word32(2u,
													0u,
													9u),
						2u,
						0u,
						9u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(1u),
								   1u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(0u),
										      0u);
  DEF__0_CONCAT_DONTCARE___d29.set_bits_in_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
												      0u,
												      4u),
						2u,
						0u,
						4u).set_whole_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_whole_word(1u),
								   1u).set_whole_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_whole_word(0u),
										      0u);
  INST_slave_write_addrIn_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d29);
  INST_slave_write_dataIn_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d30);
  INST_slave_write_in.METH_enq(DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34);
}

void MOD_mkAXIConverter::RL_slave_write_addrInWrite()
{
  tUInt64 DEF_v_addr__h2116;
  DEF_v_addr__h2116 = INST_slave_write_awaddrIn.METH_wget();
  DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44.set_bits_in_word((tUInt8)15u & (((tUInt8)1u << 3u) | (tUInt8)(DEF_v_addr__h2116 >> 61u)),
										 2u,
										 0u,
										 4u).set_whole_word((tUInt32)(DEF_v_addr__h2116 >> 29u),
												    1u).set_whole_word((((tUInt32)(536870911u & DEF_v_addr__h2116)) << 3u) | (tUInt32)(INST_slave_write_awprotIn.METH_wget()),
														       0u);
  INST_slave_write_addrIn_rv.METH_port0__write(DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44);
}

void MOD_mkAXIConverter::RL_slave_write_dataInWrite()
{
  tUInt8 DEF_x__h2385;
  tUInt64 DEF_x__h2379;
  DEF_x__h2379 = INST_slave_write_wdataIn.METH_wget();
  DEF_x__h2385 = INST_slave_write_wstrbIn.METH_wget();
  DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53.set_bits_in_word(511u & ((((tUInt32)((tUInt8)1u)) << 8u) | (tUInt32)((tUInt8)(DEF_x__h2379 >> 56u))),
										 2u,
										 0u,
										 9u).set_whole_word((tUInt32)(DEF_x__h2379 >> 24u),
												    1u).set_whole_word((((tUInt32)(16777215u & DEF_x__h2379)) << 8u) | (tUInt32)(DEF_x__h2385),
														       0u);
  INST_slave_write_dataIn_rv.METH_port0__write(DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53);
}

void MOD_mkAXIConverter::RL_slave_write_outWrite()
{
  INST_slave_write_out.METH_deq();
}

void MOD_mkAXIConverter::RL_slave_write_outForward()
{
  tUInt8 DEF_slave_write_out_first____d60;
  DEF_slave_write_out_first____d60 = INST_slave_write_out.METH_first();
  INST_slave_write_brespOut.METH_wset(DEF_slave_write_out_first____d60);
}

void MOD_mkAXIConverter::RL_master_read_isRst_isResetAssertedUpdate()
{
  INST_master_read_isRst_isInReset.METH_write((tUInt8)0u);
}

void MOD_mkAXIConverter::RL_master_read_deqIn()
{
  INST_master_read_in.METH_deq();
}

void MOD_mkAXIConverter::RL_master_read_forwardIn()
{
  tUInt8 DEF_master_read_in_first__9_BITS_2_TO_0___d71;
  tUInt64 DEF_new_value__h3108;
  DEF_master_read_in_first____d69 = INST_master_read_in.METH_first();
  DEF_new_value__h3108 = primExtract64(64u, 67u, DEF_master_read_in_first____d69, 32u, 66u, 32u, 3u);
  DEF_master_read_in_first__9_BITS_2_TO_0___d71 = DEF_master_read_in_first____d69.get_bits_in_word8(0u,
												    0u,
												    3u);
  INST_master_read_araddrOut.METH_wset(DEF_new_value__h3108);
  INST_master_read_arprotOut.METH_wset(DEF_master_read_in_first__9_BITS_2_TO_0___d71);
}

void MOD_mkAXIConverter::RL_master_read_enqOut()
{
  tUInt64 DEF_x_data__h3337;
  DEF_x_data__h3337 = INST_master_read_rdataIn.METH_wget();
  DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80.set_bits_in_word((tUInt8)(DEF_x_data__h3337 >> 62u),
										2u,
										0u,
										2u).set_whole_word((tUInt32)(DEF_x_data__h3337 >> 30u),
												   1u).set_whole_word((((tUInt32)(1073741823u & DEF_x_data__h3337)) << 2u) | (tUInt32)(INST_master_read_rrespIn.METH_wget()),
														      0u);
  INST_master_read_out.METH_enq(DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80);
}

void MOD_mkAXIConverter::RL_master_write_isRst_isResetAssertedUpdate()
{
  INST_master_write_isRst_isInReset.METH_write((tUInt8)0u);
}

void MOD_mkAXIConverter::RL_master_write_splitAddrData()
{
  tUInt64 DEF_x__h4207;
  DEF_master_write_in_first____d91 = INST_master_write_in.METH_first();
  wop_primExtractWide(72u,
		      139u,
		      DEF_master_write_in_first____d91,
		      32u,
		      74u,
		      32u,
		      3u,
		      DEF_master_write_in_first__1_BITS_74_TO_3___d95);
  DEF_x__h4207 = primExtract64(64u, 139u, DEF_master_write_in_first____d91, 32u, 138u, 32u, 75u);
  DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96.set_bits_in_word(511u & ((((tUInt32)((tUInt8)1u)) << 8u) | (tUInt32)(DEF_master_write_in_first__1_BITS_74_TO_3___d95.get_bits_in_word8(2u,
																								     0u,
																								     8u))),
									       2u,
									       0u,
									       9u).set_whole_word(DEF_master_write_in_first__1_BITS_74_TO_3___d95.get_whole_word(1u),
												  1u).set_whole_word(DEF_master_write_in_first__1_BITS_74_TO_3___d95.get_whole_word(0u),
														     0u);
  DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94.set_bits_in_word((tUInt8)15u & (((tUInt8)1u << 3u) | (tUInt8)(DEF_x__h4207 >> 61u)),
										 2u,
										 0u,
										 4u).set_whole_word((tUInt32)(DEF_x__h4207 >> 29u),
												    1u).set_whole_word((((tUInt32)(536870911u & DEF_x__h4207)) << 3u) | (tUInt32)(DEF_master_write_in_first____d91.get_bits_in_word8(0u,
																												     0u,
																												     3u)),
														       0u);
  INST_master_write_in.METH_deq();
  INST_master_write_addrOut_rv.METH_port0__write(DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94);
  INST_master_write_dataOut_rv.METH_port0__write(DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96);
}

void MOD_mkAXIConverter::RL_master_write_deqAddr()
{
  DEF__0_CONCAT_DONTCARE___d29.set_bits_in_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
												      0u,
												      4u),
						2u,
						0u,
						4u).set_whole_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_whole_word(1u),
								   1u).set_whole_word(UWide_literal_68_h2aaaaaaaaaaaaaaaa.get_whole_word(0u),
										      0u);
  INST_master_write_addrOut_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d29);
}

void MOD_mkAXIConverter::RL_master_write_forwardAddr()
{
  tUInt8 DEF_master_write_addrOut_rv_port1__read__7_BITS_2__ETC___d104;
  tUInt64 DEF_new_value__h4637;
  DEF_master_write_addrOut_rv_port1__read____d97 = INST_master_write_addrOut_rv.METH_port1__read();
  DEF_new_value__h4637 = primExtract64(64u,
				       68u,
				       DEF_master_write_addrOut_rv_port1__read____d97,
				       32u,
				       66u,
				       32u,
				       3u);
  DEF_master_write_addrOut_rv_port1__read__7_BITS_2__ETC___d104 = DEF_master_write_addrOut_rv_port1__read____d97.get_bits_in_word8(0u,
																   0u,
																   3u);
  INST_master_write_awaddrOut.METH_wset(DEF_new_value__h4637);
  INST_master_write_awprotOut.METH_wset(DEF_master_write_addrOut_rv_port1__read__7_BITS_2__ETC___d104);
}

void MOD_mkAXIConverter::RL_master_write_deqData()
{
  DEF__0_CONCAT_DONTCARE___d30.set_bits_in_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_bits_in_word32(2u,
													0u,
													9u),
						2u,
						0u,
						9u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(1u),
								   1u).set_whole_word(UWide_literal_73_haaaaaaaaaaaaaaaaaa.get_whole_word(0u),
										      0u);
  INST_master_write_dataOut_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d30);
}

void MOD_mkAXIConverter::RL_master_write_forwardData()
{
  tUInt8 DEF_new_value__h5032;
  tUInt64 DEF_new_value__h4993;
  DEF_master_write_dataOut_rv_port1__read____d105 = INST_master_write_dataOut_rv.METH_port1__read();
  DEF_new_value__h4993 = primExtract64(64u,
				       73u,
				       DEF_master_write_dataOut_rv_port1__read____d105,
				       32u,
				       71u,
				       32u,
				       8u);
  DEF_new_value__h5032 = DEF_master_write_dataOut_rv_port1__read____d105.get_bits_in_word8(0u,
											   0u,
											   8u);
  INST_master_write_wdataOut.METH_wset(DEF_new_value__h4993);
  INST_master_write_wstrbOut.METH_wset(DEF_new_value__h5032);
}

void MOD_mkAXIConverter::RL_master_write_forwardResp()
{
  tUInt8 DEF_master_write_brespIn_wget____d118;
  DEF_master_write_brespIn_wget____d118 = INST_master_write_brespIn.METH_wget();
  INST_master_write_out.METH_enq(DEF_master_write_brespIn_wget____d118);
}

void MOD_mkAXIConverter::RL_handleReadRequest()
{
  tUInt8 DEF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_24_ETC___d132;
  tUInt64 DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141;
  tUInt8 DEF_x__h5756;
  tUInt64 DEF_x_data__h6051;
  DEF_slave_read_in_first____d122 = INST_slave_read_in.METH_first();
  DEF_x_data__h6051 = INST_image_size.METH_read();
  DEF_x__h6476 = INST_conversion_finished.METH_read();
  DEF_x__h6470 = INST_start.METH_read();
  DEF_x__h6524 = INST_address_image_1.METH_read();
  DEF_x__h12354 = INST_address_image_2.METH_read();
  DEF_x__h5756 = DEF_slave_read_in_first____d122.get_bits_in_word8(0u, 3u, 6u);
  switch (DEF_x__h5756) {
  case (tUInt8)0u:
    DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 = DEF_x__h6524;
    break;
  case (tUInt8)8u:
    DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 = DEF_x__h12354;
    break;
  case (tUInt8)16u:
    DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 = DEF_x__h6470;
    break;
  case (tUInt8)24u:
    DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 = DEF_x__h6476;
    break;
  default:
    DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 = DEF_x_data__h6051;
  }
  DEF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_24_ETC___d132 = DEF_x__h5756 == (tUInt8)0u || (DEF_x__h5756 == (tUInt8)8u || (DEF_x__h5756 == (tUInt8)16u || (DEF_x__h5756 == (tUInt8)24u || DEF_x__h5756 == (tUInt8)32u)));
  DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142.set_bits_in_word((tUInt8)(DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 >> 62u),
										 2u,
										 0u,
										 2u).set_whole_word((tUInt32)(DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 >> 30u),
												    1u).set_whole_word((((tUInt32)(1073741823u & DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141)) << 2u) | (tUInt32)((tUInt8)0u),
														       0u);
  INST_slave_read_in.METH_deq();
  if (DEF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_24_ETC___d132)
    INST_slave_read_out.METH_enq(DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142);
}

void MOD_mkAXIConverter::RL_handleWriteRequest()
{
  tUInt8 DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_0_ETC___d157;
  tUInt8 DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_0___d151;
  tUInt8 DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_8___d152;
  tUInt8 DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_16___d153;
  tUInt8 DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_32___d154;
  tUInt8 DEF_x__h6141;
  tUInt64 DEF_x__h6277;
  DEF_slave_write_in_first____d149 = INST_slave_write_in.METH_first();
  DEF_x__h6277 = primExtract64(64u, 139u, DEF_slave_write_in_first____d149, 32u, 74u, 32u, 11u);
  DEF_x__h6141 = DEF_slave_write_in_first____d149.get_bits_in_word8(2u, 11u, 6u);
  DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_32___d154 = DEF_x__h6141 == (tUInt8)32u;
  DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_16___d153 = DEF_x__h6141 == (tUInt8)16u;
  DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_8___d152 = DEF_x__h6141 == (tUInt8)8u;
  DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_0___d151 = DEF_x__h6141 == (tUInt8)0u;
  DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_0_ETC___d157 = DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_0___d151 || (DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_8___d152 || (DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_16___d153 || DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_32___d154));
  INST_slave_write_in.METH_deq();
  if (DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_0_ETC___d157)
    INST_slave_write_out.METH_enq((tUInt8)0u);
  if (DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_0___d151)
    INST_address_image_1.METH_write(DEF_x__h6277);
  if (DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_8___d152)
    INST_address_image_2.METH_write(DEF_x__h6277);
  if (DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_16___d153)
    INST_start.METH_write(DEF_x__h6277);
  if (DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_32___d154)
    INST_image_size.METH_write(DEF_x__h6277);
  if (DEF_slave_write_in_first__49_BITS_80_TO_75_50_EQ_16___d153)
    INST_conversion_finished.METH_write(0llu);
}

void MOD_mkAXIConverter::RL_readRequest()
{
  tUInt64 DEF_addr__h6492;
  tUInt64 DEF_x__h6540;
  tUInt8 DEF_ddr_read_count_65_EQ_262136___d168;
  tUInt64 DEF_IF_ddr_read_count_65_EQ_262136_68_THEN_0_ELSE__ETC___d170;
  tUInt64 DEF_x__h6572;
  DEF_x__h6572 = INST_ddr_read_count.METH_read();
  DEF_x__h6524 = INST_address_image_1.METH_read();
  DEF_ddr_read_count_65_EQ_262136___d168 = DEF_x__h6572 == 262136llu;
  DEF_x__h6540 = DEF_x__h6572 + 8llu;
  DEF_IF_ddr_read_count_65_EQ_262136_68_THEN_0_ELSE__ETC___d170 = DEF_ddr_read_count_65_EQ_262136___d168 ? 0llu : DEF_x__h6540;
  DEF_addr__h6492 = DEF_x__h6524 + DEF_x__h6572;
  DEF_address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167.set_bits_in_word((tUInt8)(DEF_addr__h6492 >> 61u),
										 2u,
										 0u,
										 3u).set_whole_word((tUInt32)(DEF_addr__h6492 >> 29u),
												    1u).set_whole_word((((tUInt32)(536870911u & DEF_addr__h6492)) << 3u) | (tUInt32)((tUInt8)0u),
														       0u);
  INST_master_read_in.METH_enq(DEF_address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167);
  INST_ddr_read_count.METH_write(DEF_IF_ddr_read_count_65_EQ_262136_68_THEN_0_ELSE__ETC___d170);
  if (DEF_ddr_read_count_65_EQ_262136___d168)
    INST_start.METH_write(0llu);
}

void MOD_mkAXIConverter::RL_localDataBuffer()
{
  tUInt64 DEF_v__h6582;
  DEF_master_read_out_first____d174 = INST_master_read_out.METH_first();
  DEF_v__h6582 = primExtract64(64u, 66u, DEF_master_read_out_first____d174, 32u, 65u, 32u, 2u);
  INST_master_read_out.METH_deq();
  INST_buffer.METH_enq(DEF_v__h6582);
}

void MOD_mkAXIConverter::RL_localDataBuffer_8bit()
{
  tUInt8 DEF_x__h7273;
  tUInt8 DEF_enq_order_82_EQ_0_83_OR_enq_order_82_EQ_1_84_O_ETC___d197;
  tUInt8 DEF_enq_order_82_EQ_7___d190;
  tUInt8 DEF_IF_enq_order_82_EQ_0_83_THEN_buffer_first__98__ETC___d213;
  tUInt8 DEF_x__h6810;
  tUInt8 DEF_x__h6854;
  tUInt8 DEF_x__h6893;
  tUInt8 DEF_x__h6932;
  tUInt8 DEF_x__h6971;
  tUInt8 DEF_x__h7010;
  tUInt8 DEF_x__h7049;
  tUInt8 DEF_x__h7097;
  tUInt8 DEF_x__h6785;
  tUInt64 DEF_buffer_first____d198;
  DEF_buffer_first____d198 = INST_buffer.METH_first();
  DEF_x__h6785 = INST_enq_order.METH_read();
  DEF_x__h7097 = (tUInt8)(DEF_buffer_first____d198 >> 56u);
  DEF_x__h7049 = (tUInt8)((tUInt8)255u & (DEF_buffer_first____d198 >> 48u));
  DEF_x__h7010 = (tUInt8)((tUInt8)255u & (DEF_buffer_first____d198 >> 40u));
  DEF_x__h6971 = (tUInt8)((tUInt8)255u & (DEF_buffer_first____d198 >> 32u));
  DEF_x__h6932 = (tUInt8)((tUInt8)255u & (DEF_buffer_first____d198 >> 24u));
  DEF_x__h6893 = (tUInt8)((tUInt8)255u & (DEF_buffer_first____d198 >> 16u));
  DEF_x__h6854 = (tUInt8)((tUInt8)255u & (DEF_buffer_first____d198 >> 8u));
  DEF_x__h6810 = (tUInt8)((tUInt8)255u & DEF_buffer_first____d198);
  switch (DEF_x__h6785) {
  case (tUInt8)0u:
    DEF_IF_enq_order_82_EQ_0_83_THEN_buffer_first__98__ETC___d213 = DEF_x__h6810;
    break;
  case (tUInt8)1u:
    DEF_IF_enq_order_82_EQ_0_83_THEN_buffer_first__98__ETC___d213 = DEF_x__h6854;
    break;
  case (tUInt8)2u:
    DEF_IF_enq_order_82_EQ_0_83_THEN_buffer_first__98__ETC___d213 = DEF_x__h6893;
    break;
  case (tUInt8)3u:
    DEF_IF_enq_order_82_EQ_0_83_THEN_buffer_first__98__ETC___d213 = DEF_x__h6932;
    break;
  case (tUInt8)4u:
    DEF_IF_enq_order_82_EQ_0_83_THEN_buffer_first__98__ETC___d213 = DEF_x__h6971;
    break;
  case (tUInt8)5u:
    DEF_IF_enq_order_82_EQ_0_83_THEN_buffer_first__98__ETC___d213 = DEF_x__h7010;
    break;
  case (tUInt8)6u:
    DEF_IF_enq_order_82_EQ_0_83_THEN_buffer_first__98__ETC___d213 = DEF_x__h7049;
    break;
  default:
    DEF_IF_enq_order_82_EQ_0_83_THEN_buffer_first__98__ETC___d213 = DEF_x__h7097;
  }
  DEF_enq_order_82_EQ_7___d190 = DEF_x__h6785 == (tUInt8)7u;
  DEF_enq_order_82_EQ_0_83_OR_enq_order_82_EQ_1_84_O_ETC___d197 = DEF_x__h6785 == (tUInt8)0u || (DEF_x__h6785 == (tUInt8)1u || (DEF_x__h6785 == (tUInt8)2u || (DEF_x__h6785 == (tUInt8)3u || (DEF_x__h6785 == (tUInt8)4u || (DEF_x__h6785 == (tUInt8)5u || (DEF_x__h6785 == (tUInt8)6u || DEF_enq_order_82_EQ_7___d190))))));
  DEF_x__h7273 = (tUInt8)7u & (DEF_x__h6785 + (tUInt8)1u);
  if (DEF_enq_order_82_EQ_0_83_OR_enq_order_82_EQ_1_84_O_ETC___d197)
    INST_buffer_8bit.METH_enq(DEF_IF_enq_order_82_EQ_0_83_THEN_buffer_first__98__ETC___d213);
  if (DEF_enq_order_82_EQ_7___d190)
    INST_buffer.METH_deq();
  INST_enq_order.METH_write(DEF_x__h7273);
}

void MOD_mkAXIConverter::RL_rowBufferInital()
{
  INST_rowBuffer_1.METH_enq((tUInt8)0u);
  INST_rowBuffer_2.METH_enq((tUInt8)0u);
}

void MOD_mkAXIConverter::RL_rowBufferInital_finish()
{
  INST_rowBuffer_inital.METH_write((tUInt8)0u);
  INST_window_Initial.METH_write((tUInt8)1u);
}

void MOD_mkAXIConverter::RL_initial_testslideWindow()
{
  tUInt8 DEF_x__h8324;
  tUInt8 DEF_x__h8343;
  DEF_x__h8343 = INST_testslideWindow_count.METH_read();
  DEF_x__h8324 = (tUInt8)255u & (DEF_x__h8343 + (tUInt8)1u);
  INST_testslideWindow.METH_enq(DEF_x__h8343);
  INST_testslideWindow_count.METH_write(DEF_x__h8324);
}

void MOD_mkAXIConverter::RL_initial_testslideWindow_finish()
{
  INST_testslideWindow_control.METH_write((tUInt8)0u);
}

void MOD_mkAXIConverter::RL_windowBuffer_inital()
{
  tUInt8 DEF_x__h8600;
  DEF_x__h9219 = INST_state_temp.METH_read();
  DEF_x__h8600 = INST_rowBuffer_1.METH_first();
  DEF_b__h10381 = INST_reg13.METH_read();
  DEF_b__h10373 = INST_reg12.METH_read();
  DEF_x__h8782 = (tUInt8)255u & (DEF_x__h9219 + (tUInt8)1u);
  INST_reg11.METH_write(DEF_b__h10373);
  INST_reg12.METH_write(DEF_b__h10381);
  INST_reg13.METH_write(DEF_x__h8600);
  INST_rowBuffer_1.METH_deq();
  INST_state_temp.METH_write(DEF_x__h8782);
}

void MOD_mkAXIConverter::RL_windowBuffer_inital_2()
{
  tUInt8 DEF_x__h8740;
  DEF_x__h9219 = INST_state_temp.METH_read();
  DEF_x__h8740 = INST_rowBuffer_2.METH_first();
  DEF_b__h10405 = INST_reg23.METH_read();
  DEF_b__h10397 = INST_reg22.METH_read();
  DEF_x__h8782 = (tUInt8)255u & (DEF_x__h9219 + (tUInt8)1u);
  DEF_b__h10389 = INST_reg21.METH_read();
  INST_rowBuffer_1.METH_enq(DEF_b__h10389);
  INST_reg21.METH_write(DEF_b__h10397);
  INST_reg22.METH_write(DEF_b__h10405);
  INST_reg23.METH_write(DEF_x__h8740);
  INST_rowBuffer_2.METH_deq();
  INST_state_temp.METH_write(DEF_x__h8782);
}

void MOD_mkAXIConverter::RL_windowBuffer_inital_3()
{
  tUInt32 DEF_x__h8952;
  tUInt32 DEF_x__h9021;
  tUInt32 DEF_IF_slide_position_66_ULT_image_length_67_68_TH_ETC___d270;
  tUInt8 DEF_x__h8878;
  DEF_x__h9256 = INST_slide_position.METH_read();
  DEF_y__h11482 = INST_image_length.METH_read();
  DEF_x__h11479 = INST_bufferRowCount.METH_read();
  DEF_b__h10429 = INST_reg33.METH_read();
  DEF_b__h10421 = INST_reg32.METH_read();
  DEF_b__h10413 = INST_reg31.METH_read();
  DEF_x__h8878 = INST_buffer_8bit.METH_first();
  DEF_x__h9021 = DEF_x__h9256 + 1u;
  DEF_IF_slide_position_66_ULT_image_length_67_68_TH_ETC___d270 = DEF_x__h9256 < DEF_y__h11482 ? DEF_x__h9021 : 1u;
  DEF_x__h8952 = DEF_x__h11479 + 1u;
  INST_rowBuffer_2.METH_enq(DEF_b__h10413);
  INST_reg32.METH_write(DEF_b__h10429);
  INST_reg31.METH_write(DEF_b__h10421);
  INST_reg33.METH_write(DEF_x__h8878);
  INST_buffer_8bit.METH_deq();
  INST_state_temp.METH_write((tUInt8)3u);
  INST_bufferRowCount.METH_write(DEF_x__h8952);
  INST_slide_finish.METH_write((tUInt8)1u);
  INST_slide_position.METH_write(DEF_IF_slide_position_66_ULT_image_length_67_68_TH_ETC___d270);
}

void MOD_mkAXIConverter::RL_windowBuffer_inital_end()
{
  tUInt32 DEF_x__h9120;
  tUInt32 DEF_y__h9119;
  tUInt8 DEF_bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279;
  tUInt8 DEF_NOT_bufferRowCount_64_ULT_image_length_67_PLUS_ETC___d280;
  tUInt32 DEF_y__h9121;
  DEF_y__h11482 = INST_image_length.METH_read();
  DEF_y__h9121 = INST_kernel_size.METH_read();
  DEF_x__h11479 = INST_bufferRowCount.METH_read();
  DEF_x__h9120 = DEF_y__h11482 + DEF_y__h11482;
  DEF_y__h9119 = DEF_x__h9120 + DEF_y__h9121;
  DEF_bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279 = DEF_x__h11479 < DEF_y__h9119;
  DEF_NOT_bufferRowCount_64_ULT_image_length_67_PLUS_ETC___d280 = !DEF_bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279;
  if (DEF_bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279)
    INST_state_temp.METH_write((tUInt8)0u);
  if (DEF_NOT_bufferRowCount_64_ULT_image_length_67_PLUS_ETC___d280)
    INST_window_Initial.METH_write((tUInt8)0u);
  if (DEF_NOT_bufferRowCount_64_ULT_image_length_67_PLUS_ETC___d280)
    INST_windowBuffer_once_inital.METH_write((tUInt8)1u);
  if (DEF_NOT_bufferRowCount_64_ULT_image_length_67_PLUS_ETC___d280)
    INST_slide_finish.METH_write((tUInt8)0u);
  if (DEF_NOT_bufferRowCount_64_ULT_image_length_67_PLUS_ETC___d280)
    INST_sobelConvert.METH_write((tUInt8)1u);
}

void MOD_mkAXIConverter::RL_windowBuffer_slide()
{
  tUInt32 DEF_y__h9226;
  tUInt8 DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d301;
  tUInt8 DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d294;
  tUInt8 DEF_slide_finish_87_AND_NOT_slide_position_66_EQ_1_ETC___d300;
  tUInt8 DEF_slide_position_66_EQ_1___d288;
  tUInt8 DEF_slide_position_66_EQ_2___d291;
  tUInt8 DEF_NOT_slide_finish_87_95_OR_slide_position_66_EQ_ETC___d299;
  tUInt8 DEF_NOT_bufferRowCount_64_ULT_image_length_67_MUL__ETC___d298;
  tUInt8 DEF_slide_finish_87_AND_NOT_slide_position_66_EQ_1_ETC___d293;
  tUInt8 DEF_slide_finish__h9246;
  tUInt8 DEF_NOT_slide_finish_87_95_OR_slide_position_66_EQ_ETC___d297;
  tUInt8 DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286;
  DEF_slide_finish__h9246 = INST_slide_finish.METH_read();
  DEF_x__h9256 = INST_slide_position.METH_read();
  DEF_y__h11482 = INST_image_length.METH_read();
  DEF_x__h11479 = INST_bufferRowCount.METH_read();
  DEF_y__h11480 = (tUInt32)(((tUInt64)(DEF_y__h11482)) * ((tUInt64)(DEF_y__h11482)));
  DEF_slide_position_66_EQ_2___d291 = DEF_x__h9256 == 2u;
  DEF_slide_position_66_EQ_1___d288 = DEF_x__h9256 == 1u;
  DEF_NOT_slide_finish_87_95_OR_slide_position_66_EQ_ETC___d297 = (!DEF_slide_finish__h9246 || DEF_slide_position_66_EQ_1___d288) || DEF_slide_position_66_EQ_2___d291;
  DEF_slide_finish_87_AND_NOT_slide_position_66_EQ_1_ETC___d293 = (DEF_slide_finish__h9246 && !DEF_slide_position_66_EQ_1___d288) && !DEF_slide_position_66_EQ_2___d291;
  DEF_y__h9226 = DEF_y__h11480 + 1u;
  DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286 = DEF_x__h11479 < DEF_y__h9226;
  DEF_NOT_bufferRowCount_64_ULT_image_length_67_MUL__ETC___d298 = !DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286;
  DEF_NOT_slide_finish_87_95_OR_slide_position_66_EQ_ETC___d299 = DEF_NOT_slide_finish_87_95_OR_slide_position_66_EQ_ETC___d297 || DEF_NOT_bufferRowCount_64_ULT_image_length_67_MUL__ETC___d298;
  DEF_slide_finish_87_AND_NOT_slide_position_66_EQ_1_ETC___d300 = DEF_slide_finish_87_AND_NOT_slide_position_66_EQ_1_ETC___d293 || DEF_NOT_bufferRowCount_64_ULT_image_length_67_MUL__ETC___d298;
  DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d301 = DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286 && DEF_NOT_slide_finish_87_95_OR_slide_position_66_EQ_ETC___d297;
  DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d294 = DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286 && DEF_slide_finish_87_AND_NOT_slide_position_66_EQ_1_ETC___d293;
  INST_sobelConvert.METH_write(DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d294);
  if (DEF_NOT_slide_finish_87_95_OR_slide_position_66_EQ_ETC___d299)
    INST_window_Initial.METH_write(DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286);
  if (DEF_slide_finish_87_AND_NOT_slide_position_66_EQ_1_ETC___d300)
    INST_slide.METH_write((tUInt8)0u);
  if (DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d301)
    INST_state_temp.METH_write((tUInt8)0u);
  if (DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d294)
    INST_slide_finish.METH_write((tUInt8)0u);
}

void MOD_mkAXIConverter::RL_sobelOperator()
{
  tUInt32 DEF_SEXT_gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0_0_ETC___d350;
  tUInt32 DEF_SEXT_gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0_5_ETC___d394;
  tUInt8 DEF_b__h10365;
  tUInt8 DEF_b__h10246;
  tUInt8 DEF_b__h10255;
  tUInt8 DEF_b__h10263;
  tUInt8 DEF_b__h10271;
  tUInt8 DEF_b__h10279;
  tUInt8 DEF_b__h10287;
  tUInt8 DEF_b__h10295;
  tUInt8 DEF_b__h10303;
  tUInt8 DEF_b__h10311;
  tUInt8 DEF_b__h10364;
  tUInt8 DEF_b__h10372;
  tUInt8 DEF_b__h10380;
  tUInt8 DEF_b__h10388;
  tUInt8 DEF_b__h10396;
  tUInt8 DEF_b__h10404;
  tUInt8 DEF_b__h10412;
  tUInt8 DEF_b__h10420;
  tUInt8 DEF_b__h10428;
  DEF_x__h11419 = INST_sobelState.METH_read();
  DEF_b__h10428 = INST_gy_reg33.METH_read();
  DEF_b__h10420 = INST_gy_reg32.METH_read();
  DEF_b__h10412 = INST_gy_reg31.METH_read();
  DEF_b__h10404 = INST_gy_reg23.METH_read();
  DEF_b__h10396 = INST_gy_reg22.METH_read();
  DEF_b__h10388 = INST_gy_reg21.METH_read();
  DEF_b__h10380 = INST_gy_reg13.METH_read();
  DEF_b__h10372 = INST_gy_reg12.METH_read();
  DEF_b__h10364 = INST_gy_reg11.METH_read();
  DEF_b__h10311 = INST_gx_reg33.METH_read();
  DEF_b__h10303 = INST_gx_reg32.METH_read();
  DEF_b__h10295 = INST_gx_reg31.METH_read();
  DEF_b__h10287 = INST_gx_reg23.METH_read();
  DEF_b__h10279 = INST_gx_reg22.METH_read();
  DEF_b__h10271 = INST_gx_reg21.METH_read();
  DEF_b__h10263 = INST_gx_reg13.METH_read();
  DEF_b__h10255 = INST_gx_reg12.METH_read();
  DEF_b__h10246 = INST_gx_reg11.METH_read();
  DEF_b__h10429 = INST_reg33.METH_read();
  DEF_b__h10421 = INST_reg32.METH_read();
  DEF_b__h10413 = INST_reg31.METH_read();
  DEF_b__h10405 = INST_reg23.METH_read();
  DEF_b__h10397 = INST_reg22.METH_read();
  DEF_b__h10389 = INST_reg21.METH_read();
  DEF_b__h10381 = INST_reg13.METH_read();
  DEF_b__h10373 = INST_reg12.METH_read();
  DEF_b__h10365 = INST_reg11.METH_read();
  DEF_SEXT_gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0_5_ETC___d394 = 65535u & ((65535u & ((65535u & ((65535u & ((65535u & ((65535u & ((65535u & ((65535u & (primSignExt32(16u,
																				       8u,
																				       (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10364)) * ((tUInt32)(DEF_b__h10365))))))) + primSignExt32(16u,
																																				8u,
																																				(tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10372)) * ((tUInt32)(DEF_b__h10373))))))))) + primSignExt32(16u,
																																																			   8u,
																																																			   (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10380)) * ((tUInt32)(DEF_b__h10381))))))))) + primSignExt32(16u,
																																																																		      8u,
																																																																		      (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10388)) * ((tUInt32)(DEF_b__h10389))))))))) + primSignExt32(16u,
																																																																																		 8u,
																																																																																		 (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10396)) * ((tUInt32)(DEF_b__h10397))))))))) + primSignExt32(16u,
																																																																																																	    8u,
																																																																																																	    (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10404)) * ((tUInt32)(DEF_b__h10405))))))))) + primSignExt32(16u,
																																																																																																																       8u,
																																																																																																																       (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10412)) * ((tUInt32)(DEF_b__h10413))))))))) + primSignExt32(16u,
																																																																																																																																  8u,
																																																																																																																																  (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10420)) * ((tUInt32)(DEF_b__h10421))))))))) + primSignExt32(16u,
																																																																																																																																															     8u,
																																																																																																																																															     (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10428)) * ((tUInt32)(DEF_b__h10429))))))));
  DEF_SEXT_gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0_0_ETC___d350 = 65535u & ((65535u & ((65535u & ((65535u & ((65535u & ((65535u & ((65535u & ((65535u & (primSignExt32(16u,
																				       8u,
																				       (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10246)) * ((tUInt32)(DEF_b__h10365))))))) + primSignExt32(16u,
																																				8u,
																																				(tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10255)) * ((tUInt32)(DEF_b__h10373))))))))) + primSignExt32(16u,
																																																			   8u,
																																																			   (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10263)) * ((tUInt32)(DEF_b__h10381))))))))) + primSignExt32(16u,
																																																																		      8u,
																																																																		      (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10271)) * ((tUInt32)(DEF_b__h10389))))))))) + primSignExt32(16u,
																																																																																		 8u,
																																																																																		 (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10279)) * ((tUInt32)(DEF_b__h10397))))))))) + primSignExt32(16u,
																																																																																																	    8u,
																																																																																																	    (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10287)) * ((tUInt32)(DEF_b__h10405))))))))) + primSignExt32(16u,
																																																																																																																       8u,
																																																																																																																       (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10295)) * ((tUInt32)(DEF_b__h10413))))))))) + primSignExt32(16u,
																																																																																																																																  8u,
																																																																																																																																  (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10303)) * ((tUInt32)(DEF_b__h10421))))))))) + primSignExt32(16u,
																																																																																																																																															     8u,
																																																																																																																																															     (tUInt8)((tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_b__h10311)) * ((tUInt32)(DEF_b__h10429))))))));
  DEF_x__h11235 = (tUInt8)255u & (DEF_x__h11419 + (tUInt8)1u);
  INST_sum_1.METH_write(DEF_SEXT_gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0_0_ETC___d350);
  INST_sum_2.METH_write(DEF_SEXT_gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0_5_ETC___d394);
  INST_sobelState.METH_write(DEF_x__h11235);
}

void MOD_mkAXIConverter::RL_absSum1()
{
  tUInt8 DEF_sum_2_BIT_15___h10763;
  tUInt8 DEF_sum_1_BIT_15___h10675;
  tUInt32 DEF_sum_2_02_MUL_65535_04_BITS_15_TO_0___d405;
  tUInt32 DEF_sum_1_98_MUL_65535_00_BITS_15_TO_0___d401;
  DEF_sum_2__h10762 = INST_sum_2.METH_read();
  DEF_sum_1__h10674 = INST_sum_1.METH_read();
  DEF_x__h11419 = INST_sobelState.METH_read();
  DEF_sum_1_98_MUL_65535_00_BITS_15_TO_0___d401 = (tUInt32)(65535u & (DEF_sum_1__h10674 * 65535u));
  DEF_sum_2_02_MUL_65535_04_BITS_15_TO_0___d405 = (tUInt32)(65535u & (DEF_sum_2__h10762 * 65535u));
  DEF_sum_1_BIT_15___h10675 = (tUInt8)(DEF_sum_1__h10674 >> 15u);
  DEF_sum_2_BIT_15___h10763 = (tUInt8)(DEF_sum_2__h10762 >> 15u);
  DEF_x__h11235 = (tUInt8)255u & (DEF_x__h11419 + (tUInt8)1u);
  if (DEF_sum_1_BIT_15___h10675)
    INST_sum_1.METH_write(DEF_sum_1_98_MUL_65535_00_BITS_15_TO_0___d401);
  if (DEF_sum_2_BIT_15___h10763)
    INST_sum_2.METH_write(DEF_sum_2_02_MUL_65535_04_BITS_15_TO_0___d405);
  INST_sobelState.METH_write(DEF_x__h11235);
}

void MOD_mkAXIConverter::RL_sumUp()
{
  tUInt32 DEF_sum_1_98_PLUS_sum_2_02___d408;
  DEF_sum_2__h10762 = INST_sum_2.METH_read();
  DEF_sum_1__h10674 = INST_sum_1.METH_read();
  DEF_x__h11419 = INST_sobelState.METH_read();
  DEF_sum_1_98_PLUS_sum_2_02___d408 = 65535u & (DEF_sum_1__h10674 + DEF_sum_2__h10762);
  DEF_x__h11235 = (tUInt8)255u & (DEF_x__h11419 + (tUInt8)1u);
  INST_sum_12.METH_write(DEF_sum_1_98_PLUS_sum_2_02___d408);
  INST_sobelState.METH_write(DEF_x__h11235);
}

void MOD_mkAXIConverter::RL_limitMagnitude()
{
  tUInt8 DEF_NOT_sum_12_11_SLE_255_12___d413;
  DEF_sum_12__h11198 = INST_sum_12.METH_read();
  DEF_x__h11419 = INST_sobelState.METH_read();
  DEF_NOT_sum_12_11_SLE_255_12___d413 = !primSLE8(1u, 16u, (tUInt32)(DEF_sum_12__h11198), 16u, 255u);
  DEF_x__h11235 = (tUInt8)255u & (DEF_x__h11419 + (tUInt8)1u);
  if (DEF_NOT_sum_12_11_SLE_255_12___d413)
    INST_sum_12.METH_write(255u);
  INST_sobelState.METH_write(DEF_x__h11235);
}

void MOD_mkAXIConverter::RL_thresholdPixel()
{
  tUInt8 DEF_IF_sum_12_11_SLE_threshold_16_17_THEN_0_ELSE_s_ETC___d419;
  tUInt8 DEF_x__h11167;
  tUInt32 DEF_b__h11101;
  DEF_b__h11101 = INST_threshold.METH_read();
  DEF_sum_12__h11198 = INST_sum_12.METH_read();
  DEF_x__h11419 = INST_sobelState.METH_read();
  DEF_x__h11167 = (tUInt8)((tUInt8)255u & DEF_sum_12__h11198);
  DEF_IF_sum_12_11_SLE_threshold_16_17_THEN_0_ELSE_s_ETC___d419 = primSLE8(1u,
									   16u,
									   (tUInt32)(DEF_sum_12__h11198),
									   16u,
									   (tUInt32)(DEF_b__h11101)) ? (tUInt8)0u : DEF_x__h11167;
  DEF_x__h11235 = (tUInt8)255u & (DEF_x__h11419 + (tUInt8)1u);
  INST_outPixel.METH_write(DEF_IF_sum_12_11_SLE_threshold_16_17_THEN_0_ELSE_s_ETC___d419);
  INST_sobelState.METH_write(DEF_x__h11235);
}

void MOD_mkAXIConverter::RL_writePixel()
{
  tUInt8 DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d424;
  tUInt8 DEF_x__h12279;
  tUInt8 DEF_out_count_25_EQ_8___d472;
  tUInt8 DEF_IF_out_count_25_EQ_8_72_THEN_0_ELSE_out_count__ETC___d474;
  tUInt64 DEF_x__h12103;
  tUInt64 DEF_x__h12035;
  tUInt64 DEF_x__h11967;
  tUInt64 DEF_x__h11899;
  tUInt64 DEF_x__h11831;
  tUInt64 DEF_x__h11763;
  tUInt64 DEF_x__h11695;
  tUInt64 DEF_x__h11627;
  tUInt64 DEF_IF_out_count_25_EQ_0_26_THEN_out_hold_41_BITS__ETC___d471;
  tUInt8 DEF_out_hold_BITS_7_TO_0___h11750;
  tUInt32 DEF_out_hold_BITS_15_TO_0___h11818;
  tUInt32 DEF_out_hold_BITS_23_TO_0___h11886;
  tUInt32 DEF_out_hold_BITS_31_TO_0___h11954;
  tUInt64 DEF_out_hold_BITS_39_TO_0___h12022;
  tUInt64 DEF_out_hold_BITS_47_TO_0___h12090;
  tUInt64 DEF_out_hold_BITS_55_TO_0___h12157;
  tUInt64 DEF_out_hold_BITS_63_TO_8___h11683;
  tUInt8 DEF_spliced_bits__h12114;
  tUInt64 DEF_x__h12292;
  tUInt8 DEF_x__h12316;
  tUInt8 DEF_out_count_25_EQ_0_26_OR_out_count_25_EQ_1_27_O_ETC___d440;
  DEF_x__h12316 = INST_out_count.METH_read();
  DEF_out_count_25_EQ_0_26_OR_out_count_25_EQ_1_27_O_ETC___d440 = DEF_x__h12316 == (tUInt8)0u || (DEF_x__h12316 == (tUInt8)1u || (DEF_x__h12316 == (tUInt8)2u || (DEF_x__h12316 == (tUInt8)3u || (DEF_x__h12316 == (tUInt8)4u || (DEF_x__h12316 == (tUInt8)5u || (DEF_x__h12316 == (tUInt8)6u || DEF_x__h12316 == (tUInt8)7u))))));
  DEF_x__h12292 = INST_out_hold.METH_read();
  DEF_y__h11482 = INST_image_length.METH_read();
  DEF_x__h11479 = INST_bufferRowCount.METH_read();
  DEF_spliced_bits__h12114 = INST_outPixel.METH_read();
  DEF_out_hold_BITS_63_TO_8___h11683 = (tUInt64)(DEF_x__h12292 >> 8u);
  DEF_out_hold_BITS_55_TO_0___h12157 = (tUInt64)(72057594037927935llu & DEF_x__h12292);
  DEF_out_hold_BITS_47_TO_0___h12090 = (tUInt64)(281474976710655llu & DEF_x__h12292);
  DEF_out_hold_BITS_39_TO_0___h12022 = (tUInt64)(1099511627775llu & DEF_x__h12292);
  DEF_out_hold_BITS_31_TO_0___h11954 = (tUInt32)(DEF_x__h12292);
  DEF_y__h11480 = (tUInt32)(((tUInt64)(DEF_y__h11482)) * ((tUInt64)(DEF_y__h11482)));
  DEF_out_hold_BITS_23_TO_0___h11886 = (tUInt32)(16777215u & DEF_x__h12292);
  DEF_out_hold_BITS_15_TO_0___h11818 = (tUInt32)(65535u & DEF_x__h12292);
  DEF_out_hold_BITS_7_TO_0___h11750 = (tUInt8)((tUInt8)255u & DEF_x__h12292);
  DEF_x__h11627 = (DEF_out_hold_BITS_63_TO_8___h11683 << 8u) | (tUInt64)(DEF_spliced_bits__h12114);
  DEF_x__h11695 = ((((tUInt64)(DEF_x__h12292 >> 16u)) << 16u) | (((tUInt64)(DEF_spliced_bits__h12114)) << 8u)) | (tUInt64)(DEF_out_hold_BITS_7_TO_0___h11750);
  DEF_x__h11763 = ((((tUInt64)(DEF_x__h12292 >> 24u)) << 24u) | (((tUInt64)(DEF_spliced_bits__h12114)) << 16u)) | (tUInt64)(DEF_out_hold_BITS_15_TO_0___h11818);
  DEF_x__h11831 = ((((tUInt64)((tUInt32)(DEF_x__h12292 >> 32u))) << 32u) | (((tUInt64)(DEF_spliced_bits__h12114)) << 24u)) | (tUInt64)(DEF_out_hold_BITS_23_TO_0___h11886);
  DEF_x__h11899 = ((((tUInt64)((tUInt32)(DEF_x__h12292 >> 40u))) << 40u) | (((tUInt64)(DEF_spliced_bits__h12114)) << 32u)) | (tUInt64)(DEF_out_hold_BITS_31_TO_0___h11954);
  DEF_x__h11967 = ((((tUInt64)((tUInt32)(DEF_x__h12292 >> 48u))) << 48u) | (((tUInt64)(DEF_spliced_bits__h12114)) << 40u)) | DEF_out_hold_BITS_39_TO_0___h12022;
  DEF_x__h12035 = ((((tUInt64)((tUInt8)(DEF_x__h12292 >> 56u))) << 56u) | (((tUInt64)(DEF_spliced_bits__h12114)) << 48u)) | DEF_out_hold_BITS_47_TO_0___h12090;
  DEF_x__h12103 = (((tUInt64)(DEF_spliced_bits__h12114)) << 56u) | DEF_out_hold_BITS_55_TO_0___h12157;
  switch (DEF_x__h12316) {
  case (tUInt8)0u:
    DEF_IF_out_count_25_EQ_0_26_THEN_out_hold_41_BITS__ETC___d471 = DEF_x__h11627;
    break;
  case (tUInt8)1u:
    DEF_IF_out_count_25_EQ_0_26_THEN_out_hold_41_BITS__ETC___d471 = DEF_x__h11695;
    break;
  case (tUInt8)2u:
    DEF_IF_out_count_25_EQ_0_26_THEN_out_hold_41_BITS__ETC___d471 = DEF_x__h11763;
    break;
  case (tUInt8)3u:
    DEF_IF_out_count_25_EQ_0_26_THEN_out_hold_41_BITS__ETC___d471 = DEF_x__h11831;
    break;
  case (tUInt8)4u:
    DEF_IF_out_count_25_EQ_0_26_THEN_out_hold_41_BITS__ETC___d471 = DEF_x__h11899;
    break;
  case (tUInt8)5u:
    DEF_IF_out_count_25_EQ_0_26_THEN_out_hold_41_BITS__ETC___d471 = DEF_x__h11967;
    break;
  case (tUInt8)6u:
    DEF_IF_out_count_25_EQ_0_26_THEN_out_hold_41_BITS__ETC___d471 = DEF_x__h12035;
    break;
  default:
    DEF_IF_out_count_25_EQ_0_26_THEN_out_hold_41_BITS__ETC___d471 = DEF_x__h12103;
  }
  DEF_x__h12279 = (tUInt8)255u & (DEF_x__h12316 + (tUInt8)1u);
  DEF_out_count_25_EQ_8___d472 = DEF_x__h12316 == (tUInt8)8u;
  DEF_IF_out_count_25_EQ_8_72_THEN_0_ELSE_out_count__ETC___d474 = DEF_out_count_25_EQ_8___d472 ? (tUInt8)0u : DEF_x__h12279;
  DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d424 = DEF_x__h11479 < DEF_y__h11480;
  INST_sobelConvert.METH_write((tUInt8)0u);
  INST_sobelState.METH_write((tUInt8)0u);
  if (DEF_bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d424)
    INST_slide.METH_write((tUInt8)1u);
  if (DEF_out_count_25_EQ_0_26_OR_out_count_25_EQ_1_27_O_ETC___d440)
    INST_out_hold.METH_write(DEF_IF_out_count_25_EQ_0_26_THEN_out_hold_41_BITS__ETC___d471);
  INST_out_count.METH_write(DEF_IF_out_count_25_EQ_8_72_THEN_0_ELSE_out_count__ETC___d474);
  if (DEF_out_count_25_EQ_8___d472)
    INST_buffer_out.METH_enq(DEF_x__h12292);
}

void MOD_mkAXIConverter::RL_writeRequest()
{
  tUInt64 DEF_addr__h12335;
  tUInt64 DEF_x__h12423;
  tUInt8 DEF_ddr_write_count_80_EQ_262136___d484;
  tUInt64 DEF_IF_ddr_write_count_80_EQ_262136_84_THEN_0_ELSE_ETC___d486;
  tUInt64 DEF_x__h12455;
  tUInt64 DEF_data__h12336;
  DEF_data__h12336 = INST_buffer_out.METH_first();
  DEF_x__h12455 = INST_ddr_write_count.METH_read();
  DEF_x__h12354 = INST_address_image_2.METH_read();
  DEF_ddr_write_count_80_EQ_262136___d484 = DEF_x__h12455 == 262136llu;
  DEF_x__h12423 = DEF_x__h12455 + 8llu;
  DEF_IF_ddr_write_count_80_EQ_262136_84_THEN_0_ELSE_ETC___d486 = DEF_ddr_write_count_80_EQ_262136___d484 ? 0llu : DEF_x__h12423;
  DEF_addr__h12335 = DEF_x__h12354 + DEF_x__h12455;
  DEF_address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483.set_bits_in_word((tUInt32)(DEF_addr__h12335 >> 53u),
										 4u,
										 0u,
										 11u).set_whole_word((tUInt32)(DEF_addr__h12335 >> 21u),
												     3u).set_whole_word((((tUInt32)(2097151u & DEF_addr__h12335)) << 11u) | (tUInt32)(DEF_data__h12336 >> 53u),
															2u).set_whole_word((tUInt32)(DEF_data__h12336 >> 21u),
																	   1u).set_whole_word((((tUInt32)(2097151u & DEF_data__h12336)) << 11u) | 2040u,
																			      0u);
  INST_master_write_in.METH_enq(DEF_address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483);
  INST_buffer_out.METH_deq();
  INST_ddr_write_count.METH_write(DEF_IF_ddr_write_count_80_EQ_262136_84_THEN_0_ELSE_ETC___d486);
  if (DEF_ddr_write_count_80_EQ_262136___d484)
    INST_conversion_finished.METH_write(1llu);
}

void MOD_mkAXIConverter::RL_requestResponse()
{
  INST_master_write_out.METH_deq();
}


/* Methods */

tUInt8 MOD_mkAXIConverter::METH_slave_read_fab_arready()
{
  DEF_slave_read_isRst_isInReset__h102 = INST_slave_read_isRst_isInReset.METH_read();
  DEF_slave_read_in_notFull____d6 = INST_slave_read_in.METH_notFull();
  DEF_NOT_slave_read_isRst_isInReset___d3 = !DEF_slave_read_isRst_isInReset__h102;
  PORT_S00_AXI_arready = DEF_NOT_slave_read_isRst_isInReset___d3 && DEF_slave_read_in_notFull____d6;
  return PORT_S00_AXI_arready;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_read_fab_arready()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_arready;
  DEF_CAN_FIRE_slave_read_fab_arready = (tUInt8)1u;
  PORT_RDY_S00_AXI_arready = DEF_CAN_FIRE_slave_read_fab_arready;
  return PORT_RDY_S00_AXI_arready;
}

void MOD_mkAXIConverter::METH_slave_read_fab_parvalid(tUInt8 ARG_S00_AXI_arvalid)
{
  if (PORT_RDY_S00_AXI_parvalid)
    INST_slave_read_arvalidIn.METH_wset(ARG_S00_AXI_arvalid);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_read_fab_parvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_parvalid;
  DEF_CAN_FIRE_slave_read_fab_parvalid = (tUInt8)1u;
  PORT_RDY_S00_AXI_parvalid = DEF_CAN_FIRE_slave_read_fab_parvalid;
  return PORT_RDY_S00_AXI_parvalid;
}

void MOD_mkAXIConverter::METH_slave_read_fab_paraddr(tUInt64 ARG_S00_AXI_araddr)
{
  if (PORT_RDY_S00_AXI_paraddr)
    INST_slave_read_araddrIn.METH_wset(ARG_S00_AXI_araddr);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_read_fab_paraddr()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_paraddr;
  DEF_CAN_FIRE_slave_read_fab_paraddr = (tUInt8)1u;
  PORT_RDY_S00_AXI_paraddr = DEF_CAN_FIRE_slave_read_fab_paraddr;
  return PORT_RDY_S00_AXI_paraddr;
}

void MOD_mkAXIConverter::METH_slave_read_fab_parprot(tUInt8 ARG_S00_AXI_arprot)
{
  if (PORT_RDY_S00_AXI_parprot)
    INST_slave_read_arprotIn.METH_wset(ARG_S00_AXI_arprot);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_read_fab_parprot()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_parprot;
  DEF_CAN_FIRE_slave_read_fab_parprot = (tUInt8)1u;
  PORT_RDY_S00_AXI_parprot = DEF_CAN_FIRE_slave_read_fab_parprot;
  return PORT_RDY_S00_AXI_parprot;
}

tUInt8 MOD_mkAXIConverter::METH_slave_read_fab_rvalid()
{
  DEF_slave_read_isRst_isInReset__h102 = INST_slave_read_isRst_isInReset.METH_read();
  DEF_slave_read_out_notEmpty____d15 = INST_slave_read_out.METH_notEmpty();
  DEF_NOT_slave_read_isRst_isInReset___d3 = !DEF_slave_read_isRst_isInReset__h102;
  PORT_S00_AXI_rvalid = DEF_NOT_slave_read_isRst_isInReset___d3 && DEF_slave_read_out_notEmpty____d15;
  return PORT_S00_AXI_rvalid;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_read_fab_rvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_rvalid;
  DEF_CAN_FIRE_slave_read_fab_rvalid = (tUInt8)1u;
  PORT_RDY_S00_AXI_rvalid = DEF_CAN_FIRE_slave_read_fab_rvalid;
  return PORT_RDY_S00_AXI_rvalid;
}

void MOD_mkAXIConverter::METH_slave_read_fab_prready(tUInt8 ARG_S00_AXI_rready)
{
  if (PORT_RDY_S00_AXI_prready)
    INST_slave_read_rreadyIn.METH_wset(ARG_S00_AXI_rready);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_read_fab_prready()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_prready;
  DEF_CAN_FIRE_slave_read_fab_prready = (tUInt8)1u;
  PORT_RDY_S00_AXI_prready = DEF_CAN_FIRE_slave_read_fab_prready;
  return PORT_RDY_S00_AXI_prready;
}

tUInt64 MOD_mkAXIConverter::METH_slave_read_fab_rdata()
{
  tUInt8 DEF_slave_read_rdataOut_whas____d488;
  tUInt64 DEF_x_wget__h652;
  DEF_x_wget__h652 = INST_slave_read_rdataOut.METH_wget();
  DEF_slave_read_rdataOut_whas____d488 = INST_slave_read_rdataOut.METH_whas();
  PORT_S00_AXI_rdata = DEF_slave_read_rdataOut_whas____d488 ? DEF_x_wget__h652 : 0llu;
  return PORT_S00_AXI_rdata;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_read_fab_rdata()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_rdata;
  DEF_CAN_FIRE_slave_read_fab_rdata = (tUInt8)1u;
  PORT_RDY_S00_AXI_rdata = DEF_CAN_FIRE_slave_read_fab_rdata;
  return PORT_RDY_S00_AXI_rdata;
}

tUInt8 MOD_mkAXIConverter::METH_slave_read_fab_rresp()
{
  tUInt8 DEF_slave_read_rrespOut_whas____d490;
  tUInt8 DEF_slave_read_rrespOut_wget____d491;
  DEF_slave_read_rrespOut_wget____d491 = INST_slave_read_rrespOut.METH_wget();
  DEF_slave_read_rrespOut_whas____d490 = INST_slave_read_rrespOut.METH_whas();
  PORT_S00_AXI_rresp = DEF_slave_read_rrespOut_whas____d490 ? DEF_slave_read_rrespOut_wget____d491 : (tUInt8)0u;
  return PORT_S00_AXI_rresp;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_read_fab_rresp()
{
  tUInt8 DEF_CAN_FIRE_slave_read_fab_rresp;
  DEF_CAN_FIRE_slave_read_fab_rresp = (tUInt8)1u;
  PORT_RDY_S00_AXI_rresp = DEF_CAN_FIRE_slave_read_fab_rresp;
  return PORT_RDY_S00_AXI_rresp;
}

tUInt8 MOD_mkAXIConverter::METH_slave_write_fab_awready()
{
  DEF_slave_write_isRst_isInReset__h891 = INST_slave_write_isRst_isInReset.METH_read();
  DEF_slave_write_addrIn_rv_port0__read____d35 = INST_slave_write_addrIn_rv.METH_port0__read();
  DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37 = !DEF_slave_write_addrIn_rv_port0__read____d35.get_bits_in_word8(2u,
																3u,
																1u);
  DEF_NOT_slave_write_isRst_isInReset_1___d38 = !DEF_slave_write_isRst_isInReset__h891;
  PORT_S00_AXI_awready = DEF_NOT_slave_write_isRst_isInReset_1___d38 && DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37;
  return PORT_S00_AXI_awready;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_write_fab_awready()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_awready;
  DEF_CAN_FIRE_slave_write_fab_awready = (tUInt8)1u;
  PORT_RDY_S00_AXI_awready = DEF_CAN_FIRE_slave_write_fab_awready;
  return PORT_RDY_S00_AXI_awready;
}

void MOD_mkAXIConverter::METH_slave_write_fab_pawvalid(tUInt8 ARG_S00_AXI_awvalid)
{
  if (PORT_RDY_S00_AXI_pawvalid)
    INST_slave_write_awvalidIn.METH_wset(ARG_S00_AXI_awvalid);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_write_fab_pawvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pawvalid;
  DEF_CAN_FIRE_slave_write_fab_pawvalid = (tUInt8)1u;
  PORT_RDY_S00_AXI_pawvalid = DEF_CAN_FIRE_slave_write_fab_pawvalid;
  return PORT_RDY_S00_AXI_pawvalid;
}

void MOD_mkAXIConverter::METH_slave_write_fab_pawaddr(tUInt64 ARG_S00_AXI_awaddr)
{
  if (PORT_RDY_S00_AXI_pawaddr)
    INST_slave_write_awaddrIn.METH_wset(ARG_S00_AXI_awaddr);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_write_fab_pawaddr()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pawaddr;
  DEF_CAN_FIRE_slave_write_fab_pawaddr = (tUInt8)1u;
  PORT_RDY_S00_AXI_pawaddr = DEF_CAN_FIRE_slave_write_fab_pawaddr;
  return PORT_RDY_S00_AXI_pawaddr;
}

void MOD_mkAXIConverter::METH_slave_write_fab_pawprot(tUInt8 ARG_S00_AXI_awprot)
{
  if (PORT_RDY_S00_AXI_pawprot)
    INST_slave_write_awprotIn.METH_wset(ARG_S00_AXI_awprot);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_write_fab_pawprot()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pawprot;
  DEF_CAN_FIRE_slave_write_fab_pawprot = (tUInt8)1u;
  PORT_RDY_S00_AXI_pawprot = DEF_CAN_FIRE_slave_write_fab_pawprot;
  return PORT_RDY_S00_AXI_pawprot;
}

tUInt8 MOD_mkAXIConverter::METH_slave_write_fab_wready()
{
  DEF_slave_write_isRst_isInReset__h891 = INST_slave_write_isRst_isInReset.METH_read();
  DEF_slave_write_dataIn_rv_port0__read____d45 = INST_slave_write_dataIn_rv.METH_port0__read();
  DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47 = !DEF_slave_write_dataIn_rv_port0__read____d45.get_bits_in_word8(2u,
																8u,
																1u);
  DEF_NOT_slave_write_isRst_isInReset_1___d38 = !DEF_slave_write_isRst_isInReset__h891;
  PORT_S00_AXI_wready = DEF_NOT_slave_write_isRst_isInReset_1___d38 && DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47;
  return PORT_S00_AXI_wready;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_write_fab_wready()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_wready;
  DEF_CAN_FIRE_slave_write_fab_wready = (tUInt8)1u;
  PORT_RDY_S00_AXI_wready = DEF_CAN_FIRE_slave_write_fab_wready;
  return PORT_RDY_S00_AXI_wready;
}

void MOD_mkAXIConverter::METH_slave_write_fab_pwvalid(tUInt8 ARG_S00_AXI_wvalid)
{
  if (PORT_RDY_S00_AXI_pwvalid)
    INST_slave_write_wvalidIn.METH_wset(ARG_S00_AXI_wvalid);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_write_fab_pwvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pwvalid;
  DEF_CAN_FIRE_slave_write_fab_pwvalid = (tUInt8)1u;
  PORT_RDY_S00_AXI_pwvalid = DEF_CAN_FIRE_slave_write_fab_pwvalid;
  return PORT_RDY_S00_AXI_pwvalid;
}

void MOD_mkAXIConverter::METH_slave_write_fab_pwdata(tUInt64 ARG_S00_AXI_wdata)
{
  if (PORT_RDY_S00_AXI_pwdata)
    INST_slave_write_wdataIn.METH_wset(ARG_S00_AXI_wdata);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_write_fab_pwdata()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pwdata;
  DEF_CAN_FIRE_slave_write_fab_pwdata = (tUInt8)1u;
  PORT_RDY_S00_AXI_pwdata = DEF_CAN_FIRE_slave_write_fab_pwdata;
  return PORT_RDY_S00_AXI_pwdata;
}

void MOD_mkAXIConverter::METH_slave_write_fab_pwstrb(tUInt8 ARG_S00_AXI_wstrb)
{
  if (PORT_RDY_S00_AXI_pwstrb)
    INST_slave_write_wstrbIn.METH_wset(ARG_S00_AXI_wstrb);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_write_fab_pwstrb()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pwstrb;
  DEF_CAN_FIRE_slave_write_fab_pwstrb = (tUInt8)1u;
  PORT_RDY_S00_AXI_pwstrb = DEF_CAN_FIRE_slave_write_fab_pwstrb;
  return PORT_RDY_S00_AXI_pwstrb;
}

tUInt8 MOD_mkAXIConverter::METH_slave_write_fab_bvalid()
{
  DEF_slave_write_isRst_isInReset__h891 = INST_slave_write_isRst_isInReset.METH_read();
  DEF_slave_write_out_notEmpty____d57 = INST_slave_write_out.METH_notEmpty();
  DEF_NOT_slave_write_isRst_isInReset_1___d38 = !DEF_slave_write_isRst_isInReset__h891;
  PORT_S00_AXI_bvalid = DEF_NOT_slave_write_isRst_isInReset_1___d38 && DEF_slave_write_out_notEmpty____d57;
  return PORT_S00_AXI_bvalid;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_write_fab_bvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_bvalid;
  DEF_CAN_FIRE_slave_write_fab_bvalid = (tUInt8)1u;
  PORT_RDY_S00_AXI_bvalid = DEF_CAN_FIRE_slave_write_fab_bvalid;
  return PORT_RDY_S00_AXI_bvalid;
}

void MOD_mkAXIConverter::METH_slave_write_fab_pbready(tUInt8 ARG_S00_AXI_bready)
{
  if (PORT_RDY_S00_AXI_pbready)
    INST_slave_write_breadyIn.METH_wset(ARG_S00_AXI_bready);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_write_fab_pbready()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_pbready;
  DEF_CAN_FIRE_slave_write_fab_pbready = (tUInt8)1u;
  PORT_RDY_S00_AXI_pbready = DEF_CAN_FIRE_slave_write_fab_pbready;
  return PORT_RDY_S00_AXI_pbready;
}

tUInt8 MOD_mkAXIConverter::METH_slave_write_fab_bresp()
{
  tUInt8 DEF_slave_write_brespOut_whas____d492;
  tUInt8 DEF_slave_write_brespOut_wget____d493;
  DEF_slave_write_brespOut_wget____d493 = INST_slave_write_brespOut.METH_wget();
  DEF_slave_write_brespOut_whas____d492 = INST_slave_write_brespOut.METH_whas();
  PORT_S00_AXI_bresp = DEF_slave_write_brespOut_whas____d492 ? DEF_slave_write_brespOut_wget____d493 : (tUInt8)0u;
  return PORT_S00_AXI_bresp;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_slave_write_fab_bresp()
{
  tUInt8 DEF_CAN_FIRE_slave_write_fab_bresp;
  DEF_CAN_FIRE_slave_write_fab_bresp = (tUInt8)1u;
  PORT_RDY_S00_AXI_bresp = DEF_CAN_FIRE_slave_write_fab_bresp;
  return PORT_RDY_S00_AXI_bresp;
}

tUInt8 MOD_mkAXIConverter::METH_master_read_fab_arvalid()
{
  DEF_master_read_isRst_isInReset__h2640 = INST_master_read_isRst_isInReset.METH_read();
  DEF_master_read_in_notEmpty____d66 = INST_master_read_in.METH_notEmpty();
  DEF_NOT_master_read_isRst_isInReset_1___d63 = !DEF_master_read_isRst_isInReset__h2640;
  PORT_M00_AXI_arvalid = DEF_NOT_master_read_isRst_isInReset_1___d63 && DEF_master_read_in_notEmpty____d66;
  return PORT_M00_AXI_arvalid;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_read_fab_arvalid()
{
  tUInt8 DEF_CAN_FIRE_master_read_fab_arvalid;
  DEF_CAN_FIRE_master_read_fab_arvalid = (tUInt8)1u;
  PORT_RDY_M00_AXI_arvalid = DEF_CAN_FIRE_master_read_fab_arvalid;
  return PORT_RDY_M00_AXI_arvalid;
}

void MOD_mkAXIConverter::METH_master_read_fab_parready(tUInt8 ARG_M00_AXI_arready)
{
  if (PORT_RDY_M00_AXI_parready)
    INST_master_read_arreadyIn.METH_wset(ARG_M00_AXI_arready);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_read_fab_parready()
{
  tUInt8 DEF_CAN_FIRE_master_read_fab_parready;
  DEF_CAN_FIRE_master_read_fab_parready = (tUInt8)1u;
  PORT_RDY_M00_AXI_parready = DEF_CAN_FIRE_master_read_fab_parready;
  return PORT_RDY_M00_AXI_parready;
}

tUInt64 MOD_mkAXIConverter::METH_master_read_fab_araddr()
{
  tUInt8 DEF_master_read_araddrOut_whas____d494;
  tUInt64 DEF_x_wget__h2981;
  DEF_x_wget__h2981 = INST_master_read_araddrOut.METH_wget();
  DEF_master_read_araddrOut_whas____d494 = INST_master_read_araddrOut.METH_whas();
  PORT_M00_AXI_araddr = DEF_master_read_araddrOut_whas____d494 ? DEF_x_wget__h2981 : 0llu;
  return PORT_M00_AXI_araddr;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_read_fab_araddr()
{
  tUInt8 DEF_CAN_FIRE_master_read_fab_araddr;
  DEF_CAN_FIRE_master_read_fab_araddr = (tUInt8)1u;
  PORT_RDY_M00_AXI_araddr = DEF_CAN_FIRE_master_read_fab_araddr;
  return PORT_RDY_M00_AXI_araddr;
}

tUInt8 MOD_mkAXIConverter::METH_master_read_fab_arprot()
{
  tUInt8 DEF_master_read_arprotOut_whas____d496;
  tUInt8 DEF_master_read_arprotOut_wget____d497;
  DEF_master_read_arprotOut_wget____d497 = INST_master_read_arprotOut.METH_wget();
  DEF_master_read_arprotOut_whas____d496 = INST_master_read_arprotOut.METH_whas();
  PORT_M00_AXI_arprot = DEF_master_read_arprotOut_whas____d496 ? DEF_master_read_arprotOut_wget____d497 : (tUInt8)0u;
  return PORT_M00_AXI_arprot;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_read_fab_arprot()
{
  tUInt8 DEF_CAN_FIRE_master_read_fab_arprot;
  DEF_CAN_FIRE_master_read_fab_arprot = (tUInt8)1u;
  PORT_RDY_M00_AXI_arprot = DEF_CAN_FIRE_master_read_fab_arprot;
  return PORT_RDY_M00_AXI_arprot;
}

tUInt8 MOD_mkAXIConverter::METH_master_read_fab_rready()
{
  DEF_master_read_isRst_isInReset__h2640 = INST_master_read_isRst_isInReset.METH_read();
  DEF_master_read_out_notFull____d75 = INST_master_read_out.METH_notFull();
  DEF_NOT_master_read_isRst_isInReset_1___d63 = !DEF_master_read_isRst_isInReset__h2640;
  PORT_M00_AXI_rready = DEF_NOT_master_read_isRst_isInReset_1___d63 && DEF_master_read_out_notFull____d75;
  return PORT_M00_AXI_rready;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_read_fab_rready()
{
  tUInt8 DEF_CAN_FIRE_master_read_fab_rready;
  DEF_CAN_FIRE_master_read_fab_rready = (tUInt8)1u;
  PORT_RDY_M00_AXI_rready = DEF_CAN_FIRE_master_read_fab_rready;
  return PORT_RDY_M00_AXI_rready;
}

void MOD_mkAXIConverter::METH_master_read_fab_prvalid(tUInt8 ARG_M00_AXI_rvalid)
{
  if (PORT_RDY_M00_AXI_prvalid)
    INST_master_read_rvalidIn.METH_wset(ARG_M00_AXI_rvalid);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_read_fab_prvalid()
{
  tUInt8 DEF_CAN_FIRE_master_read_fab_prvalid;
  DEF_CAN_FIRE_master_read_fab_prvalid = (tUInt8)1u;
  PORT_RDY_M00_AXI_prvalid = DEF_CAN_FIRE_master_read_fab_prvalid;
  return PORT_RDY_M00_AXI_prvalid;
}

void MOD_mkAXIConverter::METH_master_read_fab_prdata(tUInt64 ARG_M00_AXI_rdata)
{
  if (PORT_RDY_M00_AXI_prdata)
    INST_master_read_rdataIn.METH_wset(ARG_M00_AXI_rdata);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_read_fab_prdata()
{
  tUInt8 DEF_CAN_FIRE_master_read_fab_prdata;
  DEF_CAN_FIRE_master_read_fab_prdata = (tUInt8)1u;
  PORT_RDY_M00_AXI_prdata = DEF_CAN_FIRE_master_read_fab_prdata;
  return PORT_RDY_M00_AXI_prdata;
}

void MOD_mkAXIConverter::METH_master_read_fab_prresp(tUInt8 ARG_M00_AXI_rresp)
{
  if (PORT_RDY_M00_AXI_prresp)
    INST_master_read_rrespIn.METH_wset(ARG_M00_AXI_rresp);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_read_fab_prresp()
{
  tUInt8 DEF_CAN_FIRE_master_read_fab_prresp;
  DEF_CAN_FIRE_master_read_fab_prresp = (tUInt8)1u;
  PORT_RDY_M00_AXI_prresp = DEF_CAN_FIRE_master_read_fab_prresp;
  return PORT_RDY_M00_AXI_prresp;
}

void MOD_mkAXIConverter::METH_master_write_fab_pawready(tUInt8 ARG_M00_AXI_awready)
{
  if (PORT_RDY_M00_AXI_pawready)
    INST_master_write_awreadyIn.METH_wset(ARG_M00_AXI_awready);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_write_fab_pawready()
{
  tUInt8 DEF_CAN_FIRE_master_write_fab_pawready;
  DEF_CAN_FIRE_master_write_fab_pawready = (tUInt8)1u;
  PORT_RDY_M00_AXI_pawready = DEF_CAN_FIRE_master_write_fab_pawready;
  return PORT_RDY_M00_AXI_pawready;
}

tUInt8 MOD_mkAXIConverter::METH_master_write_fab_awvalid()
{
  DEF_master_write_isRst_isInReset__h3416 = INST_master_write_isRst_isInReset.METH_read();
  DEF_master_write_addrOut_rv_port1__read____d97 = INST_master_write_addrOut_rv.METH_port1__read();
  DEF_master_write_addrOut_rv_port1__read__7_BIT_67___d98 = DEF_master_write_addrOut_rv_port1__read____d97.get_bits_in_word8(2u,
															     3u,
															     1u);
  DEF_NOT_master_write_isRst_isInReset_1___d99 = !DEF_master_write_isRst_isInReset__h3416;
  PORT_M00_AXI_awvalid = DEF_NOT_master_write_isRst_isInReset_1___d99 && DEF_master_write_addrOut_rv_port1__read__7_BIT_67___d98;
  return PORT_M00_AXI_awvalid;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_write_fab_awvalid()
{
  tUInt8 DEF_CAN_FIRE_master_write_fab_awvalid;
  DEF_CAN_FIRE_master_write_fab_awvalid = (tUInt8)1u;
  PORT_RDY_M00_AXI_awvalid = DEF_CAN_FIRE_master_write_fab_awvalid;
  return PORT_RDY_M00_AXI_awvalid;
}

tUInt64 MOD_mkAXIConverter::METH_master_write_fab_awaddr()
{
  tUInt8 DEF_master_write_awaddrOut_whas____d498;
  tUInt64 DEF_x_wget__h4448;
  DEF_x_wget__h4448 = INST_master_write_awaddrOut.METH_wget();
  DEF_master_write_awaddrOut_whas____d498 = INST_master_write_awaddrOut.METH_whas();
  PORT_M00_AXI_awaddr = DEF_master_write_awaddrOut_whas____d498 ? DEF_x_wget__h4448 : 0llu;
  return PORT_M00_AXI_awaddr;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_write_fab_awaddr()
{
  tUInt8 DEF_CAN_FIRE_master_write_fab_awaddr;
  DEF_CAN_FIRE_master_write_fab_awaddr = (tUInt8)1u;
  PORT_RDY_M00_AXI_awaddr = DEF_CAN_FIRE_master_write_fab_awaddr;
  return PORT_RDY_M00_AXI_awaddr;
}

tUInt8 MOD_mkAXIConverter::METH_master_write_fab_awprot()
{
  tUInt8 DEF_master_write_awprotOut_whas____d500;
  tUInt8 DEF_master_write_awprotOut_wget____d501;
  DEF_master_write_awprotOut_wget____d501 = INST_master_write_awprotOut.METH_wget();
  DEF_master_write_awprotOut_whas____d500 = INST_master_write_awprotOut.METH_whas();
  PORT_M00_AXI_awprot = DEF_master_write_awprotOut_whas____d500 ? DEF_master_write_awprotOut_wget____d501 : (tUInt8)0u;
  return PORT_M00_AXI_awprot;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_write_fab_awprot()
{
  tUInt8 DEF_CAN_FIRE_master_write_fab_awprot;
  DEF_CAN_FIRE_master_write_fab_awprot = (tUInt8)1u;
  PORT_RDY_M00_AXI_awprot = DEF_CAN_FIRE_master_write_fab_awprot;
  return PORT_RDY_M00_AXI_awprot;
}

void MOD_mkAXIConverter::METH_master_write_fab_pwready(tUInt8 ARG_M00_AXI_wready)
{
  if (PORT_RDY_M00_AXI_pwready)
    INST_master_write_wreadyIn.METH_wset(ARG_M00_AXI_wready);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_write_fab_pwready()
{
  tUInt8 DEF_CAN_FIRE_master_write_fab_pwready;
  DEF_CAN_FIRE_master_write_fab_pwready = (tUInt8)1u;
  PORT_RDY_M00_AXI_pwready = DEF_CAN_FIRE_master_write_fab_pwready;
  return PORT_RDY_M00_AXI_pwready;
}

tUInt8 MOD_mkAXIConverter::METH_master_write_fab_wvalid()
{
  DEF_master_write_isRst_isInReset__h3416 = INST_master_write_isRst_isInReset.METH_read();
  DEF_master_write_dataOut_rv_port1__read____d105 = INST_master_write_dataOut_rv.METH_port1__read();
  DEF_master_write_dataOut_rv_port1__read__05_BIT_72___d106 = DEF_master_write_dataOut_rv_port1__read____d105.get_bits_in_word8(2u,
																8u,
																1u);
  DEF_NOT_master_write_isRst_isInReset_1___d99 = !DEF_master_write_isRst_isInReset__h3416;
  PORT_M00_AXI_wvalid = DEF_NOT_master_write_isRst_isInReset_1___d99 && DEF_master_write_dataOut_rv_port1__read__05_BIT_72___d106;
  return PORT_M00_AXI_wvalid;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_write_fab_wvalid()
{
  tUInt8 DEF_CAN_FIRE_master_write_fab_wvalid;
  DEF_CAN_FIRE_master_write_fab_wvalid = (tUInt8)1u;
  PORT_RDY_M00_AXI_wvalid = DEF_CAN_FIRE_master_write_fab_wvalid;
  return PORT_RDY_M00_AXI_wvalid;
}

tUInt64 MOD_mkAXIConverter::METH_master_write_fab_wdata()
{
  tUInt8 DEF_master_write_wdataOut_whas____d502;
  tUInt64 DEF_x_wget__h4803;
  DEF_x_wget__h4803 = INST_master_write_wdataOut.METH_wget();
  DEF_master_write_wdataOut_whas____d502 = INST_master_write_wdataOut.METH_whas();
  PORT_M00_AXI_wdata = DEF_master_write_wdataOut_whas____d502 ? DEF_x_wget__h4803 : 0llu;
  return PORT_M00_AXI_wdata;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_write_fab_wdata()
{
  tUInt8 DEF_CAN_FIRE_master_write_fab_wdata;
  DEF_CAN_FIRE_master_write_fab_wdata = (tUInt8)1u;
  PORT_RDY_M00_AXI_wdata = DEF_CAN_FIRE_master_write_fab_wdata;
  return PORT_RDY_M00_AXI_wdata;
}

tUInt8 MOD_mkAXIConverter::METH_master_write_fab_wstrb()
{
  tUInt8 DEF_master_write_wstrbOut_whas____d504;
  tUInt8 DEF_x_wget__h4875;
  DEF_x_wget__h4875 = INST_master_write_wstrbOut.METH_wget();
  DEF_master_write_wstrbOut_whas____d504 = INST_master_write_wstrbOut.METH_whas();
  PORT_M00_AXI_wstrb = DEF_master_write_wstrbOut_whas____d504 ? DEF_x_wget__h4875 : (tUInt8)0u;
  return PORT_M00_AXI_wstrb;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_write_fab_wstrb()
{
  tUInt8 DEF_CAN_FIRE_master_write_fab_wstrb;
  DEF_CAN_FIRE_master_write_fab_wstrb = (tUInt8)1u;
  PORT_RDY_M00_AXI_wstrb = DEF_CAN_FIRE_master_write_fab_wstrb;
  return PORT_RDY_M00_AXI_wstrb;
}

void MOD_mkAXIConverter::METH_master_write_fab_pbvalid(tUInt8 ARG_M00_AXI_bvalid)
{
  if (PORT_RDY_M00_AXI_pbvalid)
    INST_master_write_bvalidIn.METH_wset(ARG_M00_AXI_bvalid);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_write_fab_pbvalid()
{
  tUInt8 DEF_CAN_FIRE_master_write_fab_pbvalid;
  DEF_CAN_FIRE_master_write_fab_pbvalid = (tUInt8)1u;
  PORT_RDY_M00_AXI_pbvalid = DEF_CAN_FIRE_master_write_fab_pbvalid;
  return PORT_RDY_M00_AXI_pbvalid;
}

tUInt8 MOD_mkAXIConverter::METH_master_write_fab_bready()
{
  DEF_master_write_isRst_isInReset__h3416 = INST_master_write_isRst_isInReset.METH_read();
  DEF_master_write_out_notFull____d115 = INST_master_write_out.METH_notFull();
  DEF_NOT_master_write_isRst_isInReset_1___d99 = !DEF_master_write_isRst_isInReset__h3416;
  PORT_M00_AXI_bready = DEF_NOT_master_write_isRst_isInReset_1___d99 && DEF_master_write_out_notFull____d115;
  return PORT_M00_AXI_bready;
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_write_fab_bready()
{
  tUInt8 DEF_CAN_FIRE_master_write_fab_bready;
  DEF_CAN_FIRE_master_write_fab_bready = (tUInt8)1u;
  PORT_RDY_M00_AXI_bready = DEF_CAN_FIRE_master_write_fab_bready;
  return PORT_RDY_M00_AXI_bready;
}

void MOD_mkAXIConverter::METH_master_write_fab_pbresp(tUInt8 ARG_M00_AXI_bresp)
{
  if (PORT_RDY_M00_AXI_pbresp)
    INST_master_write_brespIn.METH_wset(ARG_M00_AXI_bresp);
}

tUInt8 MOD_mkAXIConverter::METH_RDY_master_write_fab_pbresp()
{
  tUInt8 DEF_CAN_FIRE_master_write_fab_pbresp;
  DEF_CAN_FIRE_master_write_fab_pbresp = (tUInt8)1u;
  PORT_RDY_M00_AXI_pbresp = DEF_CAN_FIRE_master_write_fab_pbresp;
  return PORT_RDY_M00_AXI_pbresp;
}


/* Reset routines */

void MOD_mkAXIConverter::reset_aresetn(tUInt8 ARG_rst_in)
{
  PORT_aresetn = ARG_rst_in;
  INST_window_Initial.reset_RST(ARG_rst_in);
  INST_windowSlide.reset_RST(ARG_rst_in);
  INST_windowReady.reset_RST(ARG_rst_in);
  INST_windowBuffer_once_inital.reset_RST(ARG_rst_in);
  INST_threshold.reset_RST(ARG_rst_in);
  INST_testslideWindow_count.reset_RST(ARG_rst_in);
  INST_testslideWindow_control.reset_RST(ARG_rst_in);
  INST_testslideWindow.reset_RST(ARG_rst_in);
  INST_sum_2.reset_RST(ARG_rst_in);
  INST_sum_12.reset_RST(ARG_rst_in);
  INST_sum_1.reset_RST(ARG_rst_in);
  INST_sum2Buffer.reset_RST(ARG_rst_in);
  INST_sum1Buffer.reset_RST(ARG_rst_in);
  INST_state_temp.reset_RST(ARG_rst_in);
  INST_state_64.reset_RST(ARG_rst_in);
  INST_start_write_request.reset_RST(ARG_rst_in);
  INST_start.reset_RST(ARG_rst_in);
  INST_sobelState.reset_RST(ARG_rst_in);
  INST_sobelConvert.reset_RST(ARG_rst_in);
  INST_slide_position.reset_RST(ARG_rst_in);
  INST_slide_finish.reset_RST(ARG_rst_in);
  INST_slide.reset_RST(ARG_rst_in);
  INST_slave_write_out.reset_RST(ARG_rst_in);
  INST_slave_write_isRst_isInReset.reset_RST(ARG_rst_in);
  INST_slave_write_in.reset_RST(ARG_rst_in);
  INST_slave_write_dataIn_rv.reset_RST(ARG_rst_in);
  INST_slave_write_addrIn_rv.reset_RST(ARG_rst_in);
  INST_slave_read_out.reset_RST(ARG_rst_in);
  INST_slave_read_isRst_isInReset.reset_RST(ARG_rst_in);
  INST_slave_read_in.reset_RST(ARG_rst_in);
  INST_rowBuffer_inital.reset_RST(ARG_rst_in);
  INST_rowBuffer_2.reset_RST(ARG_rst_in);
  INST_rowBuffer_1.reset_RST(ARG_rst_in);
  INST_reg33.reset_RST(ARG_rst_in);
  INST_reg32.reset_RST(ARG_rst_in);
  INST_reg31.reset_RST(ARG_rst_in);
  INST_reg23.reset_RST(ARG_rst_in);
  INST_reg22.reset_RST(ARG_rst_in);
  INST_reg21.reset_RST(ARG_rst_in);
  INST_reg13.reset_RST(ARG_rst_in);
  INST_reg12.reset_RST(ARG_rst_in);
  INST_reg11.reset_RST(ARG_rst_in);
  INST_out_hold.reset_RST(ARG_rst_in);
  INST_out_count.reset_RST(ARG_rst_in);
  INST_outPixel.reset_RST(ARG_rst_in);
  INST_master_write_out.reset_RST(ARG_rst_in);
  INST_master_write_isRst_isInReset.reset_RST(ARG_rst_in);
  INST_master_write_in.reset_RST(ARG_rst_in);
  INST_master_write_dataOut_rv.reset_RST(ARG_rst_in);
  INST_master_write_addrOut_rv.reset_RST(ARG_rst_in);
  INST_master_read_out.reset_RST(ARG_rst_in);
  INST_master_read_isRst_isInReset.reset_RST(ARG_rst_in);
  INST_master_read_in.reset_RST(ARG_rst_in);
  INST_kernel_size.reset_RST(ARG_rst_in);
  INST_image_size.reset_RST(ARG_rst_in);
  INST_image_length.reset_RST(ARG_rst_in);
  INST_gy_reg33.reset_RST(ARG_rst_in);
  INST_gy_reg32.reset_RST(ARG_rst_in);
  INST_gy_reg31.reset_RST(ARG_rst_in);
  INST_gy_reg23.reset_RST(ARG_rst_in);
  INST_gy_reg22.reset_RST(ARG_rst_in);
  INST_gy_reg21.reset_RST(ARG_rst_in);
  INST_gy_reg13.reset_RST(ARG_rst_in);
  INST_gy_reg12.reset_RST(ARG_rst_in);
  INST_gy_reg11.reset_RST(ARG_rst_in);
  INST_gx_reg33.reset_RST(ARG_rst_in);
  INST_gx_reg32.reset_RST(ARG_rst_in);
  INST_gx_reg31.reset_RST(ARG_rst_in);
  INST_gx_reg23.reset_RST(ARG_rst_in);
  INST_gx_reg22.reset_RST(ARG_rst_in);
  INST_gx_reg21.reset_RST(ARG_rst_in);
  INST_gx_reg13.reset_RST(ARG_rst_in);
  INST_gx_reg12.reset_RST(ARG_rst_in);
  INST_gx_reg11.reset_RST(ARG_rst_in);
  INST_gray_data.reset_RST(ARG_rst_in);
  INST_enq_order.reset_RST(ARG_rst_in);
  INST_ddr_write_count.reset_RST(ARG_rst_in);
  INST_ddr_read_count.reset_RST(ARG_rst_in);
  INST_converting_flag.reset_RST(ARG_rst_in);
  INST_conversion_finished.reset_RST(ARG_rst_in);
  INST_buffer_out.reset_RST(ARG_rst_in);
  INST_buffer_8bit.reset_RST(ARG_rst_in);
  INST_bufferRowCount.reset_RST(ARG_rst_in);
  INST_buffer.reset_RST(ARG_rst_in);
  INST_address_image_2.reset_RST(ARG_rst_in);
  INST_address_image_1.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkAXIConverter::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkAXIConverter::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_address_image_1.dump_state(indent + 2u);
  INST_address_image_2.dump_state(indent + 2u);
  INST_buffer.dump_state(indent + 2u);
  INST_bufferRowCount.dump_state(indent + 2u);
  INST_buffer_8bit.dump_state(indent + 2u);
  INST_buffer_out.dump_state(indent + 2u);
  INST_conversion_finished.dump_state(indent + 2u);
  INST_converting_flag.dump_state(indent + 2u);
  INST_ddr_read_count.dump_state(indent + 2u);
  INST_ddr_write_count.dump_state(indent + 2u);
  INST_enq_order.dump_state(indent + 2u);
  INST_gray_data.dump_state(indent + 2u);
  INST_gx_reg11.dump_state(indent + 2u);
  INST_gx_reg12.dump_state(indent + 2u);
  INST_gx_reg13.dump_state(indent + 2u);
  INST_gx_reg21.dump_state(indent + 2u);
  INST_gx_reg22.dump_state(indent + 2u);
  INST_gx_reg23.dump_state(indent + 2u);
  INST_gx_reg31.dump_state(indent + 2u);
  INST_gx_reg32.dump_state(indent + 2u);
  INST_gx_reg33.dump_state(indent + 2u);
  INST_gy_reg11.dump_state(indent + 2u);
  INST_gy_reg12.dump_state(indent + 2u);
  INST_gy_reg13.dump_state(indent + 2u);
  INST_gy_reg21.dump_state(indent + 2u);
  INST_gy_reg22.dump_state(indent + 2u);
  INST_gy_reg23.dump_state(indent + 2u);
  INST_gy_reg31.dump_state(indent + 2u);
  INST_gy_reg32.dump_state(indent + 2u);
  INST_gy_reg33.dump_state(indent + 2u);
  INST_image_length.dump_state(indent + 2u);
  INST_image_size.dump_state(indent + 2u);
  INST_kernel_size.dump_state(indent + 2u);
  INST_master_read_araddrOut.dump_state(indent + 2u);
  INST_master_read_arprotOut.dump_state(indent + 2u);
  INST_master_read_arreadyIn.dump_state(indent + 2u);
  INST_master_read_in.dump_state(indent + 2u);
  INST_master_read_isRst_isInReset.dump_state(indent + 2u);
  INST_master_read_out.dump_state(indent + 2u);
  INST_master_read_rdataIn.dump_state(indent + 2u);
  INST_master_read_rrespIn.dump_state(indent + 2u);
  INST_master_read_rvalidIn.dump_state(indent + 2u);
  INST_master_write_addrOut_rv.dump_state(indent + 2u);
  INST_master_write_awaddrOut.dump_state(indent + 2u);
  INST_master_write_awprotOut.dump_state(indent + 2u);
  INST_master_write_awreadyIn.dump_state(indent + 2u);
  INST_master_write_brespIn.dump_state(indent + 2u);
  INST_master_write_bvalidIn.dump_state(indent + 2u);
  INST_master_write_dataOut_rv.dump_state(indent + 2u);
  INST_master_write_in.dump_state(indent + 2u);
  INST_master_write_isRst_isInReset.dump_state(indent + 2u);
  INST_master_write_out.dump_state(indent + 2u);
  INST_master_write_wdataOut.dump_state(indent + 2u);
  INST_master_write_wreadyIn.dump_state(indent + 2u);
  INST_master_write_wstrbOut.dump_state(indent + 2u);
  INST_outPixel.dump_state(indent + 2u);
  INST_out_count.dump_state(indent + 2u);
  INST_out_hold.dump_state(indent + 2u);
  INST_reg11.dump_state(indent + 2u);
  INST_reg12.dump_state(indent + 2u);
  INST_reg13.dump_state(indent + 2u);
  INST_reg21.dump_state(indent + 2u);
  INST_reg22.dump_state(indent + 2u);
  INST_reg23.dump_state(indent + 2u);
  INST_reg31.dump_state(indent + 2u);
  INST_reg32.dump_state(indent + 2u);
  INST_reg33.dump_state(indent + 2u);
  INST_rowBuffer_1.dump_state(indent + 2u);
  INST_rowBuffer_2.dump_state(indent + 2u);
  INST_rowBuffer_inital.dump_state(indent + 2u);
  INST_slave_read_araddrIn.dump_state(indent + 2u);
  INST_slave_read_arprotIn.dump_state(indent + 2u);
  INST_slave_read_arvalidIn.dump_state(indent + 2u);
  INST_slave_read_in.dump_state(indent + 2u);
  INST_slave_read_isRst_isInReset.dump_state(indent + 2u);
  INST_slave_read_out.dump_state(indent + 2u);
  INST_slave_read_rdataOut.dump_state(indent + 2u);
  INST_slave_read_rreadyIn.dump_state(indent + 2u);
  INST_slave_read_rrespOut.dump_state(indent + 2u);
  INST_slave_write_addrIn_rv.dump_state(indent + 2u);
  INST_slave_write_awaddrIn.dump_state(indent + 2u);
  INST_slave_write_awprotIn.dump_state(indent + 2u);
  INST_slave_write_awvalidIn.dump_state(indent + 2u);
  INST_slave_write_breadyIn.dump_state(indent + 2u);
  INST_slave_write_brespOut.dump_state(indent + 2u);
  INST_slave_write_dataIn_rv.dump_state(indent + 2u);
  INST_slave_write_in.dump_state(indent + 2u);
  INST_slave_write_isRst_isInReset.dump_state(indent + 2u);
  INST_slave_write_out.dump_state(indent + 2u);
  INST_slave_write_wdataIn.dump_state(indent + 2u);
  INST_slave_write_wstrbIn.dump_state(indent + 2u);
  INST_slave_write_wvalidIn.dump_state(indent + 2u);
  INST_slide.dump_state(indent + 2u);
  INST_slide_finish.dump_state(indent + 2u);
  INST_slide_position.dump_state(indent + 2u);
  INST_sobelConvert.dump_state(indent + 2u);
  INST_sobelState.dump_state(indent + 2u);
  INST_start.dump_state(indent + 2u);
  INST_start_write_request.dump_state(indent + 2u);
  INST_state_64.dump_state(indent + 2u);
  INST_state_temp.dump_state(indent + 2u);
  INST_sum1Buffer.dump_state(indent + 2u);
  INST_sum2Buffer.dump_state(indent + 2u);
  INST_sum_1.dump_state(indent + 2u);
  INST_sum_12.dump_state(indent + 2u);
  INST_sum_2.dump_state(indent + 2u);
  INST_testslideWindow.dump_state(indent + 2u);
  INST_testslideWindow_control.dump_state(indent + 2u);
  INST_testslideWindow_count.dump_state(indent + 2u);
  INST_threshold.dump_state(indent + 2u);
  INST_windowBuffer_once_inital.dump_state(indent + 2u);
  INST_windowReady.dump_state(indent + 2u);
  INST_windowSlide.dump_state(indent + 2u);
  INST_window_Initial.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkAXIConverter::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 241u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "aclk", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_master_read_isRst_isInReset_1___d63", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_master_write_isRst_isInReset_1___d99", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_slave_read_isRst_isInReset___d3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_slave_write_isRst_isInReset_1___d38", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_DONTCARE___d29", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_DONTCARE___d30", 73u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96", 73u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53", 73u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167", 67u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483", 139u);
  vcd_write_def(sim_hdl, num++, "aresetn", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h10373", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h10381", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h10389", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h10397", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h10405", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h10413", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h10421", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h10429", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_read_in_first____d69", 67u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_read_in_notEmpty____d66", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_read_isRst_isInReset__h2640", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_read_out_first____d174", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_read_out_notFull____d75", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_write_addrOut_rv_port0__read____d83", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_write_addrOut_rv_port1__read__7_BIT_67___d98", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_write_addrOut_rv_port1__read____d97", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_write_dataOut_rv_port0__read____d86", 73u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_write_dataOut_rv_port1__read__05_BIT_72___d106", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_write_dataOut_rv_port1__read____d105", 73u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_write_in_first__1_BITS_74_TO_3___d95", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_write_in_first____d91", 139u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_write_isRst_isInReset__h3416", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "master_write_out_notFull____d115", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11", 67u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_read_in_first____d122", 67u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_read_in_notFull____d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_read_isRst_isInReset__h102", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_read_out_first____d18", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_read_out_notEmpty____d15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_addrIn_rv_port0__read____d35", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34", 139u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_addrIn_rv_port1__read____d22", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_dataIn_rv_port0__read____d45", 73u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_dataIn_rv_port1__read____d24", 73u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_in_first____d149", 139u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_isRst_isInReset__h891", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_write_out_notEmpty____d57", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "sum_12__h11198", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "sum_1__h10674", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "sum_2__h10762", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h11235", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h11419", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h11479", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h12354", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h6470", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h6476", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h6524", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h8782", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h9219", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h9256", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h11480", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h11482", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "M00_AXI_araddr", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "M00_AXI_arprot", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "M00_AXI_arvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "M00_AXI_awaddr", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "M00_AXI_awprot", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "M00_AXI_awvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "M00_AXI_bready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "M00_AXI_rready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "M00_AXI_wdata", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "M00_AXI_wstrb", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "M00_AXI_wvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_araddr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_arprot", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_arvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_awaddr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_awprot", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_awvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_bready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_parready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_pawready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_pbresp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_pbvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_prdata", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_prresp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_prvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_pwready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_rready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_wdata", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_wstrb", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_M00_AXI_wvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_arready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_awready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_bresp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_bvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_paraddr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_parprot", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_parvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pawaddr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pawprot", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pawvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pbready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_prready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pwdata", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pwstrb", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_pwvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_rdata", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_rresp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_rvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_S00_AXI_wready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_arready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_awready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_bresp", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_bvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_rdata", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_rresp", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_rvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "S00_AXI_wready", 1u);
  num = INST_address_image_1.dump_VCD_defs(num);
  num = INST_address_image_2.dump_VCD_defs(num);
  num = INST_buffer.dump_VCD_defs(num);
  num = INST_bufferRowCount.dump_VCD_defs(num);
  num = INST_buffer_8bit.dump_VCD_defs(num);
  num = INST_buffer_out.dump_VCD_defs(num);
  num = INST_conversion_finished.dump_VCD_defs(num);
  num = INST_converting_flag.dump_VCD_defs(num);
  num = INST_ddr_read_count.dump_VCD_defs(num);
  num = INST_ddr_write_count.dump_VCD_defs(num);
  num = INST_enq_order.dump_VCD_defs(num);
  num = INST_gray_data.dump_VCD_defs(num);
  num = INST_gx_reg11.dump_VCD_defs(num);
  num = INST_gx_reg12.dump_VCD_defs(num);
  num = INST_gx_reg13.dump_VCD_defs(num);
  num = INST_gx_reg21.dump_VCD_defs(num);
  num = INST_gx_reg22.dump_VCD_defs(num);
  num = INST_gx_reg23.dump_VCD_defs(num);
  num = INST_gx_reg31.dump_VCD_defs(num);
  num = INST_gx_reg32.dump_VCD_defs(num);
  num = INST_gx_reg33.dump_VCD_defs(num);
  num = INST_gy_reg11.dump_VCD_defs(num);
  num = INST_gy_reg12.dump_VCD_defs(num);
  num = INST_gy_reg13.dump_VCD_defs(num);
  num = INST_gy_reg21.dump_VCD_defs(num);
  num = INST_gy_reg22.dump_VCD_defs(num);
  num = INST_gy_reg23.dump_VCD_defs(num);
  num = INST_gy_reg31.dump_VCD_defs(num);
  num = INST_gy_reg32.dump_VCD_defs(num);
  num = INST_gy_reg33.dump_VCD_defs(num);
  num = INST_image_length.dump_VCD_defs(num);
  num = INST_image_size.dump_VCD_defs(num);
  num = INST_kernel_size.dump_VCD_defs(num);
  num = INST_master_read_araddrOut.dump_VCD_defs(num);
  num = INST_master_read_arprotOut.dump_VCD_defs(num);
  num = INST_master_read_arreadyIn.dump_VCD_defs(num);
  num = INST_master_read_in.dump_VCD_defs(num);
  num = INST_master_read_isRst_isInReset.dump_VCD_defs(num);
  num = INST_master_read_out.dump_VCD_defs(num);
  num = INST_master_read_rdataIn.dump_VCD_defs(num);
  num = INST_master_read_rrespIn.dump_VCD_defs(num);
  num = INST_master_read_rvalidIn.dump_VCD_defs(num);
  num = INST_master_write_addrOut_rv.dump_VCD_defs(num);
  num = INST_master_write_awaddrOut.dump_VCD_defs(num);
  num = INST_master_write_awprotOut.dump_VCD_defs(num);
  num = INST_master_write_awreadyIn.dump_VCD_defs(num);
  num = INST_master_write_brespIn.dump_VCD_defs(num);
  num = INST_master_write_bvalidIn.dump_VCD_defs(num);
  num = INST_master_write_dataOut_rv.dump_VCD_defs(num);
  num = INST_master_write_in.dump_VCD_defs(num);
  num = INST_master_write_isRst_isInReset.dump_VCD_defs(num);
  num = INST_master_write_out.dump_VCD_defs(num);
  num = INST_master_write_wdataOut.dump_VCD_defs(num);
  num = INST_master_write_wreadyIn.dump_VCD_defs(num);
  num = INST_master_write_wstrbOut.dump_VCD_defs(num);
  num = INST_outPixel.dump_VCD_defs(num);
  num = INST_out_count.dump_VCD_defs(num);
  num = INST_out_hold.dump_VCD_defs(num);
  num = INST_reg11.dump_VCD_defs(num);
  num = INST_reg12.dump_VCD_defs(num);
  num = INST_reg13.dump_VCD_defs(num);
  num = INST_reg21.dump_VCD_defs(num);
  num = INST_reg22.dump_VCD_defs(num);
  num = INST_reg23.dump_VCD_defs(num);
  num = INST_reg31.dump_VCD_defs(num);
  num = INST_reg32.dump_VCD_defs(num);
  num = INST_reg33.dump_VCD_defs(num);
  num = INST_rowBuffer_1.dump_VCD_defs(num);
  num = INST_rowBuffer_2.dump_VCD_defs(num);
  num = INST_rowBuffer_inital.dump_VCD_defs(num);
  num = INST_slave_read_araddrIn.dump_VCD_defs(num);
  num = INST_slave_read_arprotIn.dump_VCD_defs(num);
  num = INST_slave_read_arvalidIn.dump_VCD_defs(num);
  num = INST_slave_read_in.dump_VCD_defs(num);
  num = INST_slave_read_isRst_isInReset.dump_VCD_defs(num);
  num = INST_slave_read_out.dump_VCD_defs(num);
  num = INST_slave_read_rdataOut.dump_VCD_defs(num);
  num = INST_slave_read_rreadyIn.dump_VCD_defs(num);
  num = INST_slave_read_rrespOut.dump_VCD_defs(num);
  num = INST_slave_write_addrIn_rv.dump_VCD_defs(num);
  num = INST_slave_write_awaddrIn.dump_VCD_defs(num);
  num = INST_slave_write_awprotIn.dump_VCD_defs(num);
  num = INST_slave_write_awvalidIn.dump_VCD_defs(num);
  num = INST_slave_write_breadyIn.dump_VCD_defs(num);
  num = INST_slave_write_brespOut.dump_VCD_defs(num);
  num = INST_slave_write_dataIn_rv.dump_VCD_defs(num);
  num = INST_slave_write_in.dump_VCD_defs(num);
  num = INST_slave_write_isRst_isInReset.dump_VCD_defs(num);
  num = INST_slave_write_out.dump_VCD_defs(num);
  num = INST_slave_write_wdataIn.dump_VCD_defs(num);
  num = INST_slave_write_wstrbIn.dump_VCD_defs(num);
  num = INST_slave_write_wvalidIn.dump_VCD_defs(num);
  num = INST_slide.dump_VCD_defs(num);
  num = INST_slide_finish.dump_VCD_defs(num);
  num = INST_slide_position.dump_VCD_defs(num);
  num = INST_sobelConvert.dump_VCD_defs(num);
  num = INST_sobelState.dump_VCD_defs(num);
  num = INST_start.dump_VCD_defs(num);
  num = INST_start_write_request.dump_VCD_defs(num);
  num = INST_state_64.dump_VCD_defs(num);
  num = INST_state_temp.dump_VCD_defs(num);
  num = INST_sum1Buffer.dump_VCD_defs(num);
  num = INST_sum2Buffer.dump_VCD_defs(num);
  num = INST_sum_1.dump_VCD_defs(num);
  num = INST_sum_12.dump_VCD_defs(num);
  num = INST_sum_2.dump_VCD_defs(num);
  num = INST_testslideWindow.dump_VCD_defs(num);
  num = INST_testslideWindow_control.dump_VCD_defs(num);
  num = INST_testslideWindow_count.dump_VCD_defs(num);
  num = INST_threshold.dump_VCD_defs(num);
  num = INST_windowBuffer_once_inital.dump_VCD_defs(num);
  num = INST_windowReady.dump_VCD_defs(num);
  num = INST_windowSlide.dump_VCD_defs(num);
  num = INST_window_Initial.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkAXIConverter::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAXIConverter &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkAXIConverter::vcd_defs(tVCDDumpType dt, MOD_mkAXIConverter &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 73u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 73u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 73u);
    vcd_write_x(sim_hdl, num++, 67u);
    vcd_write_x(sim_hdl, num++, 139u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 67u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 73u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 73u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 139u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 67u);
    vcd_write_x(sim_hdl, num++, 67u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 139u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 73u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 73u);
    vcd_write_x(sim_hdl, num++, 139u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142) != DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142, 66u);
	backing.DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142 = DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142;
      }
      ++num;
      if ((backing.DEF_NOT_master_read_isRst_isInReset_1___d63) != DEF_NOT_master_read_isRst_isInReset_1___d63)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_master_read_isRst_isInReset_1___d63, 1u);
	backing.DEF_NOT_master_read_isRst_isInReset_1___d63 = DEF_NOT_master_read_isRst_isInReset_1___d63;
      }
      ++num;
      if ((backing.DEF_NOT_master_write_isRst_isInReset_1___d99) != DEF_NOT_master_write_isRst_isInReset_1___d99)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_master_write_isRst_isInReset_1___d99, 1u);
	backing.DEF_NOT_master_write_isRst_isInReset_1___d99 = DEF_NOT_master_write_isRst_isInReset_1___d99;
      }
      ++num;
      if ((backing.DEF_NOT_slave_read_isRst_isInReset___d3) != DEF_NOT_slave_read_isRst_isInReset___d3)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_slave_read_isRst_isInReset___d3, 1u);
	backing.DEF_NOT_slave_read_isRst_isInReset___d3 = DEF_NOT_slave_read_isRst_isInReset___d3;
      }
      ++num;
      if ((backing.DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37) != DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37, 1u);
	backing.DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37 = DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37;
      }
      ++num;
      if ((backing.DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47) != DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47, 1u);
	backing.DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47 = DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47;
      }
      ++num;
      if ((backing.DEF_NOT_slave_write_isRst_isInReset_1___d38) != DEF_NOT_slave_write_isRst_isInReset_1___d38)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_slave_write_isRst_isInReset_1___d38, 1u);
	backing.DEF_NOT_slave_write_isRst_isInReset_1___d38 = DEF_NOT_slave_write_isRst_isInReset_1___d38;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_DONTCARE___d29) != DEF__0_CONCAT_DONTCARE___d29)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_DONTCARE___d29, 68u);
	backing.DEF__0_CONCAT_DONTCARE___d29 = DEF__0_CONCAT_DONTCARE___d29;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_DONTCARE___d30) != DEF__0_CONCAT_DONTCARE___d30)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_DONTCARE___d30, 73u);
	backing.DEF__0_CONCAT_DONTCARE___d30 = DEF__0_CONCAT_DONTCARE___d30;
      }
      ++num;
      if ((backing.DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94) != DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94)
      {
	vcd_write_val(sim_hdl, num, DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94, 68u);
	backing.DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94 = DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94;
      }
      ++num;
      if ((backing.DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96) != DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96)
      {
	vcd_write_val(sim_hdl, num, DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96, 73u);
	backing.DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96 = DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96;
      }
      ++num;
      if ((backing.DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44) != DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44)
      {
	vcd_write_val(sim_hdl, num, DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44, 68u);
	backing.DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44 = DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44;
      }
      ++num;
      if ((backing.DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53) != DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53)
      {
	vcd_write_val(sim_hdl, num, DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53, 73u);
	backing.DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53 = DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53;
      }
      ++num;
      if ((backing.DEF_address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167) != DEF_address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167)
      {
	vcd_write_val(sim_hdl, num, DEF_address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167, 67u);
	backing.DEF_address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167 = DEF_address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167;
      }
      ++num;
      if ((backing.DEF_address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483) != DEF_address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483)
      {
	vcd_write_val(sim_hdl, num, DEF_address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483, 139u);
	backing.DEF_address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483 = DEF_address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483;
      }
      ++num;
      if ((backing.PORT_aresetn) != PORT_aresetn)
      {
	vcd_write_val(sim_hdl, num, PORT_aresetn, 1u);
	backing.PORT_aresetn = PORT_aresetn;
      }
      ++num;
      if ((backing.DEF_b__h10373) != DEF_b__h10373)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h10373, 8u);
	backing.DEF_b__h10373 = DEF_b__h10373;
      }
      ++num;
      if ((backing.DEF_b__h10381) != DEF_b__h10381)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h10381, 8u);
	backing.DEF_b__h10381 = DEF_b__h10381;
      }
      ++num;
      if ((backing.DEF_b__h10389) != DEF_b__h10389)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h10389, 8u);
	backing.DEF_b__h10389 = DEF_b__h10389;
      }
      ++num;
      if ((backing.DEF_b__h10397) != DEF_b__h10397)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h10397, 8u);
	backing.DEF_b__h10397 = DEF_b__h10397;
      }
      ++num;
      if ((backing.DEF_b__h10405) != DEF_b__h10405)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h10405, 8u);
	backing.DEF_b__h10405 = DEF_b__h10405;
      }
      ++num;
      if ((backing.DEF_b__h10413) != DEF_b__h10413)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h10413, 8u);
	backing.DEF_b__h10413 = DEF_b__h10413;
      }
      ++num;
      if ((backing.DEF_b__h10421) != DEF_b__h10421)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h10421, 8u);
	backing.DEF_b__h10421 = DEF_b__h10421;
      }
      ++num;
      if ((backing.DEF_b__h10429) != DEF_b__h10429)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h10429, 8u);
	backing.DEF_b__h10429 = DEF_b__h10429;
      }
      ++num;
      if ((backing.DEF_master_read_in_first____d69) != DEF_master_read_in_first____d69)
      {
	vcd_write_val(sim_hdl, num, DEF_master_read_in_first____d69, 67u);
	backing.DEF_master_read_in_first____d69 = DEF_master_read_in_first____d69;
      }
      ++num;
      if ((backing.DEF_master_read_in_notEmpty____d66) != DEF_master_read_in_notEmpty____d66)
      {
	vcd_write_val(sim_hdl, num, DEF_master_read_in_notEmpty____d66, 1u);
	backing.DEF_master_read_in_notEmpty____d66 = DEF_master_read_in_notEmpty____d66;
      }
      ++num;
      if ((backing.DEF_master_read_isRst_isInReset__h2640) != DEF_master_read_isRst_isInReset__h2640)
      {
	vcd_write_val(sim_hdl, num, DEF_master_read_isRst_isInReset__h2640, 1u);
	backing.DEF_master_read_isRst_isInReset__h2640 = DEF_master_read_isRst_isInReset__h2640;
      }
      ++num;
      if ((backing.DEF_master_read_out_first____d174) != DEF_master_read_out_first____d174)
      {
	vcd_write_val(sim_hdl, num, DEF_master_read_out_first____d174, 66u);
	backing.DEF_master_read_out_first____d174 = DEF_master_read_out_first____d174;
      }
      ++num;
      if ((backing.DEF_master_read_out_notFull____d75) != DEF_master_read_out_notFull____d75)
      {
	vcd_write_val(sim_hdl, num, DEF_master_read_out_notFull____d75, 1u);
	backing.DEF_master_read_out_notFull____d75 = DEF_master_read_out_notFull____d75;
      }
      ++num;
      if ((backing.DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80) != DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80)
      {
	vcd_write_val(sim_hdl, num, DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80, 66u);
	backing.DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80 = DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80;
      }
      ++num;
      if ((backing.DEF_master_write_addrOut_rv_port0__read____d83) != DEF_master_write_addrOut_rv_port0__read____d83)
      {
	vcd_write_val(sim_hdl, num, DEF_master_write_addrOut_rv_port0__read____d83, 68u);
	backing.DEF_master_write_addrOut_rv_port0__read____d83 = DEF_master_write_addrOut_rv_port0__read____d83;
      }
      ++num;
      if ((backing.DEF_master_write_addrOut_rv_port1__read__7_BIT_67___d98) != DEF_master_write_addrOut_rv_port1__read__7_BIT_67___d98)
      {
	vcd_write_val(sim_hdl, num, DEF_master_write_addrOut_rv_port1__read__7_BIT_67___d98, 1u);
	backing.DEF_master_write_addrOut_rv_port1__read__7_BIT_67___d98 = DEF_master_write_addrOut_rv_port1__read__7_BIT_67___d98;
      }
      ++num;
      if ((backing.DEF_master_write_addrOut_rv_port1__read____d97) != DEF_master_write_addrOut_rv_port1__read____d97)
      {
	vcd_write_val(sim_hdl, num, DEF_master_write_addrOut_rv_port1__read____d97, 68u);
	backing.DEF_master_write_addrOut_rv_port1__read____d97 = DEF_master_write_addrOut_rv_port1__read____d97;
      }
      ++num;
      if ((backing.DEF_master_write_dataOut_rv_port0__read____d86) != DEF_master_write_dataOut_rv_port0__read____d86)
      {
	vcd_write_val(sim_hdl, num, DEF_master_write_dataOut_rv_port0__read____d86, 73u);
	backing.DEF_master_write_dataOut_rv_port0__read____d86 = DEF_master_write_dataOut_rv_port0__read____d86;
      }
      ++num;
      if ((backing.DEF_master_write_dataOut_rv_port1__read__05_BIT_72___d106) != DEF_master_write_dataOut_rv_port1__read__05_BIT_72___d106)
      {
	vcd_write_val(sim_hdl, num, DEF_master_write_dataOut_rv_port1__read__05_BIT_72___d106, 1u);
	backing.DEF_master_write_dataOut_rv_port1__read__05_BIT_72___d106 = DEF_master_write_dataOut_rv_port1__read__05_BIT_72___d106;
      }
      ++num;
      if ((backing.DEF_master_write_dataOut_rv_port1__read____d105) != DEF_master_write_dataOut_rv_port1__read____d105)
      {
	vcd_write_val(sim_hdl, num, DEF_master_write_dataOut_rv_port1__read____d105, 73u);
	backing.DEF_master_write_dataOut_rv_port1__read____d105 = DEF_master_write_dataOut_rv_port1__read____d105;
      }
      ++num;
      if ((backing.DEF_master_write_in_first__1_BITS_74_TO_3___d95) != DEF_master_write_in_first__1_BITS_74_TO_3___d95)
      {
	vcd_write_val(sim_hdl, num, DEF_master_write_in_first__1_BITS_74_TO_3___d95, 72u);
	backing.DEF_master_write_in_first__1_BITS_74_TO_3___d95 = DEF_master_write_in_first__1_BITS_74_TO_3___d95;
      }
      ++num;
      if ((backing.DEF_master_write_in_first____d91) != DEF_master_write_in_first____d91)
      {
	vcd_write_val(sim_hdl, num, DEF_master_write_in_first____d91, 139u);
	backing.DEF_master_write_in_first____d91 = DEF_master_write_in_first____d91;
      }
      ++num;
      if ((backing.DEF_master_write_isRst_isInReset__h3416) != DEF_master_write_isRst_isInReset__h3416)
      {
	vcd_write_val(sim_hdl, num, DEF_master_write_isRst_isInReset__h3416, 1u);
	backing.DEF_master_write_isRst_isInReset__h3416 = DEF_master_write_isRst_isInReset__h3416;
      }
      ++num;
      if ((backing.DEF_master_write_out_notFull____d115) != DEF_master_write_out_notFull____d115)
      {
	vcd_write_val(sim_hdl, num, DEF_master_write_out_notFull____d115, 1u);
	backing.DEF_master_write_out_notFull____d115 = DEF_master_write_out_notFull____d115;
      }
      ++num;
      if ((backing.DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11) != DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11, 67u);
	backing.DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11 = DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11;
      }
      ++num;
      if ((backing.DEF_slave_read_in_first____d122) != DEF_slave_read_in_first____d122)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_read_in_first____d122, 67u);
	backing.DEF_slave_read_in_first____d122 = DEF_slave_read_in_first____d122;
      }
      ++num;
      if ((backing.DEF_slave_read_in_notFull____d6) != DEF_slave_read_in_notFull____d6)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_read_in_notFull____d6, 1u);
	backing.DEF_slave_read_in_notFull____d6 = DEF_slave_read_in_notFull____d6;
      }
      ++num;
      if ((backing.DEF_slave_read_isRst_isInReset__h102) != DEF_slave_read_isRst_isInReset__h102)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_read_isRst_isInReset__h102, 1u);
	backing.DEF_slave_read_isRst_isInReset__h102 = DEF_slave_read_isRst_isInReset__h102;
      }
      ++num;
      if ((backing.DEF_slave_read_out_first____d18) != DEF_slave_read_out_first____d18)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_read_out_first____d18, 66u);
	backing.DEF_slave_read_out_first____d18 = DEF_slave_read_out_first____d18;
      }
      ++num;
      if ((backing.DEF_slave_read_out_notEmpty____d15) != DEF_slave_read_out_notEmpty____d15)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_read_out_notEmpty____d15, 1u);
	backing.DEF_slave_read_out_notEmpty____d15 = DEF_slave_read_out_notEmpty____d15;
      }
      ++num;
      if ((backing.DEF_slave_write_addrIn_rv_port0__read____d35) != DEF_slave_write_addrIn_rv_port0__read____d35)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_addrIn_rv_port0__read____d35, 68u);
	backing.DEF_slave_write_addrIn_rv_port0__read____d35 = DEF_slave_write_addrIn_rv_port0__read____d35;
      }
      ++num;
      if ((backing.DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34) != DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34, 139u);
	backing.DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34 = DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34;
      }
      ++num;
      if ((backing.DEF_slave_write_addrIn_rv_port1__read____d22) != DEF_slave_write_addrIn_rv_port1__read____d22)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_addrIn_rv_port1__read____d22, 68u);
	backing.DEF_slave_write_addrIn_rv_port1__read____d22 = DEF_slave_write_addrIn_rv_port1__read____d22;
      }
      ++num;
      if ((backing.DEF_slave_write_dataIn_rv_port0__read____d45) != DEF_slave_write_dataIn_rv_port0__read____d45)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_dataIn_rv_port0__read____d45, 73u);
	backing.DEF_slave_write_dataIn_rv_port0__read____d45 = DEF_slave_write_dataIn_rv_port0__read____d45;
      }
      ++num;
      if ((backing.DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32) != DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32, 72u);
	backing.DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32 = DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32;
      }
      ++num;
      if ((backing.DEF_slave_write_dataIn_rv_port1__read____d24) != DEF_slave_write_dataIn_rv_port1__read____d24)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_dataIn_rv_port1__read____d24, 73u);
	backing.DEF_slave_write_dataIn_rv_port1__read____d24 = DEF_slave_write_dataIn_rv_port1__read____d24;
      }
      ++num;
      if ((backing.DEF_slave_write_in_first____d149) != DEF_slave_write_in_first____d149)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_in_first____d149, 139u);
	backing.DEF_slave_write_in_first____d149 = DEF_slave_write_in_first____d149;
      }
      ++num;
      if ((backing.DEF_slave_write_isRst_isInReset__h891) != DEF_slave_write_isRst_isInReset__h891)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_isRst_isInReset__h891, 1u);
	backing.DEF_slave_write_isRst_isInReset__h891 = DEF_slave_write_isRst_isInReset__h891;
      }
      ++num;
      if ((backing.DEF_slave_write_out_notEmpty____d57) != DEF_slave_write_out_notEmpty____d57)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_write_out_notEmpty____d57, 1u);
	backing.DEF_slave_write_out_notEmpty____d57 = DEF_slave_write_out_notEmpty____d57;
      }
      ++num;
      if ((backing.DEF_sum_12__h11198) != DEF_sum_12__h11198)
      {
	vcd_write_val(sim_hdl, num, DEF_sum_12__h11198, 16u);
	backing.DEF_sum_12__h11198 = DEF_sum_12__h11198;
      }
      ++num;
      if ((backing.DEF_sum_1__h10674) != DEF_sum_1__h10674)
      {
	vcd_write_val(sim_hdl, num, DEF_sum_1__h10674, 16u);
	backing.DEF_sum_1__h10674 = DEF_sum_1__h10674;
      }
      ++num;
      if ((backing.DEF_sum_2__h10762) != DEF_sum_2__h10762)
      {
	vcd_write_val(sim_hdl, num, DEF_sum_2__h10762, 16u);
	backing.DEF_sum_2__h10762 = DEF_sum_2__h10762;
      }
      ++num;
      if ((backing.DEF_x__h11235) != DEF_x__h11235)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h11235, 8u);
	backing.DEF_x__h11235 = DEF_x__h11235;
      }
      ++num;
      if ((backing.DEF_x__h11419) != DEF_x__h11419)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h11419, 8u);
	backing.DEF_x__h11419 = DEF_x__h11419;
      }
      ++num;
      if ((backing.DEF_x__h11479) != DEF_x__h11479)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h11479, 32u);
	backing.DEF_x__h11479 = DEF_x__h11479;
      }
      ++num;
      if ((backing.DEF_x__h12354) != DEF_x__h12354)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h12354, 64u);
	backing.DEF_x__h12354 = DEF_x__h12354;
      }
      ++num;
      if ((backing.DEF_x__h6470) != DEF_x__h6470)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h6470, 64u);
	backing.DEF_x__h6470 = DEF_x__h6470;
      }
      ++num;
      if ((backing.DEF_x__h6476) != DEF_x__h6476)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h6476, 64u);
	backing.DEF_x__h6476 = DEF_x__h6476;
      }
      ++num;
      if ((backing.DEF_x__h6524) != DEF_x__h6524)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h6524, 64u);
	backing.DEF_x__h6524 = DEF_x__h6524;
      }
      ++num;
      if ((backing.DEF_x__h8782) != DEF_x__h8782)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h8782, 8u);
	backing.DEF_x__h8782 = DEF_x__h8782;
      }
      ++num;
      if ((backing.DEF_x__h9219) != DEF_x__h9219)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h9219, 8u);
	backing.DEF_x__h9219 = DEF_x__h9219;
      }
      ++num;
      if ((backing.DEF_x__h9256) != DEF_x__h9256)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h9256, 32u);
	backing.DEF_x__h9256 = DEF_x__h9256;
      }
      ++num;
      if ((backing.DEF_y__h11480) != DEF_y__h11480)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h11480, 32u);
	backing.DEF_y__h11480 = DEF_y__h11480;
      }
      ++num;
      if ((backing.DEF_y__h11482) != DEF_y__h11482)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h11482, 32u);
	backing.DEF_y__h11482 = DEF_y__h11482;
      }
      ++num;
      if ((backing.PORT_M00_AXI_araddr) != PORT_M00_AXI_araddr)
      {
	vcd_write_val(sim_hdl, num, PORT_M00_AXI_araddr, 64u);
	backing.PORT_M00_AXI_araddr = PORT_M00_AXI_araddr;
      }
      ++num;
      if ((backing.PORT_M00_AXI_arprot) != PORT_M00_AXI_arprot)
      {
	vcd_write_val(sim_hdl, num, PORT_M00_AXI_arprot, 3u);
	backing.PORT_M00_AXI_arprot = PORT_M00_AXI_arprot;
      }
      ++num;
      if ((backing.PORT_M00_AXI_arvalid) != PORT_M00_AXI_arvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_M00_AXI_arvalid, 1u);
	backing.PORT_M00_AXI_arvalid = PORT_M00_AXI_arvalid;
      }
      ++num;
      if ((backing.PORT_M00_AXI_awaddr) != PORT_M00_AXI_awaddr)
      {
	vcd_write_val(sim_hdl, num, PORT_M00_AXI_awaddr, 64u);
	backing.PORT_M00_AXI_awaddr = PORT_M00_AXI_awaddr;
      }
      ++num;
      if ((backing.PORT_M00_AXI_awprot) != PORT_M00_AXI_awprot)
      {
	vcd_write_val(sim_hdl, num, PORT_M00_AXI_awprot, 3u);
	backing.PORT_M00_AXI_awprot = PORT_M00_AXI_awprot;
      }
      ++num;
      if ((backing.PORT_M00_AXI_awvalid) != PORT_M00_AXI_awvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_M00_AXI_awvalid, 1u);
	backing.PORT_M00_AXI_awvalid = PORT_M00_AXI_awvalid;
      }
      ++num;
      if ((backing.PORT_M00_AXI_bready) != PORT_M00_AXI_bready)
      {
	vcd_write_val(sim_hdl, num, PORT_M00_AXI_bready, 1u);
	backing.PORT_M00_AXI_bready = PORT_M00_AXI_bready;
      }
      ++num;
      if ((backing.PORT_M00_AXI_rready) != PORT_M00_AXI_rready)
      {
	vcd_write_val(sim_hdl, num, PORT_M00_AXI_rready, 1u);
	backing.PORT_M00_AXI_rready = PORT_M00_AXI_rready;
      }
      ++num;
      if ((backing.PORT_M00_AXI_wdata) != PORT_M00_AXI_wdata)
      {
	vcd_write_val(sim_hdl, num, PORT_M00_AXI_wdata, 64u);
	backing.PORT_M00_AXI_wdata = PORT_M00_AXI_wdata;
      }
      ++num;
      if ((backing.PORT_M00_AXI_wstrb) != PORT_M00_AXI_wstrb)
      {
	vcd_write_val(sim_hdl, num, PORT_M00_AXI_wstrb, 8u);
	backing.PORT_M00_AXI_wstrb = PORT_M00_AXI_wstrb;
      }
      ++num;
      if ((backing.PORT_M00_AXI_wvalid) != PORT_M00_AXI_wvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_M00_AXI_wvalid, 1u);
	backing.PORT_M00_AXI_wvalid = PORT_M00_AXI_wvalid;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_araddr) != PORT_RDY_M00_AXI_araddr)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_araddr, 1u);
	backing.PORT_RDY_M00_AXI_araddr = PORT_RDY_M00_AXI_araddr;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_arprot) != PORT_RDY_M00_AXI_arprot)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_arprot, 1u);
	backing.PORT_RDY_M00_AXI_arprot = PORT_RDY_M00_AXI_arprot;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_arvalid) != PORT_RDY_M00_AXI_arvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_arvalid, 1u);
	backing.PORT_RDY_M00_AXI_arvalid = PORT_RDY_M00_AXI_arvalid;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_awaddr) != PORT_RDY_M00_AXI_awaddr)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_awaddr, 1u);
	backing.PORT_RDY_M00_AXI_awaddr = PORT_RDY_M00_AXI_awaddr;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_awprot) != PORT_RDY_M00_AXI_awprot)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_awprot, 1u);
	backing.PORT_RDY_M00_AXI_awprot = PORT_RDY_M00_AXI_awprot;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_awvalid) != PORT_RDY_M00_AXI_awvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_awvalid, 1u);
	backing.PORT_RDY_M00_AXI_awvalid = PORT_RDY_M00_AXI_awvalid;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_bready) != PORT_RDY_M00_AXI_bready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_bready, 1u);
	backing.PORT_RDY_M00_AXI_bready = PORT_RDY_M00_AXI_bready;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_parready) != PORT_RDY_M00_AXI_parready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_parready, 1u);
	backing.PORT_RDY_M00_AXI_parready = PORT_RDY_M00_AXI_parready;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_pawready) != PORT_RDY_M00_AXI_pawready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_pawready, 1u);
	backing.PORT_RDY_M00_AXI_pawready = PORT_RDY_M00_AXI_pawready;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_pbresp) != PORT_RDY_M00_AXI_pbresp)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_pbresp, 1u);
	backing.PORT_RDY_M00_AXI_pbresp = PORT_RDY_M00_AXI_pbresp;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_pbvalid) != PORT_RDY_M00_AXI_pbvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_pbvalid, 1u);
	backing.PORT_RDY_M00_AXI_pbvalid = PORT_RDY_M00_AXI_pbvalid;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_prdata) != PORT_RDY_M00_AXI_prdata)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_prdata, 1u);
	backing.PORT_RDY_M00_AXI_prdata = PORT_RDY_M00_AXI_prdata;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_prresp) != PORT_RDY_M00_AXI_prresp)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_prresp, 1u);
	backing.PORT_RDY_M00_AXI_prresp = PORT_RDY_M00_AXI_prresp;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_prvalid) != PORT_RDY_M00_AXI_prvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_prvalid, 1u);
	backing.PORT_RDY_M00_AXI_prvalid = PORT_RDY_M00_AXI_prvalid;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_pwready) != PORT_RDY_M00_AXI_pwready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_pwready, 1u);
	backing.PORT_RDY_M00_AXI_pwready = PORT_RDY_M00_AXI_pwready;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_rready) != PORT_RDY_M00_AXI_rready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_rready, 1u);
	backing.PORT_RDY_M00_AXI_rready = PORT_RDY_M00_AXI_rready;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_wdata) != PORT_RDY_M00_AXI_wdata)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_wdata, 1u);
	backing.PORT_RDY_M00_AXI_wdata = PORT_RDY_M00_AXI_wdata;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_wstrb) != PORT_RDY_M00_AXI_wstrb)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_wstrb, 1u);
	backing.PORT_RDY_M00_AXI_wstrb = PORT_RDY_M00_AXI_wstrb;
      }
      ++num;
      if ((backing.PORT_RDY_M00_AXI_wvalid) != PORT_RDY_M00_AXI_wvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_M00_AXI_wvalid, 1u);
	backing.PORT_RDY_M00_AXI_wvalid = PORT_RDY_M00_AXI_wvalid;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_arready) != PORT_RDY_S00_AXI_arready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_arready, 1u);
	backing.PORT_RDY_S00_AXI_arready = PORT_RDY_S00_AXI_arready;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_awready) != PORT_RDY_S00_AXI_awready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_awready, 1u);
	backing.PORT_RDY_S00_AXI_awready = PORT_RDY_S00_AXI_awready;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_bresp) != PORT_RDY_S00_AXI_bresp)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_bresp, 1u);
	backing.PORT_RDY_S00_AXI_bresp = PORT_RDY_S00_AXI_bresp;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_bvalid) != PORT_RDY_S00_AXI_bvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_bvalid, 1u);
	backing.PORT_RDY_S00_AXI_bvalid = PORT_RDY_S00_AXI_bvalid;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_paraddr) != PORT_RDY_S00_AXI_paraddr)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_paraddr, 1u);
	backing.PORT_RDY_S00_AXI_paraddr = PORT_RDY_S00_AXI_paraddr;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_parprot) != PORT_RDY_S00_AXI_parprot)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_parprot, 1u);
	backing.PORT_RDY_S00_AXI_parprot = PORT_RDY_S00_AXI_parprot;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_parvalid) != PORT_RDY_S00_AXI_parvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_parvalid, 1u);
	backing.PORT_RDY_S00_AXI_parvalid = PORT_RDY_S00_AXI_parvalid;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pawaddr) != PORT_RDY_S00_AXI_pawaddr)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pawaddr, 1u);
	backing.PORT_RDY_S00_AXI_pawaddr = PORT_RDY_S00_AXI_pawaddr;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pawprot) != PORT_RDY_S00_AXI_pawprot)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pawprot, 1u);
	backing.PORT_RDY_S00_AXI_pawprot = PORT_RDY_S00_AXI_pawprot;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pawvalid) != PORT_RDY_S00_AXI_pawvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pawvalid, 1u);
	backing.PORT_RDY_S00_AXI_pawvalid = PORT_RDY_S00_AXI_pawvalid;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pbready) != PORT_RDY_S00_AXI_pbready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pbready, 1u);
	backing.PORT_RDY_S00_AXI_pbready = PORT_RDY_S00_AXI_pbready;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_prready) != PORT_RDY_S00_AXI_prready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_prready, 1u);
	backing.PORT_RDY_S00_AXI_prready = PORT_RDY_S00_AXI_prready;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pwdata) != PORT_RDY_S00_AXI_pwdata)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pwdata, 1u);
	backing.PORT_RDY_S00_AXI_pwdata = PORT_RDY_S00_AXI_pwdata;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pwstrb) != PORT_RDY_S00_AXI_pwstrb)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pwstrb, 1u);
	backing.PORT_RDY_S00_AXI_pwstrb = PORT_RDY_S00_AXI_pwstrb;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_pwvalid) != PORT_RDY_S00_AXI_pwvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_pwvalid, 1u);
	backing.PORT_RDY_S00_AXI_pwvalid = PORT_RDY_S00_AXI_pwvalid;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_rdata) != PORT_RDY_S00_AXI_rdata)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_rdata, 1u);
	backing.PORT_RDY_S00_AXI_rdata = PORT_RDY_S00_AXI_rdata;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_rresp) != PORT_RDY_S00_AXI_rresp)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_rresp, 1u);
	backing.PORT_RDY_S00_AXI_rresp = PORT_RDY_S00_AXI_rresp;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_rvalid) != PORT_RDY_S00_AXI_rvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_rvalid, 1u);
	backing.PORT_RDY_S00_AXI_rvalid = PORT_RDY_S00_AXI_rvalid;
      }
      ++num;
      if ((backing.PORT_RDY_S00_AXI_wready) != PORT_RDY_S00_AXI_wready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_S00_AXI_wready, 1u);
	backing.PORT_RDY_S00_AXI_wready = PORT_RDY_S00_AXI_wready;
      }
      ++num;
      if ((backing.PORT_S00_AXI_arready) != PORT_S00_AXI_arready)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_arready, 1u);
	backing.PORT_S00_AXI_arready = PORT_S00_AXI_arready;
      }
      ++num;
      if ((backing.PORT_S00_AXI_awready) != PORT_S00_AXI_awready)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_awready, 1u);
	backing.PORT_S00_AXI_awready = PORT_S00_AXI_awready;
      }
      ++num;
      if ((backing.PORT_S00_AXI_bresp) != PORT_S00_AXI_bresp)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_bresp, 2u);
	backing.PORT_S00_AXI_bresp = PORT_S00_AXI_bresp;
      }
      ++num;
      if ((backing.PORT_S00_AXI_bvalid) != PORT_S00_AXI_bvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_bvalid, 1u);
	backing.PORT_S00_AXI_bvalid = PORT_S00_AXI_bvalid;
      }
      ++num;
      if ((backing.PORT_S00_AXI_rdata) != PORT_S00_AXI_rdata)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_rdata, 64u);
	backing.PORT_S00_AXI_rdata = PORT_S00_AXI_rdata;
      }
      ++num;
      if ((backing.PORT_S00_AXI_rresp) != PORT_S00_AXI_rresp)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_rresp, 2u);
	backing.PORT_S00_AXI_rresp = PORT_S00_AXI_rresp;
      }
      ++num;
      if ((backing.PORT_S00_AXI_rvalid) != PORT_S00_AXI_rvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_rvalid, 1u);
	backing.PORT_S00_AXI_rvalid = PORT_S00_AXI_rvalid;
      }
      ++num;
      if ((backing.PORT_S00_AXI_wready) != PORT_S00_AXI_wready)
      {
	vcd_write_val(sim_hdl, num, PORT_S00_AXI_wready, 1u);
	backing.PORT_S00_AXI_wready = PORT_S00_AXI_wready;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142, 66u);
      backing.DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142 = DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142;
      vcd_write_val(sim_hdl, num++, DEF_NOT_master_read_isRst_isInReset_1___d63, 1u);
      backing.DEF_NOT_master_read_isRst_isInReset_1___d63 = DEF_NOT_master_read_isRst_isInReset_1___d63;
      vcd_write_val(sim_hdl, num++, DEF_NOT_master_write_isRst_isInReset_1___d99, 1u);
      backing.DEF_NOT_master_write_isRst_isInReset_1___d99 = DEF_NOT_master_write_isRst_isInReset_1___d99;
      vcd_write_val(sim_hdl, num++, DEF_NOT_slave_read_isRst_isInReset___d3, 1u);
      backing.DEF_NOT_slave_read_isRst_isInReset___d3 = DEF_NOT_slave_read_isRst_isInReset___d3;
      vcd_write_val(sim_hdl, num++, DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37, 1u);
      backing.DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37 = DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37;
      vcd_write_val(sim_hdl, num++, DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47, 1u);
      backing.DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47 = DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47;
      vcd_write_val(sim_hdl, num++, DEF_NOT_slave_write_isRst_isInReset_1___d38, 1u);
      backing.DEF_NOT_slave_write_isRst_isInReset_1___d38 = DEF_NOT_slave_write_isRst_isInReset_1___d38;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_DONTCARE___d29, 68u);
      backing.DEF__0_CONCAT_DONTCARE___d29 = DEF__0_CONCAT_DONTCARE___d29;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_DONTCARE___d30, 73u);
      backing.DEF__0_CONCAT_DONTCARE___d30 = DEF__0_CONCAT_DONTCARE___d30;
      vcd_write_val(sim_hdl, num++, DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94, 68u);
      backing.DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94 = DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94;
      vcd_write_val(sim_hdl, num++, DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96, 73u);
      backing.DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96 = DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96;
      vcd_write_val(sim_hdl, num++, DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44, 68u);
      backing.DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44 = DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44;
      vcd_write_val(sim_hdl, num++, DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53, 73u);
      backing.DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53 = DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53;
      vcd_write_val(sim_hdl, num++, DEF_address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167, 67u);
      backing.DEF_address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167 = DEF_address_image_1_33_PLUS_ddr_read_count_65_66_C_ETC___d167;
      vcd_write_val(sim_hdl, num++, DEF_address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483, 139u);
      backing.DEF_address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483 = DEF_address_image_2_34_PLUS_ddr_write_count_80_81__ETC___d483;
      vcd_write_val(sim_hdl, num++, PORT_aresetn, 1u);
      backing.PORT_aresetn = PORT_aresetn;
      vcd_write_val(sim_hdl, num++, DEF_b__h10373, 8u);
      backing.DEF_b__h10373 = DEF_b__h10373;
      vcd_write_val(sim_hdl, num++, DEF_b__h10381, 8u);
      backing.DEF_b__h10381 = DEF_b__h10381;
      vcd_write_val(sim_hdl, num++, DEF_b__h10389, 8u);
      backing.DEF_b__h10389 = DEF_b__h10389;
      vcd_write_val(sim_hdl, num++, DEF_b__h10397, 8u);
      backing.DEF_b__h10397 = DEF_b__h10397;
      vcd_write_val(sim_hdl, num++, DEF_b__h10405, 8u);
      backing.DEF_b__h10405 = DEF_b__h10405;
      vcd_write_val(sim_hdl, num++, DEF_b__h10413, 8u);
      backing.DEF_b__h10413 = DEF_b__h10413;
      vcd_write_val(sim_hdl, num++, DEF_b__h10421, 8u);
      backing.DEF_b__h10421 = DEF_b__h10421;
      vcd_write_val(sim_hdl, num++, DEF_b__h10429, 8u);
      backing.DEF_b__h10429 = DEF_b__h10429;
      vcd_write_val(sim_hdl, num++, DEF_master_read_in_first____d69, 67u);
      backing.DEF_master_read_in_first____d69 = DEF_master_read_in_first____d69;
      vcd_write_val(sim_hdl, num++, DEF_master_read_in_notEmpty____d66, 1u);
      backing.DEF_master_read_in_notEmpty____d66 = DEF_master_read_in_notEmpty____d66;
      vcd_write_val(sim_hdl, num++, DEF_master_read_isRst_isInReset__h2640, 1u);
      backing.DEF_master_read_isRst_isInReset__h2640 = DEF_master_read_isRst_isInReset__h2640;
      vcd_write_val(sim_hdl, num++, DEF_master_read_out_first____d174, 66u);
      backing.DEF_master_read_out_first____d174 = DEF_master_read_out_first____d174;
      vcd_write_val(sim_hdl, num++, DEF_master_read_out_notFull____d75, 1u);
      backing.DEF_master_read_out_notFull____d75 = DEF_master_read_out_notFull____d75;
      vcd_write_val(sim_hdl, num++, DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80, 66u);
      backing.DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80 = DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80;
      vcd_write_val(sim_hdl, num++, DEF_master_write_addrOut_rv_port0__read____d83, 68u);
      backing.DEF_master_write_addrOut_rv_port0__read____d83 = DEF_master_write_addrOut_rv_port0__read____d83;
      vcd_write_val(sim_hdl, num++, DEF_master_write_addrOut_rv_port1__read__7_BIT_67___d98, 1u);
      backing.DEF_master_write_addrOut_rv_port1__read__7_BIT_67___d98 = DEF_master_write_addrOut_rv_port1__read__7_BIT_67___d98;
      vcd_write_val(sim_hdl, num++, DEF_master_write_addrOut_rv_port1__read____d97, 68u);
      backing.DEF_master_write_addrOut_rv_port1__read____d97 = DEF_master_write_addrOut_rv_port1__read____d97;
      vcd_write_val(sim_hdl, num++, DEF_master_write_dataOut_rv_port0__read____d86, 73u);
      backing.DEF_master_write_dataOut_rv_port0__read____d86 = DEF_master_write_dataOut_rv_port0__read____d86;
      vcd_write_val(sim_hdl, num++, DEF_master_write_dataOut_rv_port1__read__05_BIT_72___d106, 1u);
      backing.DEF_master_write_dataOut_rv_port1__read__05_BIT_72___d106 = DEF_master_write_dataOut_rv_port1__read__05_BIT_72___d106;
      vcd_write_val(sim_hdl, num++, DEF_master_write_dataOut_rv_port1__read____d105, 73u);
      backing.DEF_master_write_dataOut_rv_port1__read____d105 = DEF_master_write_dataOut_rv_port1__read____d105;
      vcd_write_val(sim_hdl, num++, DEF_master_write_in_first__1_BITS_74_TO_3___d95, 72u);
      backing.DEF_master_write_in_first__1_BITS_74_TO_3___d95 = DEF_master_write_in_first__1_BITS_74_TO_3___d95;
      vcd_write_val(sim_hdl, num++, DEF_master_write_in_first____d91, 139u);
      backing.DEF_master_write_in_first____d91 = DEF_master_write_in_first____d91;
      vcd_write_val(sim_hdl, num++, DEF_master_write_isRst_isInReset__h3416, 1u);
      backing.DEF_master_write_isRst_isInReset__h3416 = DEF_master_write_isRst_isInReset__h3416;
      vcd_write_val(sim_hdl, num++, DEF_master_write_out_notFull____d115, 1u);
      backing.DEF_master_write_out_notFull____d115 = DEF_master_write_out_notFull____d115;
      vcd_write_val(sim_hdl, num++, DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11, 67u);
      backing.DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11 = DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11;
      vcd_write_val(sim_hdl, num++, DEF_slave_read_in_first____d122, 67u);
      backing.DEF_slave_read_in_first____d122 = DEF_slave_read_in_first____d122;
      vcd_write_val(sim_hdl, num++, DEF_slave_read_in_notFull____d6, 1u);
      backing.DEF_slave_read_in_notFull____d6 = DEF_slave_read_in_notFull____d6;
      vcd_write_val(sim_hdl, num++, DEF_slave_read_isRst_isInReset__h102, 1u);
      backing.DEF_slave_read_isRst_isInReset__h102 = DEF_slave_read_isRst_isInReset__h102;
      vcd_write_val(sim_hdl, num++, DEF_slave_read_out_first____d18, 66u);
      backing.DEF_slave_read_out_first____d18 = DEF_slave_read_out_first____d18;
      vcd_write_val(sim_hdl, num++, DEF_slave_read_out_notEmpty____d15, 1u);
      backing.DEF_slave_read_out_notEmpty____d15 = DEF_slave_read_out_notEmpty____d15;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_addrIn_rv_port0__read____d35, 68u);
      backing.DEF_slave_write_addrIn_rv_port0__read____d35 = DEF_slave_write_addrIn_rv_port0__read____d35;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34, 139u);
      backing.DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34 = DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_addrIn_rv_port1__read____d22, 68u);
      backing.DEF_slave_write_addrIn_rv_port1__read____d22 = DEF_slave_write_addrIn_rv_port1__read____d22;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_dataIn_rv_port0__read____d45, 73u);
      backing.DEF_slave_write_dataIn_rv_port0__read____d45 = DEF_slave_write_dataIn_rv_port0__read____d45;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32, 72u);
      backing.DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32 = DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_dataIn_rv_port1__read____d24, 73u);
      backing.DEF_slave_write_dataIn_rv_port1__read____d24 = DEF_slave_write_dataIn_rv_port1__read____d24;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_in_first____d149, 139u);
      backing.DEF_slave_write_in_first____d149 = DEF_slave_write_in_first____d149;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_isRst_isInReset__h891, 1u);
      backing.DEF_slave_write_isRst_isInReset__h891 = DEF_slave_write_isRst_isInReset__h891;
      vcd_write_val(sim_hdl, num++, DEF_slave_write_out_notEmpty____d57, 1u);
      backing.DEF_slave_write_out_notEmpty____d57 = DEF_slave_write_out_notEmpty____d57;
      vcd_write_val(sim_hdl, num++, DEF_sum_12__h11198, 16u);
      backing.DEF_sum_12__h11198 = DEF_sum_12__h11198;
      vcd_write_val(sim_hdl, num++, DEF_sum_1__h10674, 16u);
      backing.DEF_sum_1__h10674 = DEF_sum_1__h10674;
      vcd_write_val(sim_hdl, num++, DEF_sum_2__h10762, 16u);
      backing.DEF_sum_2__h10762 = DEF_sum_2__h10762;
      vcd_write_val(sim_hdl, num++, DEF_x__h11235, 8u);
      backing.DEF_x__h11235 = DEF_x__h11235;
      vcd_write_val(sim_hdl, num++, DEF_x__h11419, 8u);
      backing.DEF_x__h11419 = DEF_x__h11419;
      vcd_write_val(sim_hdl, num++, DEF_x__h11479, 32u);
      backing.DEF_x__h11479 = DEF_x__h11479;
      vcd_write_val(sim_hdl, num++, DEF_x__h12354, 64u);
      backing.DEF_x__h12354 = DEF_x__h12354;
      vcd_write_val(sim_hdl, num++, DEF_x__h6470, 64u);
      backing.DEF_x__h6470 = DEF_x__h6470;
      vcd_write_val(sim_hdl, num++, DEF_x__h6476, 64u);
      backing.DEF_x__h6476 = DEF_x__h6476;
      vcd_write_val(sim_hdl, num++, DEF_x__h6524, 64u);
      backing.DEF_x__h6524 = DEF_x__h6524;
      vcd_write_val(sim_hdl, num++, DEF_x__h8782, 8u);
      backing.DEF_x__h8782 = DEF_x__h8782;
      vcd_write_val(sim_hdl, num++, DEF_x__h9219, 8u);
      backing.DEF_x__h9219 = DEF_x__h9219;
      vcd_write_val(sim_hdl, num++, DEF_x__h9256, 32u);
      backing.DEF_x__h9256 = DEF_x__h9256;
      vcd_write_val(sim_hdl, num++, DEF_y__h11480, 32u);
      backing.DEF_y__h11480 = DEF_y__h11480;
      vcd_write_val(sim_hdl, num++, DEF_y__h11482, 32u);
      backing.DEF_y__h11482 = DEF_y__h11482;
      vcd_write_val(sim_hdl, num++, PORT_M00_AXI_araddr, 64u);
      backing.PORT_M00_AXI_araddr = PORT_M00_AXI_araddr;
      vcd_write_val(sim_hdl, num++, PORT_M00_AXI_arprot, 3u);
      backing.PORT_M00_AXI_arprot = PORT_M00_AXI_arprot;
      vcd_write_val(sim_hdl, num++, PORT_M00_AXI_arvalid, 1u);
      backing.PORT_M00_AXI_arvalid = PORT_M00_AXI_arvalid;
      vcd_write_val(sim_hdl, num++, PORT_M00_AXI_awaddr, 64u);
      backing.PORT_M00_AXI_awaddr = PORT_M00_AXI_awaddr;
      vcd_write_val(sim_hdl, num++, PORT_M00_AXI_awprot, 3u);
      backing.PORT_M00_AXI_awprot = PORT_M00_AXI_awprot;
      vcd_write_val(sim_hdl, num++, PORT_M00_AXI_awvalid, 1u);
      backing.PORT_M00_AXI_awvalid = PORT_M00_AXI_awvalid;
      vcd_write_val(sim_hdl, num++, PORT_M00_AXI_bready, 1u);
      backing.PORT_M00_AXI_bready = PORT_M00_AXI_bready;
      vcd_write_val(sim_hdl, num++, PORT_M00_AXI_rready, 1u);
      backing.PORT_M00_AXI_rready = PORT_M00_AXI_rready;
      vcd_write_val(sim_hdl, num++, PORT_M00_AXI_wdata, 64u);
      backing.PORT_M00_AXI_wdata = PORT_M00_AXI_wdata;
      vcd_write_val(sim_hdl, num++, PORT_M00_AXI_wstrb, 8u);
      backing.PORT_M00_AXI_wstrb = PORT_M00_AXI_wstrb;
      vcd_write_val(sim_hdl, num++, PORT_M00_AXI_wvalid, 1u);
      backing.PORT_M00_AXI_wvalid = PORT_M00_AXI_wvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_araddr, 1u);
      backing.PORT_RDY_M00_AXI_araddr = PORT_RDY_M00_AXI_araddr;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_arprot, 1u);
      backing.PORT_RDY_M00_AXI_arprot = PORT_RDY_M00_AXI_arprot;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_arvalid, 1u);
      backing.PORT_RDY_M00_AXI_arvalid = PORT_RDY_M00_AXI_arvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_awaddr, 1u);
      backing.PORT_RDY_M00_AXI_awaddr = PORT_RDY_M00_AXI_awaddr;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_awprot, 1u);
      backing.PORT_RDY_M00_AXI_awprot = PORT_RDY_M00_AXI_awprot;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_awvalid, 1u);
      backing.PORT_RDY_M00_AXI_awvalid = PORT_RDY_M00_AXI_awvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_bready, 1u);
      backing.PORT_RDY_M00_AXI_bready = PORT_RDY_M00_AXI_bready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_parready, 1u);
      backing.PORT_RDY_M00_AXI_parready = PORT_RDY_M00_AXI_parready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_pawready, 1u);
      backing.PORT_RDY_M00_AXI_pawready = PORT_RDY_M00_AXI_pawready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_pbresp, 1u);
      backing.PORT_RDY_M00_AXI_pbresp = PORT_RDY_M00_AXI_pbresp;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_pbvalid, 1u);
      backing.PORT_RDY_M00_AXI_pbvalid = PORT_RDY_M00_AXI_pbvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_prdata, 1u);
      backing.PORT_RDY_M00_AXI_prdata = PORT_RDY_M00_AXI_prdata;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_prresp, 1u);
      backing.PORT_RDY_M00_AXI_prresp = PORT_RDY_M00_AXI_prresp;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_prvalid, 1u);
      backing.PORT_RDY_M00_AXI_prvalid = PORT_RDY_M00_AXI_prvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_pwready, 1u);
      backing.PORT_RDY_M00_AXI_pwready = PORT_RDY_M00_AXI_pwready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_rready, 1u);
      backing.PORT_RDY_M00_AXI_rready = PORT_RDY_M00_AXI_rready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_wdata, 1u);
      backing.PORT_RDY_M00_AXI_wdata = PORT_RDY_M00_AXI_wdata;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_wstrb, 1u);
      backing.PORT_RDY_M00_AXI_wstrb = PORT_RDY_M00_AXI_wstrb;
      vcd_write_val(sim_hdl, num++, PORT_RDY_M00_AXI_wvalid, 1u);
      backing.PORT_RDY_M00_AXI_wvalid = PORT_RDY_M00_AXI_wvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_arready, 1u);
      backing.PORT_RDY_S00_AXI_arready = PORT_RDY_S00_AXI_arready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_awready, 1u);
      backing.PORT_RDY_S00_AXI_awready = PORT_RDY_S00_AXI_awready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_bresp, 1u);
      backing.PORT_RDY_S00_AXI_bresp = PORT_RDY_S00_AXI_bresp;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_bvalid, 1u);
      backing.PORT_RDY_S00_AXI_bvalid = PORT_RDY_S00_AXI_bvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_paraddr, 1u);
      backing.PORT_RDY_S00_AXI_paraddr = PORT_RDY_S00_AXI_paraddr;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_parprot, 1u);
      backing.PORT_RDY_S00_AXI_parprot = PORT_RDY_S00_AXI_parprot;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_parvalid, 1u);
      backing.PORT_RDY_S00_AXI_parvalid = PORT_RDY_S00_AXI_parvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pawaddr, 1u);
      backing.PORT_RDY_S00_AXI_pawaddr = PORT_RDY_S00_AXI_pawaddr;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pawprot, 1u);
      backing.PORT_RDY_S00_AXI_pawprot = PORT_RDY_S00_AXI_pawprot;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pawvalid, 1u);
      backing.PORT_RDY_S00_AXI_pawvalid = PORT_RDY_S00_AXI_pawvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pbready, 1u);
      backing.PORT_RDY_S00_AXI_pbready = PORT_RDY_S00_AXI_pbready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_prready, 1u);
      backing.PORT_RDY_S00_AXI_prready = PORT_RDY_S00_AXI_prready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pwdata, 1u);
      backing.PORT_RDY_S00_AXI_pwdata = PORT_RDY_S00_AXI_pwdata;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pwstrb, 1u);
      backing.PORT_RDY_S00_AXI_pwstrb = PORT_RDY_S00_AXI_pwstrb;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_pwvalid, 1u);
      backing.PORT_RDY_S00_AXI_pwvalid = PORT_RDY_S00_AXI_pwvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_rdata, 1u);
      backing.PORT_RDY_S00_AXI_rdata = PORT_RDY_S00_AXI_rdata;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_rresp, 1u);
      backing.PORT_RDY_S00_AXI_rresp = PORT_RDY_S00_AXI_rresp;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_rvalid, 1u);
      backing.PORT_RDY_S00_AXI_rvalid = PORT_RDY_S00_AXI_rvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_S00_AXI_wready, 1u);
      backing.PORT_RDY_S00_AXI_wready = PORT_RDY_S00_AXI_wready;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_arready, 1u);
      backing.PORT_S00_AXI_arready = PORT_S00_AXI_arready;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_awready, 1u);
      backing.PORT_S00_AXI_awready = PORT_S00_AXI_awready;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_bresp, 2u);
      backing.PORT_S00_AXI_bresp = PORT_S00_AXI_bresp;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_bvalid, 1u);
      backing.PORT_S00_AXI_bvalid = PORT_S00_AXI_bvalid;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_rdata, 64u);
      backing.PORT_S00_AXI_rdata = PORT_S00_AXI_rdata;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_rresp, 2u);
      backing.PORT_S00_AXI_rresp = PORT_S00_AXI_rresp;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_rvalid, 1u);
      backing.PORT_S00_AXI_rvalid = PORT_S00_AXI_rvalid;
      vcd_write_val(sim_hdl, num++, PORT_S00_AXI_wready, 1u);
      backing.PORT_S00_AXI_wready = PORT_S00_AXI_wready;
    }
}

void MOD_mkAXIConverter::vcd_prims(tVCDDumpType dt, MOD_mkAXIConverter &backing)
{
  INST_address_image_1.dump_VCD(dt, backing.INST_address_image_1);
  INST_address_image_2.dump_VCD(dt, backing.INST_address_image_2);
  INST_buffer.dump_VCD(dt, backing.INST_buffer);
  INST_bufferRowCount.dump_VCD(dt, backing.INST_bufferRowCount);
  INST_buffer_8bit.dump_VCD(dt, backing.INST_buffer_8bit);
  INST_buffer_out.dump_VCD(dt, backing.INST_buffer_out);
  INST_conversion_finished.dump_VCD(dt, backing.INST_conversion_finished);
  INST_converting_flag.dump_VCD(dt, backing.INST_converting_flag);
  INST_ddr_read_count.dump_VCD(dt, backing.INST_ddr_read_count);
  INST_ddr_write_count.dump_VCD(dt, backing.INST_ddr_write_count);
  INST_enq_order.dump_VCD(dt, backing.INST_enq_order);
  INST_gray_data.dump_VCD(dt, backing.INST_gray_data);
  INST_gx_reg11.dump_VCD(dt, backing.INST_gx_reg11);
  INST_gx_reg12.dump_VCD(dt, backing.INST_gx_reg12);
  INST_gx_reg13.dump_VCD(dt, backing.INST_gx_reg13);
  INST_gx_reg21.dump_VCD(dt, backing.INST_gx_reg21);
  INST_gx_reg22.dump_VCD(dt, backing.INST_gx_reg22);
  INST_gx_reg23.dump_VCD(dt, backing.INST_gx_reg23);
  INST_gx_reg31.dump_VCD(dt, backing.INST_gx_reg31);
  INST_gx_reg32.dump_VCD(dt, backing.INST_gx_reg32);
  INST_gx_reg33.dump_VCD(dt, backing.INST_gx_reg33);
  INST_gy_reg11.dump_VCD(dt, backing.INST_gy_reg11);
  INST_gy_reg12.dump_VCD(dt, backing.INST_gy_reg12);
  INST_gy_reg13.dump_VCD(dt, backing.INST_gy_reg13);
  INST_gy_reg21.dump_VCD(dt, backing.INST_gy_reg21);
  INST_gy_reg22.dump_VCD(dt, backing.INST_gy_reg22);
  INST_gy_reg23.dump_VCD(dt, backing.INST_gy_reg23);
  INST_gy_reg31.dump_VCD(dt, backing.INST_gy_reg31);
  INST_gy_reg32.dump_VCD(dt, backing.INST_gy_reg32);
  INST_gy_reg33.dump_VCD(dt, backing.INST_gy_reg33);
  INST_image_length.dump_VCD(dt, backing.INST_image_length);
  INST_image_size.dump_VCD(dt, backing.INST_image_size);
  INST_kernel_size.dump_VCD(dt, backing.INST_kernel_size);
  INST_master_read_araddrOut.dump_VCD(dt, backing.INST_master_read_araddrOut);
  INST_master_read_arprotOut.dump_VCD(dt, backing.INST_master_read_arprotOut);
  INST_master_read_arreadyIn.dump_VCD(dt, backing.INST_master_read_arreadyIn);
  INST_master_read_in.dump_VCD(dt, backing.INST_master_read_in);
  INST_master_read_isRst_isInReset.dump_VCD(dt, backing.INST_master_read_isRst_isInReset);
  INST_master_read_out.dump_VCD(dt, backing.INST_master_read_out);
  INST_master_read_rdataIn.dump_VCD(dt, backing.INST_master_read_rdataIn);
  INST_master_read_rrespIn.dump_VCD(dt, backing.INST_master_read_rrespIn);
  INST_master_read_rvalidIn.dump_VCD(dt, backing.INST_master_read_rvalidIn);
  INST_master_write_addrOut_rv.dump_VCD(dt, backing.INST_master_write_addrOut_rv);
  INST_master_write_awaddrOut.dump_VCD(dt, backing.INST_master_write_awaddrOut);
  INST_master_write_awprotOut.dump_VCD(dt, backing.INST_master_write_awprotOut);
  INST_master_write_awreadyIn.dump_VCD(dt, backing.INST_master_write_awreadyIn);
  INST_master_write_brespIn.dump_VCD(dt, backing.INST_master_write_brespIn);
  INST_master_write_bvalidIn.dump_VCD(dt, backing.INST_master_write_bvalidIn);
  INST_master_write_dataOut_rv.dump_VCD(dt, backing.INST_master_write_dataOut_rv);
  INST_master_write_in.dump_VCD(dt, backing.INST_master_write_in);
  INST_master_write_isRst_isInReset.dump_VCD(dt, backing.INST_master_write_isRst_isInReset);
  INST_master_write_out.dump_VCD(dt, backing.INST_master_write_out);
  INST_master_write_wdataOut.dump_VCD(dt, backing.INST_master_write_wdataOut);
  INST_master_write_wreadyIn.dump_VCD(dt, backing.INST_master_write_wreadyIn);
  INST_master_write_wstrbOut.dump_VCD(dt, backing.INST_master_write_wstrbOut);
  INST_outPixel.dump_VCD(dt, backing.INST_outPixel);
  INST_out_count.dump_VCD(dt, backing.INST_out_count);
  INST_out_hold.dump_VCD(dt, backing.INST_out_hold);
  INST_reg11.dump_VCD(dt, backing.INST_reg11);
  INST_reg12.dump_VCD(dt, backing.INST_reg12);
  INST_reg13.dump_VCD(dt, backing.INST_reg13);
  INST_reg21.dump_VCD(dt, backing.INST_reg21);
  INST_reg22.dump_VCD(dt, backing.INST_reg22);
  INST_reg23.dump_VCD(dt, backing.INST_reg23);
  INST_reg31.dump_VCD(dt, backing.INST_reg31);
  INST_reg32.dump_VCD(dt, backing.INST_reg32);
  INST_reg33.dump_VCD(dt, backing.INST_reg33);
  INST_rowBuffer_1.dump_VCD(dt, backing.INST_rowBuffer_1);
  INST_rowBuffer_2.dump_VCD(dt, backing.INST_rowBuffer_2);
  INST_rowBuffer_inital.dump_VCD(dt, backing.INST_rowBuffer_inital);
  INST_slave_read_araddrIn.dump_VCD(dt, backing.INST_slave_read_araddrIn);
  INST_slave_read_arprotIn.dump_VCD(dt, backing.INST_slave_read_arprotIn);
  INST_slave_read_arvalidIn.dump_VCD(dt, backing.INST_slave_read_arvalidIn);
  INST_slave_read_in.dump_VCD(dt, backing.INST_slave_read_in);
  INST_slave_read_isRst_isInReset.dump_VCD(dt, backing.INST_slave_read_isRst_isInReset);
  INST_slave_read_out.dump_VCD(dt, backing.INST_slave_read_out);
  INST_slave_read_rdataOut.dump_VCD(dt, backing.INST_slave_read_rdataOut);
  INST_slave_read_rreadyIn.dump_VCD(dt, backing.INST_slave_read_rreadyIn);
  INST_slave_read_rrespOut.dump_VCD(dt, backing.INST_slave_read_rrespOut);
  INST_slave_write_addrIn_rv.dump_VCD(dt, backing.INST_slave_write_addrIn_rv);
  INST_slave_write_awaddrIn.dump_VCD(dt, backing.INST_slave_write_awaddrIn);
  INST_slave_write_awprotIn.dump_VCD(dt, backing.INST_slave_write_awprotIn);
  INST_slave_write_awvalidIn.dump_VCD(dt, backing.INST_slave_write_awvalidIn);
  INST_slave_write_breadyIn.dump_VCD(dt, backing.INST_slave_write_breadyIn);
  INST_slave_write_brespOut.dump_VCD(dt, backing.INST_slave_write_brespOut);
  INST_slave_write_dataIn_rv.dump_VCD(dt, backing.INST_slave_write_dataIn_rv);
  INST_slave_write_in.dump_VCD(dt, backing.INST_slave_write_in);
  INST_slave_write_isRst_isInReset.dump_VCD(dt, backing.INST_slave_write_isRst_isInReset);
  INST_slave_write_out.dump_VCD(dt, backing.INST_slave_write_out);
  INST_slave_write_wdataIn.dump_VCD(dt, backing.INST_slave_write_wdataIn);
  INST_slave_write_wstrbIn.dump_VCD(dt, backing.INST_slave_write_wstrbIn);
  INST_slave_write_wvalidIn.dump_VCD(dt, backing.INST_slave_write_wvalidIn);
  INST_slide.dump_VCD(dt, backing.INST_slide);
  INST_slide_finish.dump_VCD(dt, backing.INST_slide_finish);
  INST_slide_position.dump_VCD(dt, backing.INST_slide_position);
  INST_sobelConvert.dump_VCD(dt, backing.INST_sobelConvert);
  INST_sobelState.dump_VCD(dt, backing.INST_sobelState);
  INST_start.dump_VCD(dt, backing.INST_start);
  INST_start_write_request.dump_VCD(dt, backing.INST_start_write_request);
  INST_state_64.dump_VCD(dt, backing.INST_state_64);
  INST_state_temp.dump_VCD(dt, backing.INST_state_temp);
  INST_sum1Buffer.dump_VCD(dt, backing.INST_sum1Buffer);
  INST_sum2Buffer.dump_VCD(dt, backing.INST_sum2Buffer);
  INST_sum_1.dump_VCD(dt, backing.INST_sum_1);
  INST_sum_12.dump_VCD(dt, backing.INST_sum_12);
  INST_sum_2.dump_VCD(dt, backing.INST_sum_2);
  INST_testslideWindow.dump_VCD(dt, backing.INST_testslideWindow);
  INST_testslideWindow_control.dump_VCD(dt, backing.INST_testslideWindow_control);
  INST_testslideWindow_count.dump_VCD(dt, backing.INST_testslideWindow_count);
  INST_threshold.dump_VCD(dt, backing.INST_threshold);
  INST_windowBuffer_once_inital.dump_VCD(dt, backing.INST_windowBuffer_once_inital);
  INST_windowReady.dump_VCD(dt, backing.INST_windowReady);
  INST_windowSlide.dump_VCD(dt, backing.INST_windowSlide);
  INST_window_Initial.dump_VCD(dt, backing.INST_window_Initial);
}
