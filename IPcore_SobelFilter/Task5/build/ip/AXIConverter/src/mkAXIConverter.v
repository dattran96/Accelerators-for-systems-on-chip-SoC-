//
// Generated by Bluespec Compiler (build e76ca21)
//
// On Wed Feb 24 09:00:23 CET 2021
//
//
// Ports:
// Name                         I/O  size props
// S00_AXI_arready                O     1
// S00_AXI_rvalid                 O     1
// S00_AXI_rdata                  O    64
// S00_AXI_rresp                  O     2
// S00_AXI_awready                O     1
// S00_AXI_wready                 O     1
// S00_AXI_bvalid                 O     1
// S00_AXI_bresp                  O     2
// M00_AXI_arvalid                O     1
// M00_AXI_araddr                 O    64
// M00_AXI_arprot                 O     3
// M00_AXI_rready                 O     1
// M00_AXI_awvalid                O     1
// M00_AXI_awaddr                 O    64
// M00_AXI_awprot                 O     3
// M00_AXI_wvalid                 O     1
// M00_AXI_wdata                  O    64
// M00_AXI_wstrb                  O     8
// M00_AXI_bready                 O     1
// aclk                           I     1 clock
// aresetn                        I     1 reset
// S00_AXI_arvalid                I     1
// S00_AXI_araddr                 I    64 reg
// S00_AXI_arprot                 I     3 reg
// S00_AXI_rready                 I     1
// S00_AXI_awvalid                I     1
// S00_AXI_awaddr                 I    64
// S00_AXI_awprot                 I     3
// S00_AXI_wvalid                 I     1
// S00_AXI_wdata                  I    64
// S00_AXI_wstrb                  I     8
// S00_AXI_bready                 I     1
// M00_AXI_arready                I     1
// M00_AXI_rvalid                 I     1
// M00_AXI_rdata                  I    64 reg
// M00_AXI_rresp                  I     2 reg
// M00_AXI_awready                I     1
// M00_AXI_wready                 I     1
// M00_AXI_bvalid                 I     1
// M00_AXI_bresp                  I     2 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAXIConverter(aclk,
		      aresetn,

		      S00_AXI_arready,

		      S00_AXI_arvalid,

		      S00_AXI_araddr,

		      S00_AXI_arprot,

		      S00_AXI_rvalid,

		      S00_AXI_rready,

		      S00_AXI_rdata,

		      S00_AXI_rresp,

		      S00_AXI_awready,

		      S00_AXI_awvalid,

		      S00_AXI_awaddr,

		      S00_AXI_awprot,

		      S00_AXI_wready,

		      S00_AXI_wvalid,

		      S00_AXI_wdata,

		      S00_AXI_wstrb,

		      S00_AXI_bvalid,

		      S00_AXI_bready,

		      S00_AXI_bresp,

		      M00_AXI_arvalid,

		      M00_AXI_arready,

		      M00_AXI_araddr,

		      M00_AXI_arprot,

		      M00_AXI_rready,

		      M00_AXI_rvalid,

		      M00_AXI_rdata,

		      M00_AXI_rresp,

		      M00_AXI_awready,

		      M00_AXI_awvalid,

		      M00_AXI_awaddr,

		      M00_AXI_awprot,

		      M00_AXI_wready,

		      M00_AXI_wvalid,

		      M00_AXI_wdata,

		      M00_AXI_wstrb,

		      M00_AXI_bvalid,

		      M00_AXI_bready,

		      M00_AXI_bresp);
  input  aclk;
  input  aresetn;

  // value method slave_read_fab_arready
  output S00_AXI_arready;

  // action method slave_read_fab_parvalid
  input  S00_AXI_arvalid;

  // action method slave_read_fab_paraddr
  input  [63 : 0] S00_AXI_araddr;

  // action method slave_read_fab_parprot
  input  [2 : 0] S00_AXI_arprot;

  // value method slave_read_fab_rvalid
  output S00_AXI_rvalid;

  // action method slave_read_fab_prready
  input  S00_AXI_rready;

  // value method slave_read_fab_rdata
  output [63 : 0] S00_AXI_rdata;

  // value method slave_read_fab_rresp
  output [1 : 0] S00_AXI_rresp;

  // value method slave_write_fab_awready
  output S00_AXI_awready;

  // action method slave_write_fab_pawvalid
  input  S00_AXI_awvalid;

  // action method slave_write_fab_pawaddr
  input  [63 : 0] S00_AXI_awaddr;

  // action method slave_write_fab_pawprot
  input  [2 : 0] S00_AXI_awprot;

  // value method slave_write_fab_wready
  output S00_AXI_wready;

  // action method slave_write_fab_pwvalid
  input  S00_AXI_wvalid;

  // action method slave_write_fab_pwdata
  input  [63 : 0] S00_AXI_wdata;

  // action method slave_write_fab_pwstrb
  input  [7 : 0] S00_AXI_wstrb;

  // value method slave_write_fab_bvalid
  output S00_AXI_bvalid;

  // action method slave_write_fab_pbready
  input  S00_AXI_bready;

  // value method slave_write_fab_bresp
  output [1 : 0] S00_AXI_bresp;

  // value method master_read_fab_arvalid
  output M00_AXI_arvalid;

  // action method master_read_fab_parready
  input  M00_AXI_arready;

  // value method master_read_fab_araddr
  output [63 : 0] M00_AXI_araddr;

  // value method master_read_fab_arprot
  output [2 : 0] M00_AXI_arprot;

  // value method master_read_fab_rready
  output M00_AXI_rready;

  // action method master_read_fab_prvalid
  input  M00_AXI_rvalid;

  // action method master_read_fab_prdata
  input  [63 : 0] M00_AXI_rdata;

  // action method master_read_fab_prresp
  input  [1 : 0] M00_AXI_rresp;

  // action method master_write_fab_pawready
  input  M00_AXI_awready;

  // value method master_write_fab_awvalid
  output M00_AXI_awvalid;

  // value method master_write_fab_awaddr
  output [63 : 0] M00_AXI_awaddr;

  // value method master_write_fab_awprot
  output [2 : 0] M00_AXI_awprot;

  // action method master_write_fab_pwready
  input  M00_AXI_wready;

  // value method master_write_fab_wvalid
  output M00_AXI_wvalid;

  // value method master_write_fab_wdata
  output [63 : 0] M00_AXI_wdata;

  // value method master_write_fab_wstrb
  output [7 : 0] M00_AXI_wstrb;

  // action method master_write_fab_pbvalid
  input  M00_AXI_bvalid;

  // value method master_write_fab_bready
  output M00_AXI_bready;

  // action method master_write_fab_pbresp
  input  [1 : 0] M00_AXI_bresp;

  // signals for module outputs
  wire [63 : 0] M00_AXI_araddr, M00_AXI_awaddr, M00_AXI_wdata, S00_AXI_rdata;
  wire [7 : 0] M00_AXI_wstrb;
  wire [2 : 0] M00_AXI_arprot, M00_AXI_awprot;
  wire [1 : 0] S00_AXI_bresp, S00_AXI_rresp;
  wire M00_AXI_arvalid,
       M00_AXI_awvalid,
       M00_AXI_bready,
       M00_AXI_rready,
       M00_AXI_wvalid,
       S00_AXI_arready,
       S00_AXI_awready,
       S00_AXI_bvalid,
       S00_AXI_rvalid,
       S00_AXI_wready;

  // inlined wires
  wire [72 : 0] master_write_dataOut_rv$port0__write_1,
		master_write_dataOut_rv$port1__read,
		master_write_dataOut_rv$port2__read,
		slave_write_dataIn_rv$port0__write_1,
		slave_write_dataIn_rv$port1__read,
		slave_write_dataIn_rv$port2__read;
  wire [67 : 0] master_write_addrOut_rv$port0__write_1,
		master_write_addrOut_rv$port1__read,
		master_write_addrOut_rv$port2__read,
		slave_write_addrIn_rv$port0__write_1,
		slave_write_addrIn_rv$port1__read,
		slave_write_addrIn_rv$port2__read;
  wire master_write_addrOut_rv$EN_port0__write,
       master_write_addrOut_rv$EN_port1__write,
       master_write_dataOut_rv$EN_port0__write,
       master_write_dataOut_rv$EN_port1__write,
       slave_write_addrIn_rv$EN_port0__write,
       slave_write_addrIn_rv$EN_port1__write,
       slave_write_dataIn_rv$EN_port0__write,
       slave_write_dataIn_rv$EN_port1__write;

  // register address_image_1
  reg [63 : 0] address_image_1;
  wire [63 : 0] address_image_1$D_IN;
  wire address_image_1$EN;

  // register address_image_2
  reg [63 : 0] address_image_2;
  wire [63 : 0] address_image_2$D_IN;
  wire address_image_2$EN;

  // register bufferRowCount
  reg [31 : 0] bufferRowCount;
  wire [31 : 0] bufferRowCount$D_IN;
  wire bufferRowCount$EN;

  // register conversion_finished
  reg [63 : 0] conversion_finished;
  wire [63 : 0] conversion_finished$D_IN;
  wire conversion_finished$EN;

  // register converting_flag
  reg converting_flag;
  wire converting_flag$D_IN, converting_flag$EN;

  // register ddr_read_count
  reg [63 : 0] ddr_read_count;
  wire [63 : 0] ddr_read_count$D_IN;
  wire ddr_read_count$EN;

  // register ddr_write_count
  reg [63 : 0] ddr_write_count;
  wire [63 : 0] ddr_write_count$D_IN;
  wire ddr_write_count$EN;

  // register endOfbuffer
  reg endOfbuffer;
  wire endOfbuffer$D_IN, endOfbuffer$EN;

  // register enq_order
  reg [2 : 0] enq_order;
  wire [2 : 0] enq_order$D_IN;
  wire enq_order$EN;

  // register gray_data
  reg [8 : 0] gray_data;
  wire [8 : 0] gray_data$D_IN;
  wire gray_data$EN;

  // register gx_reg11
  reg [7 : 0] gx_reg11;
  wire [7 : 0] gx_reg11$D_IN;
  wire gx_reg11$EN;

  // register gx_reg12
  reg [7 : 0] gx_reg12;
  wire [7 : 0] gx_reg12$D_IN;
  wire gx_reg12$EN;

  // register gx_reg13
  reg [7 : 0] gx_reg13;
  wire [7 : 0] gx_reg13$D_IN;
  wire gx_reg13$EN;

  // register gx_reg21
  reg [7 : 0] gx_reg21;
  wire [7 : 0] gx_reg21$D_IN;
  wire gx_reg21$EN;

  // register gx_reg22
  reg [7 : 0] gx_reg22;
  wire [7 : 0] gx_reg22$D_IN;
  wire gx_reg22$EN;

  // register gx_reg23
  reg [7 : 0] gx_reg23;
  wire [7 : 0] gx_reg23$D_IN;
  wire gx_reg23$EN;

  // register gx_reg31
  reg [7 : 0] gx_reg31;
  wire [7 : 0] gx_reg31$D_IN;
  wire gx_reg31$EN;

  // register gx_reg32
  reg [7 : 0] gx_reg32;
  wire [7 : 0] gx_reg32$D_IN;
  wire gx_reg32$EN;

  // register gx_reg33
  reg [7 : 0] gx_reg33;
  wire [7 : 0] gx_reg33$D_IN;
  wire gx_reg33$EN;

  // register gy_reg11
  reg [7 : 0] gy_reg11;
  wire [7 : 0] gy_reg11$D_IN;
  wire gy_reg11$EN;

  // register gy_reg12
  reg [7 : 0] gy_reg12;
  wire [7 : 0] gy_reg12$D_IN;
  wire gy_reg12$EN;

  // register gy_reg13
  reg [7 : 0] gy_reg13;
  wire [7 : 0] gy_reg13$D_IN;
  wire gy_reg13$EN;

  // register gy_reg21
  reg [7 : 0] gy_reg21;
  wire [7 : 0] gy_reg21$D_IN;
  wire gy_reg21$EN;

  // register gy_reg22
  reg [7 : 0] gy_reg22;
  wire [7 : 0] gy_reg22$D_IN;
  wire gy_reg22$EN;

  // register gy_reg23
  reg [7 : 0] gy_reg23;
  wire [7 : 0] gy_reg23$D_IN;
  wire gy_reg23$EN;

  // register gy_reg31
  reg [7 : 0] gy_reg31;
  wire [7 : 0] gy_reg31$D_IN;
  wire gy_reg31$EN;

  // register gy_reg32
  reg [7 : 0] gy_reg32;
  wire [7 : 0] gy_reg32$D_IN;
  wire gy_reg32$EN;

  // register gy_reg33
  reg [7 : 0] gy_reg33;
  wire [7 : 0] gy_reg33$D_IN;
  wire gy_reg33$EN;

  // register image_length
  reg [31 : 0] image_length;
  wire [31 : 0] image_length$D_IN;
  wire image_length$EN;

  // register image_size
  reg [63 : 0] image_size;
  wire [63 : 0] image_size$D_IN;
  wire image_size$EN;

  // register kernel_size
  reg [31 : 0] kernel_size;
  wire [31 : 0] kernel_size$D_IN;
  wire kernel_size$EN;

  // register master_read_isRst_isInReset
  reg master_read_isRst_isInReset;
  wire master_read_isRst_isInReset$D_IN, master_read_isRst_isInReset$EN;

  // register master_write_addrOut_rv
  reg [67 : 0] master_write_addrOut_rv;
  wire [67 : 0] master_write_addrOut_rv$D_IN;
  wire master_write_addrOut_rv$EN;

  // register master_write_dataOut_rv
  reg [72 : 0] master_write_dataOut_rv;
  wire [72 : 0] master_write_dataOut_rv$D_IN;
  wire master_write_dataOut_rv$EN;

  // register master_write_isRst_isInReset
  reg master_write_isRst_isInReset;
  wire master_write_isRst_isInReset$D_IN, master_write_isRst_isInReset$EN;

  // register outPixel
  reg [7 : 0] outPixel;
  wire [7 : 0] outPixel$D_IN;
  wire outPixel$EN;

  // register out_count
  reg [7 : 0] out_count;
  wire [7 : 0] out_count$D_IN;
  wire out_count$EN;

  // register out_hold
  reg [63 : 0] out_hold;
  reg [63 : 0] out_hold$D_IN;
  wire out_hold$EN;

  // register reg11
  reg [7 : 0] reg11;
  wire [7 : 0] reg11$D_IN;
  wire reg11$EN;

  // register reg12
  reg [7 : 0] reg12;
  wire [7 : 0] reg12$D_IN;
  wire reg12$EN;

  // register reg13
  reg [7 : 0] reg13;
  wire [7 : 0] reg13$D_IN;
  wire reg13$EN;

  // register reg21
  reg [7 : 0] reg21;
  wire [7 : 0] reg21$D_IN;
  wire reg21$EN;

  // register reg22
  reg [7 : 0] reg22;
  wire [7 : 0] reg22$D_IN;
  wire reg22$EN;

  // register reg23
  reg [7 : 0] reg23;
  wire [7 : 0] reg23$D_IN;
  wire reg23$EN;

  // register reg31
  reg [7 : 0] reg31;
  wire [7 : 0] reg31$D_IN;
  wire reg31$EN;

  // register reg32
  reg [7 : 0] reg32;
  wire [7 : 0] reg32$D_IN;
  wire reg32$EN;

  // register reg33
  reg [7 : 0] reg33;
  wire [7 : 0] reg33$D_IN;
  wire reg33$EN;

  // register rowBuffer_inital
  reg rowBuffer_inital;
  wire rowBuffer_inital$D_IN, rowBuffer_inital$EN;

  // register slave_read_isRst_isInReset
  reg slave_read_isRst_isInReset;
  wire slave_read_isRst_isInReset$D_IN, slave_read_isRst_isInReset$EN;

  // register slave_write_addrIn_rv
  reg [67 : 0] slave_write_addrIn_rv;
  wire [67 : 0] slave_write_addrIn_rv$D_IN;
  wire slave_write_addrIn_rv$EN;

  // register slave_write_dataIn_rv
  reg [72 : 0] slave_write_dataIn_rv;
  wire [72 : 0] slave_write_dataIn_rv$D_IN;
  wire slave_write_dataIn_rv$EN;

  // register slave_write_isRst_isInReset
  reg slave_write_isRst_isInReset;
  wire slave_write_isRst_isInReset$D_IN, slave_write_isRst_isInReset$EN;

  // register slide
  reg slide;
  wire slide$D_IN, slide$EN;

  // register slide_finish
  reg slide_finish;
  wire slide_finish$D_IN, slide_finish$EN;

  // register slide_position
  reg [31 : 0] slide_position;
  wire [31 : 0] slide_position$D_IN;
  wire slide_position$EN;

  // register sobelConvert
  reg sobelConvert;
  reg sobelConvert$D_IN;
  wire sobelConvert$EN;

  // register sobelState
  reg [7 : 0] sobelState;
  reg [7 : 0] sobelState$D_IN;
  wire sobelState$EN;

  // register start
  reg [63 : 0] start;
  wire [63 : 0] start$D_IN;
  wire start$EN;

  // register start_write_request
  reg start_write_request;
  wire start_write_request$D_IN, start_write_request$EN;

  // register state_64
  reg [63 : 0] state_64;
  wire [63 : 0] state_64$D_IN;
  wire state_64$EN;

  // register state_temp
  reg [7 : 0] state_temp;
  reg [7 : 0] state_temp$D_IN;
  wire state_temp$EN;

  // register sum_1
  reg [15 : 0] sum_1;
  wire [15 : 0] sum_1$D_IN;
  wire sum_1$EN;

  // register sum_12
  reg [15 : 0] sum_12;
  wire [15 : 0] sum_12$D_IN;
  wire sum_12$EN;

  // register sum_2
  reg [15 : 0] sum_2;
  wire [15 : 0] sum_2$D_IN;
  wire sum_2$EN;

  // register tempcount
  reg [31 : 0] tempcount;
  wire [31 : 0] tempcount$D_IN;
  wire tempcount$EN;

  // register testslideWindow_control
  reg testslideWindow_control;
  wire testslideWindow_control$D_IN, testslideWindow_control$EN;

  // register testslideWindow_count
  reg [7 : 0] testslideWindow_count;
  wire [7 : 0] testslideWindow_count$D_IN;
  wire testslideWindow_count$EN;

  // register threshold
  reg [15 : 0] threshold;
  wire [15 : 0] threshold$D_IN;
  wire threshold$EN;

  // register windowBuffer_once_inital
  reg windowBuffer_once_inital;
  wire windowBuffer_once_inital$D_IN, windowBuffer_once_inital$EN;

  // register windowReady
  reg windowReady;
  wire windowReady$D_IN, windowReady$EN;

  // register windowSlide
  reg windowSlide;
  wire windowSlide$D_IN, windowSlide$EN;

  // register window_Initial
  reg window_Initial;
  reg window_Initial$D_IN;
  wire window_Initial$EN;

  // ports of submodule buffer
  wire [63 : 0] buffer$D_IN, buffer$D_OUT;
  wire buffer$CLR, buffer$DEQ, buffer$EMPTY_N, buffer$ENQ, buffer$FULL_N;

  // ports of submodule buffer_8bit
  reg [7 : 0] buffer_8bit$D_IN;
  wire [7 : 0] buffer_8bit$D_OUT;
  wire buffer_8bit$CLR,
       buffer_8bit$DEQ,
       buffer_8bit$EMPTY_N,
       buffer_8bit$ENQ,
       buffer_8bit$FULL_N;

  // ports of submodule buffer_out
  wire [63 : 0] buffer_out$D_IN, buffer_out$D_OUT;
  wire buffer_out$CLR,
       buffer_out$DEQ,
       buffer_out$EMPTY_N,
       buffer_out$ENQ,
       buffer_out$FULL_N;

  // ports of submodule master_read_in
  wire [66 : 0] master_read_in$D_IN, master_read_in$D_OUT;
  wire master_read_in$CLR,
       master_read_in$DEQ,
       master_read_in$EMPTY_N,
       master_read_in$ENQ,
       master_read_in$FULL_N;

  // ports of submodule master_read_out
  wire [65 : 0] master_read_out$D_IN, master_read_out$D_OUT;
  wire master_read_out$CLR,
       master_read_out$DEQ,
       master_read_out$EMPTY_N,
       master_read_out$ENQ,
       master_read_out$FULL_N;

  // ports of submodule master_write_in
  wire [138 : 0] master_write_in$D_IN, master_write_in$D_OUT;
  wire master_write_in$CLR,
       master_write_in$DEQ,
       master_write_in$EMPTY_N,
       master_write_in$ENQ,
       master_write_in$FULL_N;

  // ports of submodule master_write_out
  wire [1 : 0] master_write_out$D_IN;
  wire master_write_out$CLR,
       master_write_out$DEQ,
       master_write_out$EMPTY_N,
       master_write_out$ENQ,
       master_write_out$FULL_N;

  // ports of submodule rowBuffer_1
  wire [7 : 0] rowBuffer_1$D_IN, rowBuffer_1$D_OUT;
  wire rowBuffer_1$CLR,
       rowBuffer_1$DEQ,
       rowBuffer_1$EMPTY_N,
       rowBuffer_1$ENQ,
       rowBuffer_1$FULL_N;

  // ports of submodule rowBuffer_2
  wire [7 : 0] rowBuffer_2$D_IN, rowBuffer_2$D_OUT;
  wire rowBuffer_2$CLR,
       rowBuffer_2$DEQ,
       rowBuffer_2$EMPTY_N,
       rowBuffer_2$ENQ,
       rowBuffer_2$FULL_N;

  // ports of submodule slave_read_in
  wire [66 : 0] slave_read_in$D_IN, slave_read_in$D_OUT;
  wire slave_read_in$CLR,
       slave_read_in$DEQ,
       slave_read_in$EMPTY_N,
       slave_read_in$ENQ,
       slave_read_in$FULL_N;

  // ports of submodule slave_read_out
  wire [65 : 0] slave_read_out$D_IN, slave_read_out$D_OUT;
  wire slave_read_out$CLR,
       slave_read_out$DEQ,
       slave_read_out$EMPTY_N,
       slave_read_out$ENQ,
       slave_read_out$FULL_N;

  // ports of submodule slave_write_in
  wire [138 : 0] slave_write_in$D_IN, slave_write_in$D_OUT;
  wire slave_write_in$CLR,
       slave_write_in$DEQ,
       slave_write_in$EMPTY_N,
       slave_write_in$ENQ,
       slave_write_in$FULL_N;

  // ports of submodule slave_write_out
  wire [1 : 0] slave_write_out$D_IN, slave_write_out$D_OUT;
  wire slave_write_out$CLR,
       slave_write_out$DEQ,
       slave_write_out$EMPTY_N,
       slave_write_out$ENQ,
       slave_write_out$FULL_N;

  // ports of submodule sum1Buffer
  wire [7 : 0] sum1Buffer$D_IN;
  wire sum1Buffer$CLR, sum1Buffer$DEQ, sum1Buffer$ENQ;

  // ports of submodule sum2Buffer
  wire [7 : 0] sum2Buffer$D_IN;
  wire sum2Buffer$CLR, sum2Buffer$DEQ, sum2Buffer$ENQ;

  // ports of submodule testslideWindow
  wire [7 : 0] testslideWindow$D_IN;
  wire testslideWindow$CLR,
       testslideWindow$DEQ,
       testslideWindow$ENQ,
       testslideWindow$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_absSum1,
       WILL_FIRE_RL_enq_64,
       WILL_FIRE_RL_handleWriteRequest,
       WILL_FIRE_RL_limitMagnitude,
       WILL_FIRE_RL_localDataBuffer_8bit,
       WILL_FIRE_RL_readRequest,
       WILL_FIRE_RL_rowBufferInital,
       WILL_FIRE_RL_rowBufferInital_finish,
       WILL_FIRE_RL_sobelOperator,
       WILL_FIRE_RL_sumUp,
       WILL_FIRE_RL_thresholdPixel,
       WILL_FIRE_RL_windowBuffer_inital,
       WILL_FIRE_RL_windowBuffer_inital_2,
       WILL_FIRE_RL_windowBuffer_inital_3,
       WILL_FIRE_RL_windowBuffer_inital_end,
       WILL_FIRE_RL_windowBuffer_slide,
       WILL_FIRE_RL_writePixel,
       WILL_FIRE_RL_writeRequest;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_sum_1$write_1__VAL_2,
		MUX_sum_12$write_1__VAL_2,
		MUX_sum_2$write_1__VAL_2;
  wire [7 : 0] MUX_out_count$write_1__VAL_2,
	       MUX_sobelState$write_1__VAL_2,
	       MUX_state_temp$write_1__VAL_3;
  wire MUX_conversion_finished$write_1__SEL_1,
       MUX_out_count$write_1__SEL_1,
       MUX_out_count$write_1__SEL_2,
       MUX_slide$write_1__SEL_1,
       MUX_slide_finish$write_1__SEL_1,
       MUX_slide_finish$write_1__SEL_2,
       MUX_sobelConvert$write_1__VAL_3,
       MUX_sobelState$write_1__SEL_2,
       MUX_state_temp$write_1__SEL_1,
       MUX_state_temp$write_1__SEL_2,
       MUX_state_temp$write_1__SEL_3,
       MUX_sum_1$write_1__SEL_1,
       MUX_sum_12$write_1__SEL_1,
       MUX_sum_2$write_1__SEL_1,
       MUX_window_Initial$write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141;
  wire [63 : 0] addr__h13031,
		addr__h6492,
		image_length_67_MUL_image_length_67___d283,
		tmp__h12943,
		x__h11590,
		x__h11727,
		x__h11864,
		x__h12001,
		x__h12138,
		x__h12275,
		x__h12412,
		x__h12549,
		x__h13116,
		x__h6540;
  wire [31 : 0] sum_1_98_MUL_65535___d400,
		sum_2_02_MUL_65535___d404,
		x__h9021,
		x__h9120,
		y__h9119,
		y__h9226;
  wire [15 : 0] SEXT_gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0_0_ETC___d325,
		SEXT_gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0_0_ETC___d340,
		SEXT_gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0_5_ETC___d369,
		SEXT_gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0_5_ETC___d384,
		gx_reg11_06_MUL_reg11_07___d308,
		gx_reg12_11_MUL_reg12_44___d312,
		gx_reg13_16_MUL_reg13_45___d317,
		gx_reg21_21_MUL_reg21_52___d322,
		gx_reg22_26_MUL_reg22_53___d327,
		gx_reg23_31_MUL_reg23_54___d332,
		gx_reg31_36_MUL_reg31_60___d337,
		gx_reg32_41_MUL_reg32_61___d342,
		gx_reg33_46_MUL_reg33_62___d347,
		gy_reg11_51_MUL_reg11_07___d352,
		gy_reg12_55_MUL_reg12_44___d356,
		gy_reg13_60_MUL_reg13_45___d361,
		gy_reg21_65_MUL_reg21_52___d366,
		gy_reg22_70_MUL_reg22_53___d371,
		gy_reg23_75_MUL_reg23_54___d376,
		gy_reg31_80_MUL_reg31_60___d381,
		gy_reg32_85_MUL_reg32_61___d386,
		gy_reg33_90_MUL_reg33_62___d391;
  wire [7 : 0] gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0__q1,
	       gx_reg12_11_MUL_reg12_44_12_BITS_7_TO_0__q2,
	       gx_reg13_16_MUL_reg13_45_17_BITS_7_TO_0__q3,
	       gx_reg21_21_MUL_reg21_52_22_BITS_7_TO_0__q4,
	       gx_reg22_26_MUL_reg22_53_27_BITS_7_TO_0__q5,
	       gx_reg23_31_MUL_reg23_54_32_BITS_7_TO_0__q6,
	       gx_reg31_36_MUL_reg31_60_37_BITS_7_TO_0__q7,
	       gx_reg32_41_MUL_reg32_61_42_BITS_7_TO_0__q15,
	       gx_reg33_46_MUL_reg33_62_47_BITS_7_TO_0__q16,
	       gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0__q8,
	       gy_reg12_55_MUL_reg12_44_56_BITS_7_TO_0__q9,
	       gy_reg13_60_MUL_reg13_45_61_BITS_7_TO_0__q10,
	       gy_reg21_65_MUL_reg21_52_66_BITS_7_TO_0__q11,
	       gy_reg22_70_MUL_reg22_53_71_BITS_7_TO_0__q12,
	       gy_reg23_75_MUL_reg23_54_76_BITS_7_TO_0__q13,
	       gy_reg31_80_MUL_reg31_60_81_BITS_7_TO_0__q14,
	       gy_reg32_85_MUL_reg32_61_86_BITS_7_TO_0__q17,
	       gy_reg33_90_MUL_reg33_62_91_BITS_7_TO_0__q18;
  wire NOT_sum_12_11_SLE_255_12___d413,
       bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286,
       bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d476,
       bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279,
       ddr_write_count_88_ULT_260096___d492;

  // value method slave_read_fab_arready
  assign S00_AXI_arready =
	     !slave_read_isRst_isInReset && slave_read_in$FULL_N ;

  // value method slave_read_fab_rvalid
  assign S00_AXI_rvalid =
	     !slave_read_isRst_isInReset && slave_read_out$EMPTY_N ;

  // value method slave_read_fab_rdata
  assign S00_AXI_rdata =
	     slave_read_out$EMPTY_N ? slave_read_out$D_OUT[65:2] : 64'd0 ;

  // value method slave_read_fab_rresp
  assign S00_AXI_rresp =
	     slave_read_out$EMPTY_N ? slave_read_out$D_OUT[1:0] : 2'd0 ;

  // value method slave_write_fab_awready
  assign S00_AXI_awready =
	     !slave_write_isRst_isInReset && !slave_write_addrIn_rv[67] ;

  // value method slave_write_fab_wready
  assign S00_AXI_wready =
	     !slave_write_isRst_isInReset && !slave_write_dataIn_rv[72] ;

  // value method slave_write_fab_bvalid
  assign S00_AXI_bvalid =
	     !slave_write_isRst_isInReset && slave_write_out$EMPTY_N ;

  // value method slave_write_fab_bresp
  assign S00_AXI_bresp =
	     slave_write_out$EMPTY_N ? slave_write_out$D_OUT : 2'd0 ;

  // value method master_read_fab_arvalid
  assign M00_AXI_arvalid =
	     !master_read_isRst_isInReset && master_read_in$EMPTY_N ;

  // value method master_read_fab_araddr
  assign M00_AXI_araddr =
	     master_read_in$EMPTY_N ? master_read_in$D_OUT[66:3] : 64'd0 ;

  // value method master_read_fab_arprot
  assign M00_AXI_arprot =
	     master_read_in$EMPTY_N ? master_read_in$D_OUT[2:0] : 3'd0 ;

  // value method master_read_fab_rready
  assign M00_AXI_rready =
	     !master_read_isRst_isInReset && master_read_out$FULL_N ;

  // value method master_write_fab_awvalid
  assign M00_AXI_awvalid =
	     !master_write_isRst_isInReset &&
	     master_write_addrOut_rv$port1__read[67] ;

  // value method master_write_fab_awaddr
  assign M00_AXI_awaddr =
	     master_write_addrOut_rv$port1__read[67] ?
	       master_write_addrOut_rv$port1__read[66:3] :
	       64'd0 ;

  // value method master_write_fab_awprot
  assign M00_AXI_awprot =
	     master_write_addrOut_rv$port1__read[67] ?
	       master_write_addrOut_rv$port1__read[2:0] :
	       3'd0 ;

  // value method master_write_fab_wvalid
  assign M00_AXI_wvalid =
	     !master_write_isRst_isInReset &&
	     master_write_dataOut_rv$port1__read[72] ;

  // value method master_write_fab_wdata
  assign M00_AXI_wdata =
	     master_write_dataOut_rv$port1__read[72] ?
	       master_write_dataOut_rv$port1__read[71:8] :
	       64'd0 ;

  // value method master_write_fab_wstrb
  assign M00_AXI_wstrb =
	     master_write_dataOut_rv$port1__read[72] ?
	       master_write_dataOut_rv$port1__read[7:0] :
	       8'd0 ;

  // value method master_write_fab_bready
  assign M00_AXI_bready =
	     !master_write_isRst_isInReset && master_write_out$FULL_N ;

  // submodule buffer
  SizedFIFO #(.p1width(32'd64),
	      .p2depth(32'd10),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) buffer(.RST(aresetn),
				      .CLK(aclk),
				      .D_IN(buffer$D_IN),
				      .ENQ(buffer$ENQ),
				      .DEQ(buffer$DEQ),
				      .CLR(buffer$CLR),
				      .D_OUT(buffer$D_OUT),
				      .FULL_N(buffer$FULL_N),
				      .EMPTY_N(buffer$EMPTY_N));

  // submodule buffer_8bit
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) buffer_8bit(.RST(aresetn),
					   .CLK(aclk),
					   .D_IN(buffer_8bit$D_IN),
					   .ENQ(buffer_8bit$ENQ),
					   .DEQ(buffer_8bit$DEQ),
					   .CLR(buffer_8bit$CLR),
					   .D_OUT(buffer_8bit$D_OUT),
					   .FULL_N(buffer_8bit$FULL_N),
					   .EMPTY_N(buffer_8bit$EMPTY_N));

  // submodule buffer_out
  SizedFIFO #(.p1width(32'd64),
	      .p2depth(32'd100),
	      .p3cntr_width(32'd7),
	      .guarded(32'd1)) buffer_out(.RST(aresetn),
					  .CLK(aclk),
					  .D_IN(buffer_out$D_IN),
					  .ENQ(buffer_out$ENQ),
					  .DEQ(buffer_out$DEQ),
					  .CLR(buffer_out$CLR),
					  .D_OUT(buffer_out$D_OUT),
					  .FULL_N(buffer_out$FULL_N),
					  .EMPTY_N(buffer_out$EMPTY_N));

  // submodule master_read_in
  FIFO2 #(.width(32'd67), .guarded(32'd1)) master_read_in(.RST(aresetn),
							  .CLK(aclk),
							  .D_IN(master_read_in$D_IN),
							  .ENQ(master_read_in$ENQ),
							  .DEQ(master_read_in$DEQ),
							  .CLR(master_read_in$CLR),
							  .D_OUT(master_read_in$D_OUT),
							  .FULL_N(master_read_in$FULL_N),
							  .EMPTY_N(master_read_in$EMPTY_N));

  // submodule master_read_out
  FIFO2 #(.width(32'd66), .guarded(32'd1)) master_read_out(.RST(aresetn),
							   .CLK(aclk),
							   .D_IN(master_read_out$D_IN),
							   .ENQ(master_read_out$ENQ),
							   .DEQ(master_read_out$DEQ),
							   .CLR(master_read_out$CLR),
							   .D_OUT(master_read_out$D_OUT),
							   .FULL_N(master_read_out$FULL_N),
							   .EMPTY_N(master_read_out$EMPTY_N));

  // submodule master_write_in
  FIFO2 #(.width(32'd139), .guarded(32'd1)) master_write_in(.RST(aresetn),
							    .CLK(aclk),
							    .D_IN(master_write_in$D_IN),
							    .ENQ(master_write_in$ENQ),
							    .DEQ(master_write_in$DEQ),
							    .CLR(master_write_in$CLR),
							    .D_OUT(master_write_in$D_OUT),
							    .FULL_N(master_write_in$FULL_N),
							    .EMPTY_N(master_write_in$EMPTY_N));

  // submodule master_write_out
  FIFO2 #(.width(32'd2), .guarded(32'd1)) master_write_out(.RST(aresetn),
							   .CLK(aclk),
							   .D_IN(master_write_out$D_IN),
							   .ENQ(master_write_out$ENQ),
							   .DEQ(master_write_out$DEQ),
							   .CLR(master_write_out$CLR),
							   .D_OUT(),
							   .FULL_N(master_write_out$FULL_N),
							   .EMPTY_N(master_write_out$EMPTY_N));

  // submodule rowBuffer_1
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd509),
	      .p3cntr_width(32'd9),
	      .guarded(32'd1)) rowBuffer_1(.RST(aresetn),
					   .CLK(aclk),
					   .D_IN(rowBuffer_1$D_IN),
					   .ENQ(rowBuffer_1$ENQ),
					   .DEQ(rowBuffer_1$DEQ),
					   .CLR(rowBuffer_1$CLR),
					   .D_OUT(rowBuffer_1$D_OUT),
					   .FULL_N(rowBuffer_1$FULL_N),
					   .EMPTY_N(rowBuffer_1$EMPTY_N));

  // submodule rowBuffer_2
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd509),
	      .p3cntr_width(32'd9),
	      .guarded(32'd1)) rowBuffer_2(.RST(aresetn),
					   .CLK(aclk),
					   .D_IN(rowBuffer_2$D_IN),
					   .ENQ(rowBuffer_2$ENQ),
					   .DEQ(rowBuffer_2$DEQ),
					   .CLR(rowBuffer_2$CLR),
					   .D_OUT(rowBuffer_2$D_OUT),
					   .FULL_N(rowBuffer_2$FULL_N),
					   .EMPTY_N(rowBuffer_2$EMPTY_N));

  // submodule slave_read_in
  FIFO2 #(.width(32'd67), .guarded(32'd1)) slave_read_in(.RST(aresetn),
							 .CLK(aclk),
							 .D_IN(slave_read_in$D_IN),
							 .ENQ(slave_read_in$ENQ),
							 .DEQ(slave_read_in$DEQ),
							 .CLR(slave_read_in$CLR),
							 .D_OUT(slave_read_in$D_OUT),
							 .FULL_N(slave_read_in$FULL_N),
							 .EMPTY_N(slave_read_in$EMPTY_N));

  // submodule slave_read_out
  FIFO2 #(.width(32'd66), .guarded(32'd1)) slave_read_out(.RST(aresetn),
							  .CLK(aclk),
							  .D_IN(slave_read_out$D_IN),
							  .ENQ(slave_read_out$ENQ),
							  .DEQ(slave_read_out$DEQ),
							  .CLR(slave_read_out$CLR),
							  .D_OUT(slave_read_out$D_OUT),
							  .FULL_N(slave_read_out$FULL_N),
							  .EMPTY_N(slave_read_out$EMPTY_N));

  // submodule slave_write_in
  FIFO2 #(.width(32'd139), .guarded(32'd1)) slave_write_in(.RST(aresetn),
							   .CLK(aclk),
							   .D_IN(slave_write_in$D_IN),
							   .ENQ(slave_write_in$ENQ),
							   .DEQ(slave_write_in$DEQ),
							   .CLR(slave_write_in$CLR),
							   .D_OUT(slave_write_in$D_OUT),
							   .FULL_N(slave_write_in$FULL_N),
							   .EMPTY_N(slave_write_in$EMPTY_N));

  // submodule slave_write_out
  FIFO2 #(.width(32'd2), .guarded(32'd1)) slave_write_out(.RST(aresetn),
							  .CLK(aclk),
							  .D_IN(slave_write_out$D_IN),
							  .ENQ(slave_write_out$ENQ),
							  .DEQ(slave_write_out$DEQ),
							  .CLR(slave_write_out$CLR),
							  .D_OUT(slave_write_out$D_OUT),
							  .FULL_N(slave_write_out$FULL_N),
							  .EMPTY_N(slave_write_out$EMPTY_N));

  // submodule sum1Buffer
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd5),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) sum1Buffer(.RST(aresetn),
					  .CLK(aclk),
					  .D_IN(sum1Buffer$D_IN),
					  .ENQ(sum1Buffer$ENQ),
					  .DEQ(sum1Buffer$DEQ),
					  .CLR(sum1Buffer$CLR),
					  .D_OUT(),
					  .FULL_N(),
					  .EMPTY_N());

  // submodule sum2Buffer
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd5),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) sum2Buffer(.RST(aresetn),
					  .CLK(aclk),
					  .D_IN(sum2Buffer$D_IN),
					  .ENQ(sum2Buffer$ENQ),
					  .DEQ(sum2Buffer$DEQ),
					  .CLR(sum2Buffer$CLR),
					  .D_OUT(),
					  .FULL_N(),
					  .EMPTY_N());

  // submodule testslideWindow
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd64),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) testslideWindow(.RST(aresetn),
					       .CLK(aclk),
					       .D_IN(testslideWindow$D_IN),
					       .ENQ(testslideWindow$ENQ),
					       .DEQ(testslideWindow$DEQ),
					       .CLR(testslideWindow$CLR),
					       .D_OUT(),
					       .FULL_N(testslideWindow$FULL_N),
					       .EMPTY_N());

  // rule RL_localDataBuffer_8bit
  assign WILL_FIRE_RL_localDataBuffer_8bit =
	     buffer$EMPTY_N && buffer_8bit$FULL_N && !buffer_8bit$EMPTY_N ;

  // rule RL_rowBufferInital
  assign WILL_FIRE_RL_rowBufferInital =
	     rowBuffer_1$FULL_N && rowBuffer_2$FULL_N && rowBuffer_inital ;

  // rule RL_rowBufferInital_finish
  assign WILL_FIRE_RL_rowBufferInital_finish =
	     !rowBuffer_1$FULL_N && rowBuffer_inital ;

  // rule RL_sobelOperator
  assign WILL_FIRE_RL_sobelOperator = sobelConvert && sobelState == 8'd0 ;

  // rule RL_windowBuffer_inital
  assign WILL_FIRE_RL_windowBuffer_inital =
	     rowBuffer_1$EMPTY_N && window_Initial && !rowBuffer_inital &&
	     state_temp == 8'd0 &&
	     !testslideWindow_control ;

  // rule RL_windowBuffer_inital_2
  assign WILL_FIRE_RL_windowBuffer_inital_2 =
	     rowBuffer_1$FULL_N && rowBuffer_2$EMPTY_N &&
	     state_temp == 8'd1 &&
	     !WILL_FIRE_RL_rowBufferInital ;

  // rule RL_absSum1
  assign WILL_FIRE_RL_absSum1 = sobelConvert && sobelState == 8'd1 ;

  // rule RL_sumUp
  assign WILL_FIRE_RL_sumUp = sobelConvert && sobelState == 8'd2 ;

  // rule RL_limitMagnitude
  assign WILL_FIRE_RL_limitMagnitude = sobelConvert && sobelState == 8'd3 ;

  // rule RL_thresholdPixel
  assign WILL_FIRE_RL_thresholdPixel = sobelConvert && sobelState == 8'd4 ;

  // rule RL_writePixel
  assign WILL_FIRE_RL_writePixel = sobelConvert && sobelState == 8'd5 ;

  // rule RL_windowBuffer_slide
  assign WILL_FIRE_RL_windowBuffer_slide =
	     slide && state_temp == 8'd3 &&
	     !WILL_FIRE_RL_windowBuffer_inital_end ;

  // rule RL_enq_64
  assign WILL_FIRE_RL_enq_64 =
	     buffer_out$FULL_N && sobelConvert && sobelState == 8'd6 &&
	     !WILL_FIRE_RL_windowBuffer_slide ;

  // rule RL_windowBuffer_inital_3
  assign WILL_FIRE_RL_windowBuffer_inital_3 =
	     rowBuffer_2$FULL_N && buffer_8bit$EMPTY_N &&
	     state_temp == 8'd2 &&
	     !WILL_FIRE_RL_rowBufferInital ;

  // rule RL_windowBuffer_inital_end
  assign WILL_FIRE_RL_windowBuffer_inital_end =
	     window_Initial && !rowBuffer_inital && state_temp == 8'd3 &&
	     !windowBuffer_once_inital ;

  // rule RL_readRequest
  assign WILL_FIRE_RL_readRequest =
	     master_read_in$FULL_N && start != 64'd0 &&
	     conversion_finished == 64'd0 ;

  // rule RL_writeRequest
  assign WILL_FIRE_RL_writeRequest =
	     master_write_in$FULL_N && buffer_out$EMPTY_N &&
	     conversion_finished != 64'd1 ;

  // rule RL_handleWriteRequest
  assign WILL_FIRE_RL_handleWriteRequest =
	     slave_write_in$EMPTY_N && slave_write_out$FULL_N &&
	     !start_write_request ;

  // inputs to muxes for submodule ports
  assign MUX_conversion_finished$write_1__SEL_1 =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[80:75] == 6'd16 ;
  assign MUX_out_count$write_1__SEL_1 =
	     WILL_FIRE_RL_enq_64 && out_count == 8'd8 ;
  assign MUX_out_count$write_1__SEL_2 =
	     WILL_FIRE_RL_writePixel &&
	     (out_count == 8'd0 || out_count == 8'd1 || out_count == 8'd2 ||
	      out_count == 8'd3 ||
	      out_count == 8'd4 ||
	      out_count == 8'd5 ||
	      out_count == 8'd6 ||
	      out_count == 8'd7) ;
  assign MUX_slide$write_1__SEL_1 =
	     WILL_FIRE_RL_windowBuffer_slide &&
	     (slide_finish && slide_position != 32'd1 &&
	      slide_position != 32'd2 ||
	      !bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286) ;
  assign MUX_slide_finish$write_1__SEL_1 =
	     WILL_FIRE_RL_windowBuffer_inital_end &&
	     !bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279 ;
  assign MUX_slide_finish$write_1__SEL_2 =
	     WILL_FIRE_RL_windowBuffer_slide &&
	     bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286 &&
	     slide_finish &&
	     slide_position != 32'd1 &&
	     slide_position != 32'd2 ;
  assign MUX_sobelState$write_1__SEL_2 =
	     WILL_FIRE_RL_thresholdPixel || WILL_FIRE_RL_limitMagnitude ||
	     WILL_FIRE_RL_sumUp ||
	     WILL_FIRE_RL_absSum1 ||
	     WILL_FIRE_RL_sobelOperator ;
  assign MUX_state_temp$write_1__SEL_1 =
	     WILL_FIRE_RL_windowBuffer_inital_end &&
	     bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279 ;
  assign MUX_state_temp$write_1__SEL_2 =
	     WILL_FIRE_RL_windowBuffer_slide &&
	     bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286 &&
	     (!slide_finish || slide_position == 32'd1 ||
	      slide_position == 32'd2) ;
  assign MUX_state_temp$write_1__SEL_3 =
	     WILL_FIRE_RL_windowBuffer_inital_2 ||
	     WILL_FIRE_RL_windowBuffer_inital ;
  assign MUX_sum_1$write_1__SEL_1 = WILL_FIRE_RL_absSum1 && sum_1[15] ;
  assign MUX_sum_12$write_1__SEL_1 =
	     WILL_FIRE_RL_limitMagnitude && NOT_sum_12_11_SLE_255_12___d413 ;
  assign MUX_sum_2$write_1__SEL_1 = WILL_FIRE_RL_absSum1 && sum_2[15] ;
  assign MUX_window_Initial$write_1__SEL_2 =
	     WILL_FIRE_RL_windowBuffer_slide &&
	     (!slide_finish || slide_position == 32'd1 ||
	      slide_position == 32'd2 ||
	      !bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286) ;
  assign MUX_out_count$write_1__VAL_2 = out_count + 8'd1 ;
  assign MUX_sobelConvert$write_1__VAL_3 =
	     bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286 &&
	     slide_finish &&
	     slide_position != 32'd1 &&
	     slide_position != 32'd2 ;
  assign MUX_sobelState$write_1__VAL_2 = sobelState + 8'd1 ;
  assign MUX_state_temp$write_1__VAL_3 = state_temp + 8'd1 ;
  assign MUX_sum_1$write_1__VAL_2 =
	     SEXT_gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0_0_ETC___d340 +
	     { {8{gx_reg32_41_MUL_reg32_61_42_BITS_7_TO_0__q15[7]}},
	       gx_reg32_41_MUL_reg32_61_42_BITS_7_TO_0__q15 } +
	     { {8{gx_reg33_46_MUL_reg33_62_47_BITS_7_TO_0__q16[7]}},
	       gx_reg33_46_MUL_reg33_62_47_BITS_7_TO_0__q16 } ;
  assign MUX_sum_12$write_1__VAL_2 = sum_1 + sum_2 ;
  assign MUX_sum_2$write_1__VAL_2 =
	     SEXT_gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0_5_ETC___d384 +
	     { {8{gy_reg32_85_MUL_reg32_61_86_BITS_7_TO_0__q17[7]}},
	       gy_reg32_85_MUL_reg32_61_86_BITS_7_TO_0__q17 } +
	     { {8{gy_reg33_90_MUL_reg33_62_91_BITS_7_TO_0__q18[7]}},
	       gy_reg33_90_MUL_reg33_62_91_BITS_7_TO_0__q18 } ;

  // inlined wires
  assign slave_write_addrIn_rv$EN_port0__write =
	     !slave_write_addrIn_rv[67] && !slave_write_isRst_isInReset &&
	     S00_AXI_awvalid ;
  assign slave_write_addrIn_rv$port0__write_1 =
	     { 1'd1, S00_AXI_awaddr, S00_AXI_awprot } ;
  assign slave_write_addrIn_rv$port1__read =
	     slave_write_addrIn_rv$EN_port0__write ?
	       slave_write_addrIn_rv$port0__write_1 :
	       slave_write_addrIn_rv ;
  assign slave_write_addrIn_rv$EN_port1__write =
	     slave_write_addrIn_rv$port1__read[67] &&
	     slave_write_dataIn_rv$port1__read[72] &&
	     slave_write_in$FULL_N ;
  assign slave_write_addrIn_rv$port2__read =
	     slave_write_addrIn_rv$EN_port1__write ?
	       68'h2AAAAAAAAAAAAAAAA :
	       slave_write_addrIn_rv$port1__read ;
  assign slave_write_dataIn_rv$EN_port0__write =
	     !slave_write_dataIn_rv[72] && !slave_write_isRst_isInReset &&
	     S00_AXI_wvalid ;
  assign slave_write_dataIn_rv$port0__write_1 =
	     { 1'd1, S00_AXI_wdata, S00_AXI_wstrb } ;
  assign slave_write_dataIn_rv$port1__read =
	     slave_write_dataIn_rv$EN_port0__write ?
	       slave_write_dataIn_rv$port0__write_1 :
	       slave_write_dataIn_rv ;
  assign slave_write_dataIn_rv$EN_port1__write =
	     slave_write_addrIn_rv$port1__read[67] &&
	     slave_write_dataIn_rv$port1__read[72] &&
	     slave_write_in$FULL_N ;
  assign slave_write_dataIn_rv$port2__read =
	     slave_write_dataIn_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       slave_write_dataIn_rv$port1__read ;
  assign master_write_addrOut_rv$EN_port0__write =
	     master_write_in$EMPTY_N && !master_write_addrOut_rv[67] &&
	     !master_write_dataOut_rv[72] ;
  assign master_write_addrOut_rv$port0__write_1 =
	     { 1'd1,
	       master_write_in$D_OUT[138:75],
	       master_write_in$D_OUT[2:0] } ;
  assign master_write_addrOut_rv$port1__read =
	     master_write_addrOut_rv$EN_port0__write ?
	       master_write_addrOut_rv$port0__write_1 :
	       master_write_addrOut_rv ;
  assign master_write_addrOut_rv$EN_port1__write =
	     master_write_addrOut_rv$port1__read[67] &&
	     !master_write_isRst_isInReset &&
	     M00_AXI_awready ;
  assign master_write_addrOut_rv$port2__read =
	     master_write_addrOut_rv$EN_port1__write ?
	       68'h2AAAAAAAAAAAAAAAA :
	       master_write_addrOut_rv$port1__read ;
  assign master_write_dataOut_rv$EN_port0__write =
	     master_write_in$EMPTY_N && !master_write_addrOut_rv[67] &&
	     !master_write_dataOut_rv[72] ;
  assign master_write_dataOut_rv$port0__write_1 =
	     { 1'd1, master_write_in$D_OUT[74:3] } ;
  assign master_write_dataOut_rv$port1__read =
	     master_write_dataOut_rv$EN_port0__write ?
	       master_write_dataOut_rv$port0__write_1 :
	       master_write_dataOut_rv ;
  assign master_write_dataOut_rv$EN_port1__write =
	     master_write_dataOut_rv$port1__read[72] &&
	     !master_write_isRst_isInReset &&
	     M00_AXI_wready ;
  assign master_write_dataOut_rv$port2__read =
	     master_write_dataOut_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       master_write_dataOut_rv$port1__read ;

  // register address_image_1
  assign address_image_1$D_IN = slave_write_in$D_OUT[74:11] ;
  assign address_image_1$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[80:75] == 6'd0 ;

  // register address_image_2
  assign address_image_2$D_IN = slave_write_in$D_OUT[74:11] ;
  assign address_image_2$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[80:75] == 6'd8 ;

  // register bufferRowCount
  assign bufferRowCount$D_IN = bufferRowCount + 32'd1 ;
  assign bufferRowCount$EN = WILL_FIRE_RL_windowBuffer_inital_3 ;

  // register conversion_finished
  assign conversion_finished$D_IN =
	     MUX_conversion_finished$write_1__SEL_1 ? 64'd0 : 64'd1 ;
  assign conversion_finished$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[80:75] == 6'd16 ||
	     WILL_FIRE_RL_writeRequest &&
	     !ddr_write_count_88_ULT_260096___d492 ;

  // register converting_flag
  assign converting_flag$D_IN = 1'b0 ;
  assign converting_flag$EN = 1'b0 ;

  // register ddr_read_count
  assign ddr_read_count$D_IN =
	     (ddr_read_count == 64'd262136) ? 64'd0 : x__h6540 ;
  assign ddr_read_count$EN = WILL_FIRE_RL_readRequest ;

  // register ddr_write_count
  assign ddr_write_count$D_IN =
	     ddr_write_count_88_ULT_260096___d492 ? x__h13116 : 64'd0 ;
  assign ddr_write_count$EN = WILL_FIRE_RL_writeRequest ;

  // register endOfbuffer
  assign endOfbuffer$D_IN = 1'b0 ;
  assign endOfbuffer$EN = 1'b0 ;

  // register enq_order
  assign enq_order$D_IN = enq_order + 3'd1 ;
  assign enq_order$EN = WILL_FIRE_RL_localDataBuffer_8bit ;

  // register gray_data
  assign gray_data$D_IN = 9'h0 ;
  assign gray_data$EN = 1'b0 ;

  // register gx_reg11
  assign gx_reg11$D_IN = 8'h0 ;
  assign gx_reg11$EN = 1'b0 ;

  // register gx_reg12
  assign gx_reg12$D_IN = 8'h0 ;
  assign gx_reg12$EN = 1'b0 ;

  // register gx_reg13
  assign gx_reg13$D_IN = 8'h0 ;
  assign gx_reg13$EN = 1'b0 ;

  // register gx_reg21
  assign gx_reg21$D_IN = 8'h0 ;
  assign gx_reg21$EN = 1'b0 ;

  // register gx_reg22
  assign gx_reg22$D_IN = 8'h0 ;
  assign gx_reg22$EN = 1'b0 ;

  // register gx_reg23
  assign gx_reg23$D_IN = 8'h0 ;
  assign gx_reg23$EN = 1'b0 ;

  // register gx_reg31
  assign gx_reg31$D_IN = 8'h0 ;
  assign gx_reg31$EN = 1'b0 ;

  // register gx_reg32
  assign gx_reg32$D_IN = 8'h0 ;
  assign gx_reg32$EN = 1'b0 ;

  // register gx_reg33
  assign gx_reg33$D_IN = 8'h0 ;
  assign gx_reg33$EN = 1'b0 ;

  // register gy_reg11
  assign gy_reg11$D_IN = 8'h0 ;
  assign gy_reg11$EN = 1'b0 ;

  // register gy_reg12
  assign gy_reg12$D_IN = 8'h0 ;
  assign gy_reg12$EN = 1'b0 ;

  // register gy_reg13
  assign gy_reg13$D_IN = 8'h0 ;
  assign gy_reg13$EN = 1'b0 ;

  // register gy_reg21
  assign gy_reg21$D_IN = 8'h0 ;
  assign gy_reg21$EN = 1'b0 ;

  // register gy_reg22
  assign gy_reg22$D_IN = 8'h0 ;
  assign gy_reg22$EN = 1'b0 ;

  // register gy_reg23
  assign gy_reg23$D_IN = 8'h0 ;
  assign gy_reg23$EN = 1'b0 ;

  // register gy_reg31
  assign gy_reg31$D_IN = 8'h0 ;
  assign gy_reg31$EN = 1'b0 ;

  // register gy_reg32
  assign gy_reg32$D_IN = 8'h0 ;
  assign gy_reg32$EN = 1'b0 ;

  // register gy_reg33
  assign gy_reg33$D_IN = 8'h0 ;
  assign gy_reg33$EN = 1'b0 ;

  // register image_length
  assign image_length$D_IN = 32'h0 ;
  assign image_length$EN = 1'b0 ;

  // register image_size
  assign image_size$D_IN = slave_write_in$D_OUT[74:11] ;
  assign image_size$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[80:75] == 6'd32 ;

  // register kernel_size
  assign kernel_size$D_IN = 32'h0 ;
  assign kernel_size$EN = 1'b0 ;

  // register master_read_isRst_isInReset
  assign master_read_isRst_isInReset$D_IN = 1'd0 ;
  assign master_read_isRst_isInReset$EN = master_read_isRst_isInReset ;

  // register master_write_addrOut_rv
  assign master_write_addrOut_rv$D_IN = master_write_addrOut_rv$port2__read ;
  assign master_write_addrOut_rv$EN = 1'b1 ;

  // register master_write_dataOut_rv
  assign master_write_dataOut_rv$D_IN = master_write_dataOut_rv$port2__read ;
  assign master_write_dataOut_rv$EN = 1'b1 ;

  // register master_write_isRst_isInReset
  assign master_write_isRst_isInReset$D_IN = 1'd0 ;
  assign master_write_isRst_isInReset$EN = master_write_isRst_isInReset ;

  // register outPixel
  assign outPixel$D_IN =
	     ((sum_12 ^ 16'h8000) <= (threshold ^ 16'h8000)) ?
	       8'd0 :
	       sum_12[7:0] ;
  assign outPixel$EN = WILL_FIRE_RL_thresholdPixel ;

  // register out_count
  assign out_count$D_IN =
	     MUX_out_count$write_1__SEL_1 ?
	       8'd0 :
	       MUX_out_count$write_1__VAL_2 ;
  assign out_count$EN =
	     WILL_FIRE_RL_enq_64 && out_count == 8'd8 ||
	     WILL_FIRE_RL_writePixel &&
	     (out_count == 8'd0 || out_count == 8'd1 || out_count == 8'd2 ||
	      out_count == 8'd3 ||
	      out_count == 8'd4 ||
	      out_count == 8'd5 ||
	      out_count == 8'd6 ||
	      out_count == 8'd7) ;

  // register out_hold
  always@(out_count or
	  x__h12549 or
	  x__h11590 or
	  x__h11727 or
	  x__h11864 or x__h12001 or x__h12138 or x__h12275 or x__h12412)
  begin
    case (out_count)
      8'd0: out_hold$D_IN = x__h11590;
      8'd1: out_hold$D_IN = x__h11727;
      8'd2: out_hold$D_IN = x__h11864;
      8'd3: out_hold$D_IN = x__h12001;
      8'd4: out_hold$D_IN = x__h12138;
      8'd5: out_hold$D_IN = x__h12275;
      8'd6: out_hold$D_IN = x__h12412;
      default: out_hold$D_IN = x__h12549;
    endcase
  end
  assign out_hold$EN = MUX_out_count$write_1__SEL_2 ;

  // register reg11
  assign reg11$D_IN = reg12 ;
  assign reg11$EN = WILL_FIRE_RL_windowBuffer_inital ;

  // register reg12
  assign reg12$D_IN = reg13 ;
  assign reg12$EN = WILL_FIRE_RL_windowBuffer_inital ;

  // register reg13
  assign reg13$D_IN = rowBuffer_1$D_OUT ;
  assign reg13$EN = WILL_FIRE_RL_windowBuffer_inital ;

  // register reg21
  assign reg21$D_IN = reg22 ;
  assign reg21$EN = WILL_FIRE_RL_windowBuffer_inital_2 ;

  // register reg22
  assign reg22$D_IN = reg23 ;
  assign reg22$EN = WILL_FIRE_RL_windowBuffer_inital_2 ;

  // register reg23
  assign reg23$D_IN = rowBuffer_2$D_OUT ;
  assign reg23$EN = WILL_FIRE_RL_windowBuffer_inital_2 ;

  // register reg31
  assign reg31$D_IN = reg32 ;
  assign reg31$EN = WILL_FIRE_RL_windowBuffer_inital_3 ;

  // register reg32
  assign reg32$D_IN = reg33 ;
  assign reg32$EN = WILL_FIRE_RL_windowBuffer_inital_3 ;

  // register reg33
  assign reg33$D_IN = buffer_8bit$D_OUT ;
  assign reg33$EN = WILL_FIRE_RL_windowBuffer_inital_3 ;

  // register rowBuffer_inital
  assign rowBuffer_inital$D_IN = 1'd0 ;
  assign rowBuffer_inital$EN = WILL_FIRE_RL_rowBufferInital_finish ;

  // register slave_read_isRst_isInReset
  assign slave_read_isRst_isInReset$D_IN = 1'd0 ;
  assign slave_read_isRst_isInReset$EN = slave_read_isRst_isInReset ;

  // register slave_write_addrIn_rv
  assign slave_write_addrIn_rv$D_IN = slave_write_addrIn_rv$port2__read ;
  assign slave_write_addrIn_rv$EN = 1'b1 ;

  // register slave_write_dataIn_rv
  assign slave_write_dataIn_rv$D_IN = slave_write_dataIn_rv$port2__read ;
  assign slave_write_dataIn_rv$EN = 1'b1 ;

  // register slave_write_isRst_isInReset
  assign slave_write_isRst_isInReset$D_IN = 1'd0 ;
  assign slave_write_isRst_isInReset$EN = slave_write_isRst_isInReset ;

  // register slide
  assign slide$D_IN = !MUX_slide$write_1__SEL_1 ;
  assign slide$EN =
	     MUX_slide$write_1__SEL_1 ||
	     WILL_FIRE_RL_enq_64 &&
	     bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d476 ;

  // register slide_finish
  assign slide_finish$D_IN =
	     !MUX_slide_finish$write_1__SEL_1 &&
	     !MUX_slide_finish$write_1__SEL_2 ;
  assign slide_finish$EN =
	     WILL_FIRE_RL_windowBuffer_inital_end &&
	     !bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279 ||
	     WILL_FIRE_RL_windowBuffer_slide &&
	     bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286 &&
	     slide_finish &&
	     slide_position != 32'd1 &&
	     slide_position != 32'd2 ||
	     WILL_FIRE_RL_windowBuffer_inital_3 ;

  // register slide_position
  assign slide_position$D_IN =
	     (slide_position < image_length) ? x__h9021 : 32'd1 ;
  assign slide_position$EN = WILL_FIRE_RL_windowBuffer_inital_3 ;

  // register sobelConvert
  always@(MUX_slide_finish$write_1__SEL_1 or
	  WILL_FIRE_RL_enq_64 or
	  WILL_FIRE_RL_windowBuffer_slide or MUX_sobelConvert$write_1__VAL_3)
  case (1'b1)
    MUX_slide_finish$write_1__SEL_1: sobelConvert$D_IN = 1'd1;
    WILL_FIRE_RL_enq_64: sobelConvert$D_IN = 1'd0;
    WILL_FIRE_RL_windowBuffer_slide:
	sobelConvert$D_IN = MUX_sobelConvert$write_1__VAL_3;
    default: sobelConvert$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign sobelConvert$EN =
	     WILL_FIRE_RL_windowBuffer_inital_end &&
	     !bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279 ||
	     WILL_FIRE_RL_windowBuffer_slide ||
	     WILL_FIRE_RL_enq_64 ;

  // register sobelState
  always@(MUX_out_count$write_1__SEL_2 or
	  MUX_sobelState$write_1__SEL_2 or
	  MUX_sobelState$write_1__VAL_2 or WILL_FIRE_RL_enq_64)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_out_count$write_1__SEL_2: sobelState$D_IN = 8'd6;
      MUX_sobelState$write_1__SEL_2:
	  sobelState$D_IN = MUX_sobelState$write_1__VAL_2;
      WILL_FIRE_RL_enq_64: sobelState$D_IN = 8'd0;
      default: sobelState$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign sobelState$EN =
	     WILL_FIRE_RL_writePixel &&
	     (out_count == 8'd0 || out_count == 8'd1 || out_count == 8'd2 ||
	      out_count == 8'd3 ||
	      out_count == 8'd4 ||
	      out_count == 8'd5 ||
	      out_count == 8'd6 ||
	      out_count == 8'd7) ||
	     WILL_FIRE_RL_thresholdPixel ||
	     WILL_FIRE_RL_limitMagnitude ||
	     WILL_FIRE_RL_sumUp ||
	     WILL_FIRE_RL_absSum1 ||
	     WILL_FIRE_RL_sobelOperator ||
	     WILL_FIRE_RL_enq_64 ;

  // register start
  assign start$D_IN =
	     MUX_conversion_finished$write_1__SEL_1 ?
	       slave_write_in$D_OUT[74:11] :
	       64'd0 ;
  assign start$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[80:75] == 6'd16 ||
	     WILL_FIRE_RL_readRequest && ddr_read_count == 64'd262136 ;

  // register start_write_request
  assign start_write_request$D_IN = 1'b0 ;
  assign start_write_request$EN = 1'b0 ;

  // register state_64
  assign state_64$D_IN = 64'h0 ;
  assign state_64$EN = 1'b0 ;

  // register state_temp
  always@(MUX_state_temp$write_1__SEL_3 or
	  MUX_state_temp$write_1__VAL_3 or
	  MUX_state_temp$write_1__SEL_1 or
	  MUX_state_temp$write_1__SEL_2 or WILL_FIRE_RL_windowBuffer_inital_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_temp$write_1__SEL_3:
	  state_temp$D_IN = MUX_state_temp$write_1__VAL_3;
      MUX_state_temp$write_1__SEL_1 || MUX_state_temp$write_1__SEL_2:
	  state_temp$D_IN = 8'd0;
      WILL_FIRE_RL_windowBuffer_inital_3: state_temp$D_IN = 8'd3;
      default: state_temp$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign state_temp$EN =
	     WILL_FIRE_RL_windowBuffer_inital_end &&
	     bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279 ||
	     WILL_FIRE_RL_windowBuffer_slide &&
	     bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286 &&
	     (!slide_finish || slide_position == 32'd1 ||
	      slide_position == 32'd2) ||
	     WILL_FIRE_RL_windowBuffer_inital_2 ||
	     WILL_FIRE_RL_windowBuffer_inital ||
	     WILL_FIRE_RL_windowBuffer_inital_3 ;

  // register sum_1
  assign sum_1$D_IN =
	     MUX_sum_1$write_1__SEL_1 ?
	       sum_1_98_MUL_65535___d400[15:0] :
	       MUX_sum_1$write_1__VAL_2 ;
  assign sum_1$EN =
	     WILL_FIRE_RL_absSum1 && sum_1[15] || WILL_FIRE_RL_sobelOperator ;

  // register sum_12
  assign sum_12$D_IN =
	     MUX_sum_12$write_1__SEL_1 ? 16'd255 : MUX_sum_12$write_1__VAL_2 ;
  assign sum_12$EN =
	     WILL_FIRE_RL_limitMagnitude && NOT_sum_12_11_SLE_255_12___d413 ||
	     WILL_FIRE_RL_sumUp ;

  // register sum_2
  assign sum_2$D_IN =
	     MUX_sum_2$write_1__SEL_1 ?
	       sum_2_02_MUL_65535___d404[15:0] :
	       MUX_sum_2$write_1__VAL_2 ;
  assign sum_2$EN =
	     WILL_FIRE_RL_absSum1 && sum_2[15] || WILL_FIRE_RL_sobelOperator ;

  // register tempcount
  assign tempcount$D_IN = tempcount + 32'd1 ;
  assign tempcount$EN = WILL_FIRE_RL_writePixel ;

  // register testslideWindow_control
  assign testslideWindow_control$D_IN = 1'd0 ;
  assign testslideWindow_control$EN =
	     !testslideWindow$FULL_N && testslideWindow_control ;

  // register testslideWindow_count
  assign testslideWindow_count$D_IN = testslideWindow_count + 8'd1 ;
  assign testslideWindow_count$EN =
	     testslideWindow$FULL_N && testslideWindow_control ;

  // register threshold
  assign threshold$D_IN = 16'h0 ;
  assign threshold$EN = 1'b0 ;

  // register windowBuffer_once_inital
  assign windowBuffer_once_inital$D_IN = 1'd1 ;
  assign windowBuffer_once_inital$EN = MUX_slide_finish$write_1__SEL_1 ;

  // register windowReady
  assign windowReady$D_IN = 1'b0 ;
  assign windowReady$EN = 1'b0 ;

  // register windowSlide
  assign windowSlide$D_IN = 1'b0 ;
  assign windowSlide$EN = 1'b0 ;

  // register window_Initial
  always@(MUX_slide_finish$write_1__SEL_1 or
	  MUX_window_Initial$write_1__SEL_2 or
	  bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286 or
	  WILL_FIRE_RL_rowBufferInital_finish)
  case (1'b1)
    MUX_slide_finish$write_1__SEL_1: window_Initial$D_IN = 1'd0;
    MUX_window_Initial$write_1__SEL_2:
	window_Initial$D_IN =
	    bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286;
    WILL_FIRE_RL_rowBufferInital_finish: window_Initial$D_IN = 1'd1;
    default: window_Initial$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign window_Initial$EN =
	     WILL_FIRE_RL_windowBuffer_inital_end &&
	     !bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279 ||
	     WILL_FIRE_RL_windowBuffer_slide &&
	     (!slide_finish || slide_position == 32'd1 ||
	      slide_position == 32'd2 ||
	      !bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286) ||
	     WILL_FIRE_RL_rowBufferInital_finish ;

  // submodule buffer
  assign buffer$D_IN = master_read_out$D_OUT[65:2] ;
  assign buffer$ENQ = master_read_out$EMPTY_N && buffer$FULL_N ;
  assign buffer$DEQ = WILL_FIRE_RL_localDataBuffer_8bit && enq_order == 3'd7 ;
  assign buffer$CLR = 1'b0 ;

  // submodule buffer_8bit
  always@(enq_order or buffer$D_OUT)
  begin
    case (enq_order)
      3'd0: buffer_8bit$D_IN = buffer$D_OUT[7:0];
      3'd1: buffer_8bit$D_IN = buffer$D_OUT[15:8];
      3'd2: buffer_8bit$D_IN = buffer$D_OUT[23:16];
      3'd3: buffer_8bit$D_IN = buffer$D_OUT[31:24];
      3'd4: buffer_8bit$D_IN = buffer$D_OUT[39:32];
      3'd5: buffer_8bit$D_IN = buffer$D_OUT[47:40];
      3'd6: buffer_8bit$D_IN = buffer$D_OUT[55:48];
      3'd7: buffer_8bit$D_IN = buffer$D_OUT[63:56];
    endcase
  end
  assign buffer_8bit$ENQ = WILL_FIRE_RL_localDataBuffer_8bit ;
  assign buffer_8bit$DEQ = WILL_FIRE_RL_windowBuffer_inital_3 ;
  assign buffer_8bit$CLR = 1'b0 ;

  // submodule buffer_out
  assign buffer_out$D_IN = (out_count == 8'd8) ? out_hold : tmp__h12943 ;
  assign buffer_out$ENQ =
	     WILL_FIRE_RL_enq_64 &&
	     (out_count == 8'd8 ||
	      bufferRowCount ==
	      image_length_67_MUL_image_length_67___d283[31:0]) ;
  assign buffer_out$DEQ = WILL_FIRE_RL_writeRequest ;
  assign buffer_out$CLR = 1'b0 ;

  // submodule master_read_in
  assign master_read_in$D_IN = { addr__h6492, 3'd0 } ;
  assign master_read_in$ENQ = WILL_FIRE_RL_readRequest ;
  assign master_read_in$DEQ =
	     master_read_in$EMPTY_N && !master_read_isRst_isInReset &&
	     M00_AXI_arready ;
  assign master_read_in$CLR = 1'b0 ;

  // submodule master_read_out
  assign master_read_out$D_IN = { M00_AXI_rdata, M00_AXI_rresp } ;
  assign master_read_out$ENQ =
	     master_read_out$FULL_N && !master_read_isRst_isInReset &&
	     M00_AXI_rvalid ;
  assign master_read_out$DEQ = master_read_out$EMPTY_N && buffer$FULL_N ;
  assign master_read_out$CLR = 1'b0 ;

  // submodule master_write_in
  assign master_write_in$D_IN = { addr__h13031, buffer_out$D_OUT, 11'd2040 } ;
  assign master_write_in$ENQ = WILL_FIRE_RL_writeRequest ;
  assign master_write_in$DEQ =
	     master_write_in$EMPTY_N && !master_write_addrOut_rv[67] &&
	     !master_write_dataOut_rv[72] ;
  assign master_write_in$CLR = 1'b0 ;

  // submodule master_write_out
  assign master_write_out$D_IN = M00_AXI_bresp ;
  assign master_write_out$ENQ =
	     master_write_out$FULL_N && !master_write_isRst_isInReset &&
	     M00_AXI_bvalid ;
  assign master_write_out$DEQ = master_write_out$EMPTY_N ;
  assign master_write_out$CLR = 1'b0 ;

  // submodule rowBuffer_1
  assign rowBuffer_1$D_IN =
	     WILL_FIRE_RL_windowBuffer_inital_2 ? reg21 : 8'd0 ;
  assign rowBuffer_1$ENQ =
	     WILL_FIRE_RL_windowBuffer_inital_2 ||
	     WILL_FIRE_RL_rowBufferInital ;
  assign rowBuffer_1$DEQ = WILL_FIRE_RL_windowBuffer_inital ;
  assign rowBuffer_1$CLR = 1'b0 ;

  // submodule rowBuffer_2
  assign rowBuffer_2$D_IN =
	     WILL_FIRE_RL_windowBuffer_inital_3 ? reg31 : 8'd0 ;
  assign rowBuffer_2$ENQ =
	     WILL_FIRE_RL_windowBuffer_inital_3 ||
	     WILL_FIRE_RL_rowBufferInital ;
  assign rowBuffer_2$DEQ = WILL_FIRE_RL_windowBuffer_inital_2 ;
  assign rowBuffer_2$CLR = 1'b0 ;

  // submodule slave_read_in
  assign slave_read_in$D_IN = { S00_AXI_araddr, S00_AXI_arprot } ;
  assign slave_read_in$ENQ =
	     slave_read_in$FULL_N && !slave_read_isRst_isInReset &&
	     S00_AXI_arvalid ;
  assign slave_read_in$DEQ = slave_read_in$EMPTY_N && slave_read_out$FULL_N ;
  assign slave_read_in$CLR = 1'b0 ;

  // submodule slave_read_out
  assign slave_read_out$D_IN =
	     { IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141,
	       2'd0 } ;
  assign slave_read_out$ENQ =
	     slave_read_in$EMPTY_N && slave_read_out$FULL_N &&
	     (slave_read_in$D_OUT[8:3] == 6'd0 ||
	      slave_read_in$D_OUT[8:3] == 6'd8 ||
	      slave_read_in$D_OUT[8:3] == 6'd16 ||
	      slave_read_in$D_OUT[8:3] == 6'd24 ||
	      slave_read_in$D_OUT[8:3] == 6'd32) ;
  assign slave_read_out$DEQ =
	     slave_read_out$EMPTY_N && !slave_read_isRst_isInReset &&
	     S00_AXI_rready ;
  assign slave_read_out$CLR = 1'b0 ;

  // submodule slave_write_in
  assign slave_write_in$D_IN =
	     { slave_write_addrIn_rv$port1__read[66:3],
	       slave_write_dataIn_rv$port1__read[71:0],
	       slave_write_addrIn_rv$port1__read[2:0] } ;
  assign slave_write_in$ENQ =
	     slave_write_addrIn_rv$port1__read[67] &&
	     slave_write_dataIn_rv$port1__read[72] &&
	     slave_write_in$FULL_N ;
  assign slave_write_in$DEQ = WILL_FIRE_RL_handleWriteRequest ;
  assign slave_write_in$CLR = 1'b0 ;

  // submodule slave_write_out
  assign slave_write_out$D_IN = 2'd0 ;
  assign slave_write_out$ENQ =
	     WILL_FIRE_RL_handleWriteRequest &&
	     (slave_write_in$D_OUT[80:75] == 6'd0 ||
	      slave_write_in$D_OUT[80:75] == 6'd8 ||
	      slave_write_in$D_OUT[80:75] == 6'd16 ||
	      slave_write_in$D_OUT[80:75] == 6'd32) ;
  assign slave_write_out$DEQ =
	     slave_write_out$EMPTY_N && !slave_write_isRst_isInReset &&
	     S00_AXI_bready ;
  assign slave_write_out$CLR = 1'b0 ;

  // submodule sum1Buffer
  assign sum1Buffer$D_IN = 8'h0 ;
  assign sum1Buffer$ENQ = 1'b0 ;
  assign sum1Buffer$DEQ = 1'b0 ;
  assign sum1Buffer$CLR = 1'b0 ;

  // submodule sum2Buffer
  assign sum2Buffer$D_IN = 8'h0 ;
  assign sum2Buffer$ENQ = 1'b0 ;
  assign sum2Buffer$DEQ = 1'b0 ;
  assign sum2Buffer$CLR = 1'b0 ;

  // submodule testslideWindow
  assign testslideWindow$D_IN = testslideWindow_count ;
  assign testslideWindow$ENQ =
	     testslideWindow$FULL_N && testslideWindow_control ;
  assign testslideWindow$DEQ = 1'b0 ;
  assign testslideWindow$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_sum_12_11_SLE_255_12___d413 = (sum_12 ^ 16'h8000) > 16'd33023 ;
  assign SEXT_gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0_0_ETC___d325 =
	     { {8{gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0__q1[7]}},
	       gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0__q1 } +
	     { {8{gx_reg12_11_MUL_reg12_44_12_BITS_7_TO_0__q2[7]}},
	       gx_reg12_11_MUL_reg12_44_12_BITS_7_TO_0__q2 } +
	     { {8{gx_reg13_16_MUL_reg13_45_17_BITS_7_TO_0__q3[7]}},
	       gx_reg13_16_MUL_reg13_45_17_BITS_7_TO_0__q3 } +
	     { {8{gx_reg21_21_MUL_reg21_52_22_BITS_7_TO_0__q4[7]}},
	       gx_reg21_21_MUL_reg21_52_22_BITS_7_TO_0__q4 } ;
  assign SEXT_gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0_0_ETC___d340 =
	     SEXT_gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0_0_ETC___d325 +
	     { {8{gx_reg22_26_MUL_reg22_53_27_BITS_7_TO_0__q5[7]}},
	       gx_reg22_26_MUL_reg22_53_27_BITS_7_TO_0__q5 } +
	     { {8{gx_reg23_31_MUL_reg23_54_32_BITS_7_TO_0__q6[7]}},
	       gx_reg23_31_MUL_reg23_54_32_BITS_7_TO_0__q6 } +
	     { {8{gx_reg31_36_MUL_reg31_60_37_BITS_7_TO_0__q7[7]}},
	       gx_reg31_36_MUL_reg31_60_37_BITS_7_TO_0__q7 } ;
  assign SEXT_gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0_5_ETC___d369 =
	     { {8{gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0__q8[7]}},
	       gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0__q8 } +
	     { {8{gy_reg12_55_MUL_reg12_44_56_BITS_7_TO_0__q9[7]}},
	       gy_reg12_55_MUL_reg12_44_56_BITS_7_TO_0__q9 } +
	     { {8{gy_reg13_60_MUL_reg13_45_61_BITS_7_TO_0__q10[7]}},
	       gy_reg13_60_MUL_reg13_45_61_BITS_7_TO_0__q10 } +
	     { {8{gy_reg21_65_MUL_reg21_52_66_BITS_7_TO_0__q11[7]}},
	       gy_reg21_65_MUL_reg21_52_66_BITS_7_TO_0__q11 } ;
  assign SEXT_gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0_5_ETC___d384 =
	     SEXT_gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0_5_ETC___d369 +
	     { {8{gy_reg22_70_MUL_reg22_53_71_BITS_7_TO_0__q12[7]}},
	       gy_reg22_70_MUL_reg22_53_71_BITS_7_TO_0__q12 } +
	     { {8{gy_reg23_75_MUL_reg23_54_76_BITS_7_TO_0__q13[7]}},
	       gy_reg23_75_MUL_reg23_54_76_BITS_7_TO_0__q13 } +
	     { {8{gy_reg31_80_MUL_reg31_60_81_BITS_7_TO_0__q14[7]}},
	       gy_reg31_80_MUL_reg31_60_81_BITS_7_TO_0__q14 } ;
  assign addr__h13031 = address_image_2 + ddr_write_count ;
  assign addr__h6492 = address_image_1 + ddr_read_count ;
  assign bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d286 =
	     bufferRowCount < y__h9226 ;
  assign bufferRowCount_64_ULT_image_length_67_MUL_imag_ETC___d476 =
	     bufferRowCount <
	     image_length_67_MUL_image_length_67___d283[31:0] ;
  assign bufferRowCount_64_ULT_image_length_67_PLUS_ima_ETC___d279 =
	     bufferRowCount < y__h9119 ;
  assign ddr_write_count_88_ULT_260096___d492 = ddr_write_count < 64'd260096 ;
  assign gx_reg11_06_MUL_reg11_07_08_BITS_7_TO_0__q1 =
	     gx_reg11_06_MUL_reg11_07___d308[7:0] ;
  assign gx_reg11_06_MUL_reg11_07___d308 = gx_reg11 * reg11 ;
  assign gx_reg12_11_MUL_reg12_44_12_BITS_7_TO_0__q2 =
	     gx_reg12_11_MUL_reg12_44___d312[7:0] ;
  assign gx_reg12_11_MUL_reg12_44___d312 = gx_reg12 * reg12 ;
  assign gx_reg13_16_MUL_reg13_45_17_BITS_7_TO_0__q3 =
	     gx_reg13_16_MUL_reg13_45___d317[7:0] ;
  assign gx_reg13_16_MUL_reg13_45___d317 = gx_reg13 * reg13 ;
  assign gx_reg21_21_MUL_reg21_52_22_BITS_7_TO_0__q4 =
	     gx_reg21_21_MUL_reg21_52___d322[7:0] ;
  assign gx_reg21_21_MUL_reg21_52___d322 = gx_reg21 * reg21 ;
  assign gx_reg22_26_MUL_reg22_53_27_BITS_7_TO_0__q5 =
	     gx_reg22_26_MUL_reg22_53___d327[7:0] ;
  assign gx_reg22_26_MUL_reg22_53___d327 = gx_reg22 * reg22 ;
  assign gx_reg23_31_MUL_reg23_54_32_BITS_7_TO_0__q6 =
	     gx_reg23_31_MUL_reg23_54___d332[7:0] ;
  assign gx_reg23_31_MUL_reg23_54___d332 = gx_reg23 * reg23 ;
  assign gx_reg31_36_MUL_reg31_60_37_BITS_7_TO_0__q7 =
	     gx_reg31_36_MUL_reg31_60___d337[7:0] ;
  assign gx_reg31_36_MUL_reg31_60___d337 = gx_reg31 * reg31 ;
  assign gx_reg32_41_MUL_reg32_61_42_BITS_7_TO_0__q15 =
	     gx_reg32_41_MUL_reg32_61___d342[7:0] ;
  assign gx_reg32_41_MUL_reg32_61___d342 = gx_reg32 * reg32 ;
  assign gx_reg33_46_MUL_reg33_62_47_BITS_7_TO_0__q16 =
	     gx_reg33_46_MUL_reg33_62___d347[7:0] ;
  assign gx_reg33_46_MUL_reg33_62___d347 = gx_reg33 * reg33 ;
  assign gy_reg11_51_MUL_reg11_07_52_BITS_7_TO_0__q8 =
	     gy_reg11_51_MUL_reg11_07___d352[7:0] ;
  assign gy_reg11_51_MUL_reg11_07___d352 = gy_reg11 * reg11 ;
  assign gy_reg12_55_MUL_reg12_44_56_BITS_7_TO_0__q9 =
	     gy_reg12_55_MUL_reg12_44___d356[7:0] ;
  assign gy_reg12_55_MUL_reg12_44___d356 = gy_reg12 * reg12 ;
  assign gy_reg13_60_MUL_reg13_45_61_BITS_7_TO_0__q10 =
	     gy_reg13_60_MUL_reg13_45___d361[7:0] ;
  assign gy_reg13_60_MUL_reg13_45___d361 = gy_reg13 * reg13 ;
  assign gy_reg21_65_MUL_reg21_52_66_BITS_7_TO_0__q11 =
	     gy_reg21_65_MUL_reg21_52___d366[7:0] ;
  assign gy_reg21_65_MUL_reg21_52___d366 = gy_reg21 * reg21 ;
  assign gy_reg22_70_MUL_reg22_53_71_BITS_7_TO_0__q12 =
	     gy_reg22_70_MUL_reg22_53___d371[7:0] ;
  assign gy_reg22_70_MUL_reg22_53___d371 = gy_reg22 * reg22 ;
  assign gy_reg23_75_MUL_reg23_54_76_BITS_7_TO_0__q13 =
	     gy_reg23_75_MUL_reg23_54___d376[7:0] ;
  assign gy_reg23_75_MUL_reg23_54___d376 = gy_reg23 * reg23 ;
  assign gy_reg31_80_MUL_reg31_60_81_BITS_7_TO_0__q14 =
	     gy_reg31_80_MUL_reg31_60___d381[7:0] ;
  assign gy_reg31_80_MUL_reg31_60___d381 = gy_reg31 * reg31 ;
  assign gy_reg32_85_MUL_reg32_61_86_BITS_7_TO_0__q17 =
	     gy_reg32_85_MUL_reg32_61___d386[7:0] ;
  assign gy_reg32_85_MUL_reg32_61___d386 = gy_reg32 * reg32 ;
  assign gy_reg33_90_MUL_reg33_62_91_BITS_7_TO_0__q18 =
	     gy_reg33_90_MUL_reg33_62___d391[7:0] ;
  assign gy_reg33_90_MUL_reg33_62___d391 = gy_reg33 * reg33 ;
  assign image_length_67_MUL_image_length_67___d283 =
	     image_length * image_length ;
  assign sum_1_98_MUL_65535___d400 = sum_1 * 16'd65535 ;
  assign sum_2_02_MUL_65535___d404 = sum_2 * 16'd65535 ;
  assign tmp__h12943 = { out_hold[31:0], 32'd0 } ;
  assign x__h11590 = { out_hold[63:8], outPixel } ;
  assign x__h11727 = { out_hold[63:16], outPixel, out_hold[7:0] } ;
  assign x__h11864 = { out_hold[63:24], outPixel, out_hold[15:0] } ;
  assign x__h12001 = { out_hold[63:32], outPixel, out_hold[23:0] } ;
  assign x__h12138 = { out_hold[63:40], outPixel, out_hold[31:0] } ;
  assign x__h12275 = { out_hold[63:48], outPixel, out_hold[39:0] } ;
  assign x__h12412 = { out_hold[63:56], outPixel, out_hold[47:0] } ;
  assign x__h12549 = { outPixel, out_hold[55:0] } ;
  assign x__h13116 = ddr_write_count + 64'd8 ;
  assign x__h6540 = ddr_read_count + 64'd8 ;
  assign x__h9021 = slide_position + 32'd1 ;
  assign x__h9120 = image_length + image_length ;
  assign y__h9119 = x__h9120 + kernel_size ;
  assign y__h9226 = image_length_67_MUL_image_length_67___d283[31:0] + 32'd1 ;
  always@(slave_read_in$D_OUT or
	  image_size or
	  address_image_1 or address_image_2 or start or conversion_finished)
  begin
    case (slave_read_in$D_OUT[8:3])
      6'd0:
	  IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 =
	      address_image_1;
      6'd8:
	  IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 =
	      address_image_2;
      6'd16:
	  IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 = start;
      6'd24:
	  IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 =
	      conversion_finished;
      default: IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d141 =
		   image_size;
    endcase
  end

  // handling of inlined registers

  always@(posedge aclk)
  begin
    if (aresetn == `BSV_RESET_VALUE)
      begin
        address_image_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	address_image_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	bufferRowCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	conversion_finished <= `BSV_ASSIGNMENT_DELAY 64'd0;
	converting_flag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ddr_read_count <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ddr_write_count <= `BSV_ASSIGNMENT_DELAY 64'd0;
	endOfbuffer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	enq_order <= `BSV_ASSIGNMENT_DELAY 3'd0;
	gray_data <= `BSV_ASSIGNMENT_DELAY 9'd0;
	gx_reg11 <= `BSV_ASSIGNMENT_DELAY 8'd255;
	gx_reg12 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	gx_reg13 <= `BSV_ASSIGNMENT_DELAY 8'd1;
	gx_reg21 <= `BSV_ASSIGNMENT_DELAY 8'd254;
	gx_reg22 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	gx_reg23 <= `BSV_ASSIGNMENT_DELAY 8'd2;
	gx_reg31 <= `BSV_ASSIGNMENT_DELAY 8'd255;
	gx_reg32 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	gx_reg33 <= `BSV_ASSIGNMENT_DELAY 8'd1;
	gy_reg11 <= `BSV_ASSIGNMENT_DELAY 8'd255;
	gy_reg12 <= `BSV_ASSIGNMENT_DELAY 8'd254;
	gy_reg13 <= `BSV_ASSIGNMENT_DELAY 8'd255;
	gy_reg21 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	gy_reg22 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	gy_reg23 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	gy_reg31 <= `BSV_ASSIGNMENT_DELAY 8'd1;
	gy_reg32 <= `BSV_ASSIGNMENT_DELAY 8'd2;
	gy_reg33 <= `BSV_ASSIGNMENT_DELAY 8'd1;
	image_length <= `BSV_ASSIGNMENT_DELAY 32'd512;
	image_size <= `BSV_ASSIGNMENT_DELAY 64'd0;
	kernel_size <= `BSV_ASSIGNMENT_DELAY 32'd3;
	master_write_addrOut_rv <= `BSV_ASSIGNMENT_DELAY
	    68'h2AAAAAAAAAAAAAAAA;
	master_write_dataOut_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
	outPixel <= `BSV_ASSIGNMENT_DELAY 8'd0;
	out_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	out_hold <= `BSV_ASSIGNMENT_DELAY 64'd0;
	reg11 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	reg12 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	reg13 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	reg21 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	reg22 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	reg23 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	reg31 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	reg32 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	reg33 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rowBuffer_inital <= `BSV_ASSIGNMENT_DELAY 1'd1;
	slave_write_addrIn_rv <= `BSV_ASSIGNMENT_DELAY 68'h2AAAAAAAAAAAAAAAA;
	slave_write_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
	slide <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slide_finish <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slide_position <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sobelConvert <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sobelState <= `BSV_ASSIGNMENT_DELAY 8'd0;
	start <= `BSV_ASSIGNMENT_DELAY 64'd0;
	start_write_request <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_64 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	state_temp <= `BSV_ASSIGNMENT_DELAY 8'd0;
	sum_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	sum_12 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	sum_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempcount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	testslideWindow_control <= `BSV_ASSIGNMENT_DELAY 1'd1;
	testslideWindow_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	threshold <= `BSV_ASSIGNMENT_DELAY 16'd50;
	windowBuffer_once_inital <= `BSV_ASSIGNMENT_DELAY 1'd0;
	windowReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	windowSlide <= `BSV_ASSIGNMENT_DELAY 1'd0;
	window_Initial <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (address_image_1$EN)
	  address_image_1 <= `BSV_ASSIGNMENT_DELAY address_image_1$D_IN;
	if (address_image_2$EN)
	  address_image_2 <= `BSV_ASSIGNMENT_DELAY address_image_2$D_IN;
	if (bufferRowCount$EN)
	  bufferRowCount <= `BSV_ASSIGNMENT_DELAY bufferRowCount$D_IN;
	if (conversion_finished$EN)
	  conversion_finished <= `BSV_ASSIGNMENT_DELAY
	      conversion_finished$D_IN;
	if (converting_flag$EN)
	  converting_flag <= `BSV_ASSIGNMENT_DELAY converting_flag$D_IN;
	if (ddr_read_count$EN)
	  ddr_read_count <= `BSV_ASSIGNMENT_DELAY ddr_read_count$D_IN;
	if (ddr_write_count$EN)
	  ddr_write_count <= `BSV_ASSIGNMENT_DELAY ddr_write_count$D_IN;
	if (endOfbuffer$EN)
	  endOfbuffer <= `BSV_ASSIGNMENT_DELAY endOfbuffer$D_IN;
	if (enq_order$EN) enq_order <= `BSV_ASSIGNMENT_DELAY enq_order$D_IN;
	if (gray_data$EN) gray_data <= `BSV_ASSIGNMENT_DELAY gray_data$D_IN;
	if (gx_reg11$EN) gx_reg11 <= `BSV_ASSIGNMENT_DELAY gx_reg11$D_IN;
	if (gx_reg12$EN) gx_reg12 <= `BSV_ASSIGNMENT_DELAY gx_reg12$D_IN;
	if (gx_reg13$EN) gx_reg13 <= `BSV_ASSIGNMENT_DELAY gx_reg13$D_IN;
	if (gx_reg21$EN) gx_reg21 <= `BSV_ASSIGNMENT_DELAY gx_reg21$D_IN;
	if (gx_reg22$EN) gx_reg22 <= `BSV_ASSIGNMENT_DELAY gx_reg22$D_IN;
	if (gx_reg23$EN) gx_reg23 <= `BSV_ASSIGNMENT_DELAY gx_reg23$D_IN;
	if (gx_reg31$EN) gx_reg31 <= `BSV_ASSIGNMENT_DELAY gx_reg31$D_IN;
	if (gx_reg32$EN) gx_reg32 <= `BSV_ASSIGNMENT_DELAY gx_reg32$D_IN;
	if (gx_reg33$EN) gx_reg33 <= `BSV_ASSIGNMENT_DELAY gx_reg33$D_IN;
	if (gy_reg11$EN) gy_reg11 <= `BSV_ASSIGNMENT_DELAY gy_reg11$D_IN;
	if (gy_reg12$EN) gy_reg12 <= `BSV_ASSIGNMENT_DELAY gy_reg12$D_IN;
	if (gy_reg13$EN) gy_reg13 <= `BSV_ASSIGNMENT_DELAY gy_reg13$D_IN;
	if (gy_reg21$EN) gy_reg21 <= `BSV_ASSIGNMENT_DELAY gy_reg21$D_IN;
	if (gy_reg22$EN) gy_reg22 <= `BSV_ASSIGNMENT_DELAY gy_reg22$D_IN;
	if (gy_reg23$EN) gy_reg23 <= `BSV_ASSIGNMENT_DELAY gy_reg23$D_IN;
	if (gy_reg31$EN) gy_reg31 <= `BSV_ASSIGNMENT_DELAY gy_reg31$D_IN;
	if (gy_reg32$EN) gy_reg32 <= `BSV_ASSIGNMENT_DELAY gy_reg32$D_IN;
	if (gy_reg33$EN) gy_reg33 <= `BSV_ASSIGNMENT_DELAY gy_reg33$D_IN;
	if (image_length$EN)
	  image_length <= `BSV_ASSIGNMENT_DELAY image_length$D_IN;
	if (image_size$EN)
	  image_size <= `BSV_ASSIGNMENT_DELAY image_size$D_IN;
	if (kernel_size$EN)
	  kernel_size <= `BSV_ASSIGNMENT_DELAY kernel_size$D_IN;
	if (master_write_addrOut_rv$EN)
	  master_write_addrOut_rv <= `BSV_ASSIGNMENT_DELAY
	      master_write_addrOut_rv$D_IN;
	if (master_write_dataOut_rv$EN)
	  master_write_dataOut_rv <= `BSV_ASSIGNMENT_DELAY
	      master_write_dataOut_rv$D_IN;
	if (outPixel$EN) outPixel <= `BSV_ASSIGNMENT_DELAY outPixel$D_IN;
	if (out_count$EN) out_count <= `BSV_ASSIGNMENT_DELAY out_count$D_IN;
	if (out_hold$EN) out_hold <= `BSV_ASSIGNMENT_DELAY out_hold$D_IN;
	if (reg11$EN) reg11 <= `BSV_ASSIGNMENT_DELAY reg11$D_IN;
	if (reg12$EN) reg12 <= `BSV_ASSIGNMENT_DELAY reg12$D_IN;
	if (reg13$EN) reg13 <= `BSV_ASSIGNMENT_DELAY reg13$D_IN;
	if (reg21$EN) reg21 <= `BSV_ASSIGNMENT_DELAY reg21$D_IN;
	if (reg22$EN) reg22 <= `BSV_ASSIGNMENT_DELAY reg22$D_IN;
	if (reg23$EN) reg23 <= `BSV_ASSIGNMENT_DELAY reg23$D_IN;
	if (reg31$EN) reg31 <= `BSV_ASSIGNMENT_DELAY reg31$D_IN;
	if (reg32$EN) reg32 <= `BSV_ASSIGNMENT_DELAY reg32$D_IN;
	if (reg33$EN) reg33 <= `BSV_ASSIGNMENT_DELAY reg33$D_IN;
	if (rowBuffer_inital$EN)
	  rowBuffer_inital <= `BSV_ASSIGNMENT_DELAY rowBuffer_inital$D_IN;
	if (slave_write_addrIn_rv$EN)
	  slave_write_addrIn_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_write_addrIn_rv$D_IN;
	if (slave_write_dataIn_rv$EN)
	  slave_write_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_write_dataIn_rv$D_IN;
	if (slide$EN) slide <= `BSV_ASSIGNMENT_DELAY slide$D_IN;
	if (slide_finish$EN)
	  slide_finish <= `BSV_ASSIGNMENT_DELAY slide_finish$D_IN;
	if (slide_position$EN)
	  slide_position <= `BSV_ASSIGNMENT_DELAY slide_position$D_IN;
	if (sobelConvert$EN)
	  sobelConvert <= `BSV_ASSIGNMENT_DELAY sobelConvert$D_IN;
	if (sobelState$EN)
	  sobelState <= `BSV_ASSIGNMENT_DELAY sobelState$D_IN;
	if (start$EN) start <= `BSV_ASSIGNMENT_DELAY start$D_IN;
	if (start_write_request$EN)
	  start_write_request <= `BSV_ASSIGNMENT_DELAY
	      start_write_request$D_IN;
	if (state_64$EN) state_64 <= `BSV_ASSIGNMENT_DELAY state_64$D_IN;
	if (state_temp$EN)
	  state_temp <= `BSV_ASSIGNMENT_DELAY state_temp$D_IN;
	if (sum_1$EN) sum_1 <= `BSV_ASSIGNMENT_DELAY sum_1$D_IN;
	if (sum_12$EN) sum_12 <= `BSV_ASSIGNMENT_DELAY sum_12$D_IN;
	if (sum_2$EN) sum_2 <= `BSV_ASSIGNMENT_DELAY sum_2$D_IN;
	if (tempcount$EN) tempcount <= `BSV_ASSIGNMENT_DELAY tempcount$D_IN;
	if (testslideWindow_control$EN)
	  testslideWindow_control <= `BSV_ASSIGNMENT_DELAY
	      testslideWindow_control$D_IN;
	if (testslideWindow_count$EN)
	  testslideWindow_count <= `BSV_ASSIGNMENT_DELAY
	      testslideWindow_count$D_IN;
	if (threshold$EN) threshold <= `BSV_ASSIGNMENT_DELAY threshold$D_IN;
	if (windowBuffer_once_inital$EN)
	  windowBuffer_once_inital <= `BSV_ASSIGNMENT_DELAY
	      windowBuffer_once_inital$D_IN;
	if (windowReady$EN)
	  windowReady <= `BSV_ASSIGNMENT_DELAY windowReady$D_IN;
	if (windowSlide$EN)
	  windowSlide <= `BSV_ASSIGNMENT_DELAY windowSlide$D_IN;
	if (window_Initial$EN)
	  window_Initial <= `BSV_ASSIGNMENT_DELAY window_Initial$D_IN;
      end
  end

  always@(posedge aclk or `BSV_RESET_EDGE aresetn)
  if (aresetn == `BSV_RESET_VALUE)
    begin
      master_read_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      master_write_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      slave_read_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      slave_write_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (master_read_isRst_isInReset$EN)
	master_read_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    master_read_isRst_isInReset$D_IN;
      if (master_write_isRst_isInReset$EN)
	master_write_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    master_write_isRst_isInReset$D_IN;
      if (slave_read_isRst_isInReset$EN)
	slave_read_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    slave_read_isRst_isInReset$D_IN;
      if (slave_write_isRst_isInReset$EN)
	slave_write_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    slave_write_isRst_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    address_image_1 = 64'hAAAAAAAAAAAAAAAA;
    address_image_2 = 64'hAAAAAAAAAAAAAAAA;
    bufferRowCount = 32'hAAAAAAAA;
    conversion_finished = 64'hAAAAAAAAAAAAAAAA;
    converting_flag = 1'h0;
    ddr_read_count = 64'hAAAAAAAAAAAAAAAA;
    ddr_write_count = 64'hAAAAAAAAAAAAAAAA;
    endOfbuffer = 1'h0;
    enq_order = 3'h2;
    gray_data = 9'h0AA;
    gx_reg11 = 8'hAA;
    gx_reg12 = 8'hAA;
    gx_reg13 = 8'hAA;
    gx_reg21 = 8'hAA;
    gx_reg22 = 8'hAA;
    gx_reg23 = 8'hAA;
    gx_reg31 = 8'hAA;
    gx_reg32 = 8'hAA;
    gx_reg33 = 8'hAA;
    gy_reg11 = 8'hAA;
    gy_reg12 = 8'hAA;
    gy_reg13 = 8'hAA;
    gy_reg21 = 8'hAA;
    gy_reg22 = 8'hAA;
    gy_reg23 = 8'hAA;
    gy_reg31 = 8'hAA;
    gy_reg32 = 8'hAA;
    gy_reg33 = 8'hAA;
    image_length = 32'hAAAAAAAA;
    image_size = 64'hAAAAAAAAAAAAAAAA;
    kernel_size = 32'hAAAAAAAA;
    master_read_isRst_isInReset = 1'h0;
    master_write_addrOut_rv = 68'hAAAAAAAAAAAAAAAAA;
    master_write_dataOut_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    master_write_isRst_isInReset = 1'h0;
    outPixel = 8'hAA;
    out_count = 8'hAA;
    out_hold = 64'hAAAAAAAAAAAAAAAA;
    reg11 = 8'hAA;
    reg12 = 8'hAA;
    reg13 = 8'hAA;
    reg21 = 8'hAA;
    reg22 = 8'hAA;
    reg23 = 8'hAA;
    reg31 = 8'hAA;
    reg32 = 8'hAA;
    reg33 = 8'hAA;
    rowBuffer_inital = 1'h0;
    slave_read_isRst_isInReset = 1'h0;
    slave_write_addrIn_rv = 68'hAAAAAAAAAAAAAAAAA;
    slave_write_dataIn_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    slave_write_isRst_isInReset = 1'h0;
    slide = 1'h0;
    slide_finish = 1'h0;
    slide_position = 32'hAAAAAAAA;
    sobelConvert = 1'h0;
    sobelState = 8'hAA;
    start = 64'hAAAAAAAAAAAAAAAA;
    start_write_request = 1'h0;
    state_64 = 64'hAAAAAAAAAAAAAAAA;
    state_temp = 8'hAA;
    sum_1 = 16'hAAAA;
    sum_12 = 16'hAAAA;
    sum_2 = 16'hAAAA;
    tempcount = 32'hAAAAAAAA;
    testslideWindow_control = 1'h0;
    testslideWindow_count = 8'hAA;
    threshold = 16'hAAAA;
    windowBuffer_once_inital = 1'h0;
    windowReady = 1'h0;
    windowSlide = 1'h0;
    window_Initial = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkAXIConverter

